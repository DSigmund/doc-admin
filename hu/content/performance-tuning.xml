<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="performance-tuning">
    <title>Teljesítmény hangolás</title>

    <abstract>
        <para>
            Az alábbiakban kerül bemutatásra a teljesítményfokozó technikák listája az
OTRS telepítéshez, beleértve a beállítást, kódolást, memóriahasználatot és a
továbbiakat.
        </para>
    </abstract>

    <section id="performance-tuning-otrs">
        <title>OTRS</title>
        <para>
            Számos lehetőség van az OTRS teljesítményének javítására.
        </para>

        <section id="performance-tuning-otrs-index">
            <title>TicketIndexModule</title>
            <para>
                Két háttérprogram modul létezik az indexhez a jegy várólista nézeténél:
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::IndexAccelerator::RuntimeDB</literal></term>
                    <listitem>
                        <para>
                            This is the default option, and will generate each queue view on the fly
from the ticket table. You will not have performance trouble until you have
about 60,000 open tickets in your system.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::IndexAccelerator::StaticDB</literal></term>
                    <listitem>
                        <para>
                            The most powerful module, should be used when you have above 80,000 open
tickets. It uses an extra <literal>ticket_index</literal> table, which will
be populated with keywords based on ticket data. Use
<filename>bin/otrs.Console.pl Maint::Ticket::QueueIndexRebuild</filename>
for generating an initial index after switching backends.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>
                You can change the used IndexAccelerator module via SysConfig.
            </para>
        </section>

        <section id="performance-tuning-otrs-search">
            <title>SearchIndexModule</title>
            <para>
                This module helps to extend your articles full-text search (From, To, Cc,
Subject and Body search).  There are two backend modules for the search
index:
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::ArticleSearchIndex::RuntimeDB</literal></term>
                    <listitem>
                        <para>
                            This is the default option, and will will do full-text searches on live data
(it works fine for up to 50,000 tickets).
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::ArticleSearchIndex::StaticDB</literal></term>
                    <listitem>
                        <para>
                            This module will strip all articles and build an index after article
creation, increasing performance of full-text searches up to 50%.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>
                You can change the used SearchIndexModule via SysConfig.
            </para>
            <para>
                To create an initial index, use <filename>bin/otrs.Console.pl
Maint::Ticket::FulltextIndexRebuild</filename>.
            </para>
            <para>
                For StaticDB module, there are some options available for fine tuning:
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::Attribute</literal></term>
                    <listitem>
                        <para>
                            The attribute "WordCountMax" defines the maximum of words which will be
processed to build up the index. For example only the first 1000 words of an
article body are stored in the article search index. The attributes
"WordLengthMin" and "WordLengthMax" are used as word length boundaries. Only
words with a length between these two values are stored in the article
search index.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::Filters</literal></term>
                    <listitem>
                        <para>
                            There are three default filters defined:
                        </para>
                        <itemizedlist mark='opencircle'>
                            <listitem>
                                <para>
                                    The first filter strips out special chars like: <literal>, &amp; &lt; &gt; ?
" ! * | ; [ ] ( ) + $ ^=</literal>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    The second filter strips out words which begin or ends with one of following
chars: <literal>' : .</literal>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    The third filter strips out words which do not contain a word-character:
<literal>a-z, A-Z, 0-9, _</literal>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::StopWords</literal></term>
                    <listitem>
                        <para>
                            There are so-called stop-words defined for some languages. These stop-words
will be skipped while creating the search index.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="performance-tuning-otrs-storage">
            <title>TicketStorageModule</title>
            <para>
                Két különböző háttérprogram modul létezik a jegy vagy bejegyzés tárolásához:
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::ArticleStorageDB</literal></term>
                    <listitem>
                        <para>
                            This default module will store attachments in the database.
                        </para>
                        <note>
                            <para>
                                Don't use it with large setups.
                            </para>
                        </note>
                        <para>
                            Pro: If your web server isn't running under 'otrs' user, use this module to
avoid file permission problems.
                        </para>
                        <para>
                            Con: It is not advisable to store attachments in your database. Take care
that your database is able to store large objects. I.e.: configure MySQL
with <literal>set-variable = max_allowed_packet=8M</literal> to store 8 MB
objects (the default is 2M).
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::ArticleStorageFS</literal></term>
                    <listitem>
                        <para>
                            Use this module to store attachments on the local file system.
                        </para>
                        <note>
                            <para>
                                Recommended for large setups.
                            </para>
                        </note>
                        <para>
                            Előnye: Gyors!
                        </para>
                        <para>
                            Con: Your web server should run under the 'otrs' user. Also, if you have
multiple front-end servers, you must make sure the filesystem is shared
between the servers. Place it on an NFS share or preferably a SAN or similar
solution.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <note>
                <para>
                    You can switch from one back-end to the other on the fly. You can switch the
backend in the SysConfig, and then run the command line utility
<filename>bin/otrs.Console.pl Admin::Article::StorageSwitch</filename> to
put the articles from the database onto the filesystem or the other way
around. You can use the <emphasis>--target</emphasis> option to specify the
target backend. Please note that the entire process can take considerable
time to run, depending on the number of articles you have and the available
CPU power and/or network capacity.
                </para>
            </note>
            <para>
                <screen><![CDATA[
shell> bin/otrs.Console.pl Admin::Article::StorageSwitch --target ArticleStorageFS
                ]]></screen>
            </para>
            <para>
                <emphasis>Parancsfájl: Tároló háttérprogramok átkapcsolása adatbázisról
fájlrendszerre.</emphasis>
            </para>
            <para>
                Ha a régi mellékleteket az adatbázisban szeretné tárolni, akkor
bekapcsolhatja a <literal>Ticket::StorageModule::CheckAllBackends</literal>
rendszerbeállítási lehetőséget annak biztosításához, hogy az OTRS továbbra
is megtalálja azokat.
            </para>
        </section>

        <section>
            <title>Jegyek archiválása</title>

            <para>
                Mivel az OTRS használható vizsgálatigazoló rendszerként, emiatt a lezárt
jegyek törlése nem lenne jó ötlet. Ezért megvalósítottunk egy olyan
szolgáltatást, amely lehetővé teszi a jegyek archiválását.
            </para>
            <para>
                Azok a jegyek, amelyek bizonyos feltételekre illeszkednek, megjelölhetők
„archiváltként”. Ezek a jegyek nem lesznek hozzáférhetők, ha egy szabályos
jegykeresést hajt végre, vagy egy általános ügyintéző feladatot
futtat. Magának a rendszernek többé nem kell foglalkoznia a jegyek hatalmas
mennyiségével, mivel csak a „legújabb” jegyeket kell figyelembe venni az
OTRS használatakor. Ez egy hatalmas teljesítménynövekedést eredményezhet
nagy rendszereknél.
            </para>
            <para>
                Az archiválás funkció használatához egyszerűen kövesse ezeket a lépéseket:
            </para>
            <orderedlist>
                <listitem>
                    <para>
                        Kapcsolja be az archiváló rendszert a rendszerbeállításokban
                    </para>
                    <para>
                        Az adminisztrációs oldalon menjen a rendszerbeállításokhoz, és válassza ki a
<literal>Ticket</literal> csoportot. A <literal>Core::Ticket</literal>
alcsoportban keresse meg a <literal>Ticket::ArchiveSystem</literal>
beállítást, amely alapértelmezetten „Nem” értékre van állítva. Változtassa
meg ezt a beállítást „Igen” értékre, és mentse el a változtatást.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Határozzon meg egy általános ügyintéző feladatot
                    </para>
                    <para>
                        Az adminisztrációs oldalon válassza ki az Általános ügyintézőt, és ott adja
hozzá az új feladatot.
                    </para>
                    <para>
                        <orderedlist>
                            <listitem>
                                <para>
                                    Feladat-beállítások
                                </para>
                                <para>
                                    Adjon egy nevet az archiválási feladatnak, és válassza ki a megfelelő
beállításokat a feladat ütemezéséhez.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Jegyszűrő
                                </para>
                                <para>
                                    A jegyszűrő olyan jegyeket keres, amelyek illeszkednek a kiválasztott
feltételekre. Lehet, hogy jó ötlet lenne csak azokat a lezárt állapotú
jegyeket archiválni, amelyeket néhány hónappal ezelőtt zártak le.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Jegyművelet
                                </para>
                                <para>
                                    Ebben a szakaszban állítsa be a „Kijelölt jegyek archiválása” címkéjű mezőt
„jegyek archiválása” értékre.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Mentse el a feladatot
                                </para>
                                <para>
                                    Az oldal végén találni fog egy lehetőséget a feladat elmentéséhez.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Érintett jegyek
                                </para>
                                <para>
                                    A rendszer minden olyan jegyet meg fog jeleníteni, amelyek archiválásra
kerülnek az általános ügyintéző feladat végrehajtásakor.
                                </para>
                            </listitem>
                        </orderedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Jegykeresés
                    </para>
                    <para>
                        Amikor jegyeket keres, akkor a rendszer alapértelmezetten olyan jegyekre
keres, amelyek nincsenek archiválva. Ha az archivált jegyekben is szeretne
keresni, akkor egyszerűen adja hozzá az „archívum keresést”, mialatt
keresési feltételeket határoz meg.
                    </para>
                </listitem>
            </orderedlist>
        </section>
        <section id="performance-tuning-otrs-cache">
            <title>Gyorsítótár</title>
            <para>
                OTRS caches a lot of temporary data in
<filename>/opt/otrs/var/tmp</filename>. Please make sure that this uses a
high performance file system/storage. If you have enough RAM, you can also
try to put this directory on a ramdisk like this:
            </para>
            <para>
                <screen><![CDATA[
shell> /opt/otrs/bin/otrs.Console.pl Maint::Session::DeleteAll
shell> /opt/otrs/bin/otrs.Console.pl Maint::Cache::Delete
shell> sudo mount -o size=16G -t tmpfs none /opt/otrs/var/tmp

# állandó csatolási pont hozzáadása a /etc/fstab fájlban
                ]]></screen>
            </para>
            <note>
                <para>
                    Please note that this will be a non-permanent storage that will be lost on
server reboot. All your sessions (if you store them in the filesystem) and
your cache data will be lost.
                </para>
            </note>
            <para>
                There is also a centralized memcached based cache backend available for
purchase from OTRS Group.
            </para>
        </section>

    </section>


    <section id="performance-tuning-database">
        <title>Adatbázis</title>
        <para>
            Az adatbázis-problémák a használt adatbázis szerint változnak. Tanulmányozza
az adatbázisa dokumentációját, vagy nézzék meg az adatbázis
adminisztrátorral.
        </para>

        <section id="performance-tuning-database-mysql">
            <title>MySQL</title>
            <para>
                Ha MyISAM típusú MySQL táblát használ (amely az alapértelmezett), és egy
tábla nagy részét törölte, vagy ha sok változtatást végzett egy változó
hosszúságú sorokkal rendelkező táblán (olyan táblákon, amelyeknek VARCHAR,
BLOB vagy TEXT oszlopaik vannak), akkor töredezettség-mentesítenie kell az
adatfájlt (táblákat) az „optimize” paranccsal.
            </para>
            <para>
                Ezt akkor kell megpróbálnia, ha a mysqld démonnak hatalmas processzoridőre
van szüksége. Optimalizálja a következő táblákat: ticket, ticket_history és
article (lásd a lenti parancsfájlt).
            </para>
            <para>
            <screen><![CDATA[
shell> mysql -u user -p database
mysql> optimize table ticket;
mysql> optimize table ticket_history;
mysql> optimize table article;
            ]]></screen>
            </para>
            <para>
                <emphasis>Parancsfájl: Adatbázistáblák optimalizálása.</emphasis>
            </para>
        </section>

        <section id="performance-tuning-database-postgresql">
            <title>PostgreSQL</title>
            <para>
                A PostgreSQL legjobban a PostgreSQL adatkönyvtárában lévő
<filename>postgresql.conf</filename> fájl módosításával hangolható. Ha
tanácsot szeretne, hogy hogyan kell ezt megtenni, nézze meg a következő
cikkeket:
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <ulink url="http://www.revsys.com/writings/postgresql-performance.html">
<citetitle>http://www.revsys.com/writings/postgresql-performance.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <ulink url="http://varlena.com/GeneralBits/Tidbits/perf.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/perf.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <ulink url="http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                If performance is still not satisfactory, we suggest that you join the
PostgreSQL Performance mailing list ( <ulink
url="http://www.postgresql.org/community/lists/">
<citetitle>http://www.postgresql.org/community/lists/</citetitle> </ulink>
), and ask questions there. The folks on the PostgreSQL list are very
friendly and can probably help.
            </para>
        </section>

    </section>

    <section id="performance-tuning-webserver">
        <title>Webkiszolgáló</title>
        <para>
            Of course you should use mod_perl 2.0 ( <ulink
url="http://perl.apache.org/">
<citetitle>http://perl.apache.org/</citetitle> </ulink> ). It's much faster
(~ *100) than pure CGI, but it needs more RAM.
        </para>

        <section id="performance-tuning-webserver-db">
            <title>Előre kiépített adatbázis-kapcsolatok</title>
            <para>
                You can have the database connections pre-established on startup of the web
server. This saves time (see <filename>README.webserver</filename>).
            </para>
        </section>

        <section id="performance-tuning-webserver-startup">
            <title>Előre betöltött modulok - startup.pl</title>
            <para>
                Use the startup script <filename>scripts/apache2-perl-startup.pl</filename>
for preloaded/precompiled Perl modules on your mod_perl webserver to be
faster, with a smaller memory footprint (see
<filename>README.webserver</filename>).
            </para>
        </section>
        <section id="performance-tuning-webserver-reload">
            <title>Perl-modulok újratöltése, amikor frissülnek a lemezen</title>
            <para>
                By default Apache::Reload is used in
<filename>scripts/apache2-httpd.include.conf</filename>. Disable it and you
will get 8% more speed. But remember to restart the web server if you
install any modules via the OTRS Package Manager, or any values in your
SysConfig or in <filename>Kernel/Config.pm</filename>.
            </para>
            <important>
                <para>
                    This would also mean you can't use the OTRS Package Manager via the web
interface, you will need to use the console commands:
<filename>bin/otrs.Console.pl Admin::Package::*</filename>.
                </para>
            </important>
        </section>

        <section id="performance-tuning-webserver-strategy">
            <title>A megfelelő stratégia választása</title>
            <para>
                If you have a larger installation, e.g. over 1,000 new tickets per day and
over 40 agents, it is a good idea to read the chapters on Performance of the
mod_perl User's Guide ( <ulink
url="http://perl.apache.org/docs/2.0/user/index.html">
<citetitle>http://perl.apache.org/docs/2.0/user/index.html</citetitle>
</ulink> ).
            </para>
        </section>

        <section id="performance-tuning-webserver-gzip">
            <title>mod_gzip/mod_deflate</title>
            <para>
                If your bandwidth is small, use <literal>mod_deflate</literal> for
Apache2. If you have an html page with 45k,
<literal>mod_gzip</literal>/<literal>mod_deflate</literal> compresses it to
about 7k. The drawback is that this increases the load on the server side.
            </para>
        </section>

    </section>

</chapter>
