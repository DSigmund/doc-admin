<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="states">
<title>工单状态</title>

<section id="states-predefined">
<title>预定义状态</title>

<para>
OTRS允许你修改预定义的工单状态和它们的类型，甚至添加新的状态。一个状态有两个重要属性：状态名称和状态类型。
</para>

<para>
OTRS中默认状态有：‘成功关闭’、‘失败关闭’、‘已合并’、‘新建’、‘处理中’、‘挂起等待成功关闭’、‘挂起等待失败关闭’、‘挂起提醒’和‘已删除’。
</para>

<section id="state-new">
<title>New（新建）</title>
<para>
从进入邮件创建的工单通常是这个状态。
</para>
</section>

<section id="state-open">
<title>Open（处理中）</title>
<para>
工单分配到队列和服务人员后的默认状态。
</para>
</section>

<section id="state-pending-reminder">
<title>Pending reminder（挂起提醒）</title>
<para>
在挂起时间过期后，工单所有者会收到一个关于该工单的提醒邮件。如果工单没有锁定，这个提醒会发送给队列中的所有服务人员。提醒工单只在上班时间发送，并每24小时重复发送直到服务人员修改工单状态为止。工单在这个状态期间消耗的时间会计入升级时间。
</para>
</section>

<section id="state-pending-autoclose-minus">
<title>Pending auto close-（挂起等待失败关闭）</title>
<para>
这个状态的工单如果挂起时间过期会被设置为“失败关闭”。工单在这个状态期间消耗的时间会计入升级时间。
</para>
</section>

<section id="state-pending-autoclose-plus">
<title>Pending auto close+（挂起等待成功关闭）</title>
<para>
这个状态的工单如果挂起时间过期会被设置为“成功关闭”。工单在这个状态期间消耗的时间会计入升级时间。
</para>
</section>

<section id="state-merged">
<title>Merged（已合并）</title>
<para>
这个状态表明该工单已与其它工单合并。
</para>
</section>

<section id="state-removed">
<title>已删除</title>
<para>
这是工单已被客户删除的状态。工单不会真的被删除，它们只是不能再显示为处理。为了在客户界面启用这个状态，你需要添加"已删除"的状态类型到系统配置设置"Ticket::Frontend::CustomerTicketZoom
###StateType"中。
</para>
</section>

<section id="state-closed-successful">
<title>Closed Successful（成功关闭）</title>
<para>
这是已经成功解决了的工单的最终状态。取决于你的配置，可以或不可以重新处理已关闭的工单。
</para>
</section>

<section id="state-closed-unsuccessful">
<title>Closed Unsuccessful（失败关闭）</title>
<para>
这是没有成功解决的工单的最终状态。取决于你的配置，可以或不可以重新处理已关闭的工单。
</para>
</section>

</section>

<section id="states-customizing">
<title>定制状态</title>
<para>
每个状态有一个名称（状态名称）和一个类型（状态类型）。在系统管理页面点击<link
linkend="adminarea-states">状态</link>链接，并点击按钮“添加状态”来创建一个新的状态。你可以随意选择一个新状态的名称。不能通过WEB界面修改状态类型。如果你要添加新的状态类型或修改已有类型的名称必须通过数据库直接修改。通常不要修改默认的状态类型，因为这可能产生不可预知的结果。比如说，升级计算和解锁功能都是基于特定的状态类型。
</para>

<para>
通过这个窗口可以修改已经存在的状态的名称或者添加新的状态。如果通过WEB界面修改了状态“新建”，这个修改还必须通过配置文件<filename>Kernel/Config.pm</filename>或通过系统配置界面进行配置。必须修改下面脚本中指定的设置以确保OTRS能使用“新建”状态的修改内容正常工作。
</para>

<para>
<programlisting>
    [...]
    # PostmasterDefaultState
    # (The default state of new tickets.) [default: new]
    $Self-&gt;{PostmasterDefaultState} = 'new';

    # CustomerDefaultState
    # (default state of new customer tickets)
    $Self-&gt;{CustomerDefaultState} = 'new';
    [...]
</programlisting>
</para>

<para>
<emphasis>脚本：修改文件Kernel/Config.pm中的设置。</emphasis>
</para>

<para>
如果要添加一个新的状态，需要使用一个数据库客户端修改OTRS数据库中的ticket_state_type表，如下面脚本所示。
</para>

<para>
<screen>
linux:~# mysql -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 23 to server version: 5.0.16-Debian_1-log

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt; use otrs;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; insert into ticket_state_type (name,comments) values ('own','Own
state type');
Query OK, 1 row affected (0.00 sec)

mysql&gt; quit
Bye
linux:~#
</screen>
</para>

<para>
<emphasis>脚本：修改OTRS数据库。</emphasis>
</para>

<para>
现在就可以使用你刚刚创建的新状态类型了。在一个状态已经链接到这个新状态类型后，OTRS配置还必须修改以确保这个新状态可用。只需通过系统配置修改下面的选项即可：
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketPhone_StateDefault">
Frontend::Agent::Ticket::ViewPhoneNew &gt; AgentTicketPhone###StateDefault
</link> - to define the default next state for new phone tickets.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketPhone_StateType">
Frontend::Agent::Ticket::ViewPhoneNew &gt; AgentTicketPhone###StateType
</link> - to define the available next states for new phone tickets.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketEmail_StateDefault">
Frontend::Agent::Ticket::ViewEmailNew &gt; AgentTicketEmail###StateDefault
</link> - to define the default next state for new email tickets.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketEmail_StateType">
Frontend::Agent::Ticket::ViewEmailNew &gt; AgentTicketEmail###StateType
</link> - to define the available next states for new email tickets.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketPhoneOutbound_State">
Frontend::Agent::Ticket::ViewPhoneOutbound &gt;
AgentTicketPhoneOutbound###State </link> - to define the default next state
for new phone articles.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketPhoneOutbound_StateType">
Frontend::Agent::Ticket::ViewPhoneOutbound &gt;
AgentTicketPhoneOutbound###StateType </link> - to define the available next
states for new phone articles.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketMove_State">
Frontend::Agent::Ticket::ViewMove &gt; AgentTicketMove###State </link> - to
define the default next state for moving a ticket.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketMove_StateType">
Frontend::Agent::Ticket::ViewMove &gt; AgentTicketMove###StateType </link> -
to define the available next states for moving a ticket.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketBounce_StateDefault">
Frontend::Agent::Ticket::ViewBounce &gt; StateDefault </link> - to define
the default next state after bouncing a ticket.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketBounce_StateType">
Frontend::Agent::Ticket::ViewBounce &gt; StateType </link> - to define the
available next states in the bounce screen.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketBulk_StateDefault">
Frontend::Agent::Ticket::ViewBulk &gt; StateDefault </link> - to define the
default next state in a bulk action.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketBulk_StateType">
Frontend::Agent::Ticket::ViewBulk &gt; StateType </link> - to define the
available next states in the bulk action screen.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketClose_StateDefault">
Frontend::Agent::Ticket::ViewClose &gt; StateDefault </link> - to define the
default next state after closing a ticket.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketClose_StateType">
Frontend::Agent::Ticket::ViewClose &gt; StateType </link> - to define the
available next states in the close screen.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketCompose_StateDefault">
Frontend::Agent::Ticket::ViewCompose &gt; StateDefault </link> - to define
the default next state in the Compose (reply) screen.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketCompose_StateType">
Frontend::Agent::Ticket::ViewCompose &gt; StateType </link> - to define the
available next states in the Compose (reply) screen.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketForward_StateDefault">
Frontend::Agent::Ticket::ViewForward &gt; StateDefault </link> - to define
the default next state after forwarding a ticket.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketForward_StateType">
Frontend::Agent::Ticket::ViewForward &gt; StateType </link> - to define the
available next states in the Forward screen.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketFreeText_StateDefault">
Frontend::Agent::Ticket::ViewForward &gt; StateDefault </link> - to define
the default next state of a ticket in the free text screen.
</para>

<para>
<link
linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketFreeText_StateType">
Frontend::Agent::Ticket::ViewForward &gt; StateType </link> - to define the
available next states in the free text screen.
</para>


<para>
<link linkend="ConfigReference_Setting_PostmasterDefaultState">
Core::PostMaster &gt; PostmasterDefaultState </link> - to define the state
of tickets created from emails.
</para>

<para>
<link linkend="ConfigReference_Setting_PostmasterFollowUpState">
Core::PostMaster &gt; PostmasterFollowUpState </link> - to define the state
of tickets after a follow-up has been received.
</para>

<para>
<link linkend="ConfigReference_Setting_PostmasterFollowUpStateClosed">
Core::PostMaster &gt; PostmasterFollowUpStateClosed </link> - to define the
state of tickets after a follow-up has been received on an already closed
ticket.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::ViewableStateType">
Core::Ticket &gt; ViewableStateType </link> - to define the state types that
are displayed at various places in the system, for example in the Queueview.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::UnlockStateType">
Core::Ticket &gt; UnlockStateType </link> - to define the state types for
unlocked tickets.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::PendingReminderStateType">
Core::Ticket &gt; PendingReminderStateType </link> - to define the state
type for reminder tickets.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::PendingAutoStateType">
Core::Ticket &gt; PendingAutoStateType </link> - to define the state type
for Pending Auto tickets.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::StateAfterPending">
Core::Ticket > StateAfterPending </link> - to define the state a ticket is
set to after the Pending Auto timer of the configured state has expired.
</para>

</section>
</section>
