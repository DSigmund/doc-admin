<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">



<!-- nofilter(TidyAll::Plugin::OTRS::Common::Origin) -->
<section id="genericinterface-connectors">
    <title>连接器</title>
    <para>
        连接器本质上是动作（在OTRS作为WEB服务提供者时叫操作，在OTRS作为WEB服务请求者时啊调用程序）的集合。但是它也可以包含特殊的映射或传输。
    </para>
    <para>
        一个连接器可以只有操作、只有调用程序或者两者都有。一个连接器甚至可以使用其它连接器的一部分如映射或传输（如果它们不是部署为特定的连接器的话）。
    </para>
    <para>
        换句话说，连接器不局限于控制器层，在需要时还能扩展到数据映射或网络传输层。
    </para>
    <para>
        由于通用接口的模块化设计，连接器可以看作是一个插件；这意味着通过添加连接器，通用接口的能力可以扩展使用在：OTRS功能插件、OTRS定制模块、第三方模块等等。
    </para>

    <section id="genericinterface-bundled-connectors">
        <title>捆绑的连接器</title>
        <para>
            在当前版本的OTRS中有下列连接器可以使用：
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    FAQ 知识库
                </para>
            </listitem>
            <listitem>
                <para>
                    会话
                </para>
            </listitem>
            <listitem>
                <para>
                    工单
                </para>
            </listitem>
        </itemizedlist>

        <section id="generic-faq-connector">
            <title>FAQ Connector</title>
            <para>
                This connector get and search public FAQ items, as well as list FAQ
languages and categories.
            </para>
            <itemizedlist>
                <para>
                    提供：
                </para>
                <listitem>
                    <para>
                        操作：
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                LanguageList
                            </para>
                        </listitem>
                    </itemizedlist>
                    <itemizedlist>
                        <listitem>
                            <para>
                                PublicCategoryList
                            </para>
                        </listitem>
                    </itemizedlist>
                    <itemizedlist>
                        <listitem>
                            <para>
                                PublicFAQGet
                            </para>
                        </listitem>
                    </itemizedlist>
                    <itemizedlist>
                        <listitem>
                            <para>
                                PublicFAQSearch
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <section id="generic-faq-connector-operations">
                <title>操作</title>
                <section id="generic-faq-connector-operations-languagelist">
                    <title>LanguageList</title>
                    <para>
                        For this operation is not necessary to send any special parameter to the
server, you just need to request the web service directly indicating the
"LanguageList" operation. The operation will return a list of languages
including ID and the Name for each language on the system.
                    </para>
                    <para>可能的属性：</para>
                    <para>
                        <programlisting>
                            <![CDATA[
      <LanguageList/>
                            ]]>
                        </programlisting>
                    </para>
                </section>
                <section id="generic-faq-connector-operations-publiccategorylist">
                    <title>PublicCategoryList</title>
                    <para>
                        For this operation is also not necessary any special parameter, just the
simple call for requesting the web service with the operation name
'PublicCategoryList' as a response you will receive a list of categories
including the ID and the Name (long format) for each category.
                    </para>
                    <para> 可能的属性：</para>
                    <para>
                        <programlisting>
                            <![CDATA[
      <PublicCategoryList/>
                            ]]>
                        </programlisting>
                    </para>
                </section>
                <section id="generic-faq-connector-operations-publicfaqget">
                    <title>PublicFAQGet</title>
                    <para>
                        To be able to get one or more FAQ entries, you should send the ItemID(s) as
a parameter for the FAQ entry you want to get. You will receive the entire
FAQ record with all attachments included. Note that attachment contents will
be transferred as base64-encoded strings.
                    </para>
                    <para>
                        Setting GetAttachmentContents to 0 will prevent to fetch the content of the
attachment this will increase the performance of the operation when the
attachment contents are not really needed.
                    </para>
                    <para> 可能的属性：</para>
                    <para>
                        <programlisting>
                            <![CDATA[
      <PublicFAQGet>
         <ItemID>?</ItemID>
         <!-- optional, defaults to 1 -->
         <GetAttachmentContents>?</GetAttachmentContents>
      </PublicFAQGet>
                            ]]>
                        </programlisting>
                    </para>
                </section>
                <section id="generic-faq-connector-operations-publicfaqsearch">
                    <title>PublicFAQSearch</title>
                    <para>
                        For this operation you can specify the following optional parameters: Name,
Title, What (full text search), Keyword, LanguageIDs and CategoryIDs to
narrow the search results.  You may also specify the order of the results by
the following parameters: OrderBy and OrderByDirection.
                    </para>
                    <para>
                        Send a request to the web service with the operation name 'PublicFAQSearch'
as a response you will receive a list of FAQ item IDs.
                    </para>
                    <note>
                        <para>
                            The full FAQ item data can be retrieved for each ID by using 'PublicFAQGet'
operation separately.
                        </para>
                    </note>

                    <para> 可能的属性：</para>
                    <para>
                        <programlisting>
                            <![CDATA[
      <PublicFAQSearch>
         <!--Optional:-->
         <Number>?</Number>
         <!--Optional:-->
         <Title>?</Title>
         <!--Optional:-->
         <What>?</What>
         <!--Optional:-->
         <Keyword>?</Keyword>
         <!--Zero or more repetitions:-->
         <LanguageIDs>?</LanguageIDs>
         <!--Zero or more repetitions:-->
         <CategoryIDs>?</CategoryIDs>
         <!--Zero or more repetitions:-->
         <SortBy>?</SortBy>
         <!--Optional:-->
         <OrderBy>?</OrderBy>
         <!--Optional:-->
         <OprderByDirection>?</OprderByDirection>
      </PublicFAQSearch>
                            ]]>
                        </programlisting>
                    </para>
                </section>
            </section>
        </section>
        <section id="generic-session-connector">
            <title>会话连接器</title>
            <para>
                这个连接器可以创建一个有效的会话ID，能够用在其它任何操作中。
            </para>
            <itemizedlist>
                <para>
                    提供：
                </para>
                <listitem>
                    <para>
                        操作：
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                SessionCreate（创建会话）
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                SessionGet（获取会话）
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <section id="generic-session-connector-operations">
                <title>操作</title>
                <section id="generic-session-connector-operations-sessioncreate">
                    <title>SessionCreate（创建会话）</title>
                    <para>
                        创建一个新的有效会话ID，用在其它连接器比如创建工单的其它操作中。
                    </para>
                    <note>
                        <para>
                            要在其它连接器的其它操作中使用这个会话ID，需要该操作通过会话ID部署身份认证。所有剩下的捆绑操作都有能力接受一个有效的会话ID作为一个身份认证方法。
                        </para>
                    </note>
                    <para>可能的属性：</para>
                    <para>
                        <programlisting>
                            <![CDATA[
      <SessionCreate>
         <!--You have a MANDATORY CHOICE of the next 2 items at this level-->
         <!--Optional:-->
         <UserLogin>?</UserLogin>
         <!--Optional:-->
         <CustomerUserLogin>?</CustomerUserLogin>
         <!--Optional:-->
         <Password>?</Password>
      </SessionCreate>
                            ]]>
                        </programlisting>
                    </para>
                </section>
                <section id="generic-session-connector-operations-sessionget">
                    <title>SessionCreate（创建会话）</title>
                    <para>
                        从一个有效的会话搜集数据，不包括用户密码或质疑令牌等敏感信息。
                    </para>
                    <note>
                        <para>
                            If any of its values is a complex structure then it is automatically
converted to a JSON string.
                        </para>
                    </note>
                    <para>可能的属性：</para>
                    <para>
                        <programlisting>
                            <![CDATA[
      <SessionGet>
         <SessionID>?</SessionID>
      </SessionGet>
                            ]]>
                        </programlisting>
                    </para>
                </section>
            </section>
        </section>

        <section id="generic-ticket-connector">
            <title>工单连接器</title>
            <para>
                这个连接器提供与工单交互的基本功能。
            </para>
            <itemizedlist>
                <para>
                    提供：
                </para>
                <listitem>
                    <para>
                        操作：
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                工单创建
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                TicketUpdate（更新工单）
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                TicketGet（获取工单）
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                TicketSearch（搜索工单）
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                TicketHistoryGet（获取工单历史）
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <section id="generic-ticket-connector-operations">
                <title>操作</title>
                <section id="generic-ticket-connector-operations-ticketcreate">
                    <title>工单创建</title>
                    <para>
                        提供一个接口以在OTRS中创建一个工单。一个工单必须包含一个信件并包含数个附件，所有定义的动态字段也可以在创建工单操作时设置。
                    </para>
                    <para>可能的属性：</para>
                    <para>
                        <programlisting>
                            <![CDATA[
      <TicketCreate>
         <!--You have a MANDATORY CHOICE of the next 3 items at this level-->
         <!--Optional:-->
         <UserLogin>?</UserLogin>
         <!--Optional:-->
         <CustomerUserLogin>?</CustomerUserLogin>
         <!--Optional:-->
         <SessionID>?</SessionID>
         <!--Optional:-->
         <Password>?</Password>
         <Ticket>
            <Title>?</Title>
            <!--You have a MANDATORY CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <QueueID>?</QueueID>
            <!--Optional:-->
            <Queue>?</Queue>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <TypeID>?</TypeID>
            <!--Optional:-->
            <Type>?</Type>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <ServiceID>?</ServiceID>
            <!--Optional:-->
            <Service>?</Service>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <SLAID>?</SLAID>
            <!--Optional:-->
            <SLA>?</SLA>
            <!--You have a MANDATORY CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <StateID>?</StateID>
            <!--Optional:-->
            <State>?</State>
            <!--You have a MANDATORY CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <PriorityID>?</PriorityID>
            <!--Optional:-->
            <Priority>?</Priority>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <OwnerID>?</OwnerID>
            <!--Optional:-->
            <Owner>?</Owner>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <ResponsibleID>?</ResponsibleID>
            <!--Optional:-->
            <Responsible>?</Responsible>
            <CustomerUser>?</CustomerUser>
            <!--Optional:-->
            <CustomerID>?</CustomerID>
            <!--Optional:-->
            <PendingTime>
               <!--You have a CHOICE of the next and the other 5 items at this level-->
               <Diff>?</Diff>
               <Year>?</Year>
               <Month>?</Month>
               <Day>?</Day>
               <Hour>?</Hour>
               <Minute>?</Minute>
            </PendingTime>
         </Ticket>
         <Article>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <CommunicationChannelID>?</CommunicationChannelID>
            <!--Optional: Possible values Email, Internal or Phone-->
            <CommunicationChannel>?</CommunicationChannel>
            <IsVisibleForCustomer>?</IsVisibleForCustomer>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <SenderTypeID>?</SenderTypeID>
            <!--Optional:-->
            <SenderType>?</SenderType>
            <!--Optional:-->
            <From>?</From>
            <!--Optional:-->
            <To>?</To>
            <!--Optional:-->
            <Cc>?</Cc>
            <!--Optional:-->
            <Bcc>?</Bcc>
            <Subject>?</Subject>
            <Body>?</Body>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <ContentType>?</ContentType>
            <Charset>?</Charset>
            <MimeType>?</MimeType>
            <!--Optional:-->
            <HistoryType>?</HistoryType>
            <!--Optional:-->
            <HistoryComment>?</HistoryComment>
            <!--Optional:-->
            <AutoResponseType>?</AutoResponseType>
            <!--Optional:-->
            <TimeUnit>?</TimeUnit>
            <!--Optional:-->
            <NoAgentNotify>?</NoAgentNotify>
            <!--Zero or more repetitions:-->
            <ForceNotificationToUserID>?</ForceNotificationToUserID>
            <!--Zero or more repetitions:-->
            <ExcludeNotificationToUserID>?</ExcludeNotificationToUserID>
            <!--Zero or more repetitions:-->
            <ExcludeMuteNotificationToUserID>?</ExcludeMuteNotificationToUserID>
         </Article>
         <!--Zero or more repetitions:-->
         <DynamicField>
            <Name>?</Name>
            <!--1 or more repetitions:-->
            <Value>?</Value>
         </DynamicField>
         <!--Zero or more repetitions:-->
         <Attachment>
            <Content>cid:61886944659</Content>
            <ContentType>?</ContentType>
            <Filename>?</Filename>
         </Attachment>
      </TicketCreate>
                            ]]>
                        </programlisting>
                    </para>
                </section>
                <section id="generic-ticket-connector-operations-ticketupdate">
                    <title>TicketUpdate（更新工单）</title>
                    <para>
                        ‘更新工单’操作用来修改已有工单的属性或者添加一个新的信件（包括附件和所有定义的工单和信件的动态字段）。
                    </para>
                    <note>
                        <para>
                            没有必要创建一个信件来修改一个工单的属性。
                        </para>
                    </note>
                    <para>可能的属性：</para>
                    <para>
                        <programlisting>
                            <![CDATA[
      <TicketUpdate>
         <!--You have a MANDATORY CHOICE of the next 3 items at this level-->
         <!--Optional:-->
         <UserLogin>?</UserLogin>
         <!--Optional:-->
         <CustomerUserLogin>?</CustomerUserLogin>
         <!--Optional:-->
         <SessionID>?</SessionID>
         <!--Optional:-->
         <Password>?</Password>
         <!--You have a CHOICE of the next 2 items at this level-->
         <TicketID>?</TicketID>
         <TicketNumber>?</TicketNumber>
         <!--Optional:-->
         <Ticket>
            <!--Optional:-->
            <Title>?</Title>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <QueueID>?</QueueID>
            <!--Optional:-->
            <Queue>?</Queue>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <TypeID>?</TypeID>
            <!--Optional:-->
            <Type>?</Type>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <ServiceID>?</ServiceID>
            <!--Optional:-->
            <Service>?</Service>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <SLAID>?</SLAID>
            <!--Optional:-->
            <SLA>?</SLA>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <StateID>?</StateID>
            <!--Optional:-->
            <State>?</State>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <PriorityID>?</PriorityID>
            <!--Optional:-->
            <Priority>?</Priority>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <OwnerID>?</OwnerID>
            <!--Optional:-->
            <Owner>?</Owner>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <ResponsibleID>?</ResponsibleID>
            <!--Optional:-->
            <Responsible>?</Responsible>
            <!--Optional:-->
            <CustomerUser>?</CustomerUser>
            <!--Optional:-->
            <CustomerID>?</CustomerID>
            <!--Optional:-->
            <PendingTime>
               <!--You have a CHOICE of the next and the other 5 items at this level-->
               <Diff>?</Diff>
               <Year>?</Year>
               <Month>?</Month>
               <Day>?</Day>
               <Hour>?</Hour>
               <Minute>?</Minute>
            </PendingTime>
         </Ticket>
         <!--Optional:-->
         <Article>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <CommunicationChannelID>?</CommunicationChannelID>
            <!--Optional: Possible values Email, Internal or Phone-->
            <CommunicationChannel>?</CommunicationChannel>
            <IsVisibleForCustomer>?</IsVisibleForCustomer>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <SenderTypeID>?</SenderTypeID>
            <!--Optional:-->
            <SenderType>?</SenderType>
            <!--Optional:-->
            <From>?</From>
            <!--Optional:-->
            <To>?</To>
            <!--Optional:-->
            <Cc>?</Cc>
            <!--Optional:-->
            <Bcc>?</Bcc>
            <Subject>?</Subject>
            <Body>?</Body>
            <!--You have a CHOICE of the next 2 items at this level-->
            <!--Optional:-->
            <ContentType>?</ContentType>
            <Charset>?</Charset>
            <MimeType>?</MimeType>
            <!--Optional:-->
            <HistoryType>?</HistoryType>
            <!--Optional:-->
            <HistoryComment>?</HistoryComment>
            <!--Optional:-->
            <AutoResponseType>?</AutoResponseType>
            <!--Optional:-->
            <TimeUnit>?</TimeUnit>
            <!--Optional:-->
            <NoAgentNotify>?</NoAgentNotify>
            <!--Zero or more repetitions:-->
            <ForceNotificationToUserID>?</ForceNotificationToUserID>
            <!--Zero or more repetitions:-->
            <ExcludeNotificationToUserID>?</ExcludeNotificationToUserID>
            <!--Zero or more repetitions:-->
            <ExcludeMuteNotificationToUserID>?</ExcludeMuteNotificationToUserID>
         </Article>
         <!--Zero or more repetitions:-->
         <DynamicField>
            <Name>?</Name>
            <!--1 or more repetitions:-->
            <Value>?</Value>
         </DynamicField>
         <!--Zero or more repetitions:-->
         <Attachment>
            <Content>cid:166861569966</Content>
            <ContentType>?</ContentType>
            <Filename>?</Filename>
         </Attachment>
      </TicketUpdate>
                            ]]>
                        </programlisting>
                    </para>
                </section>
                <section id="generic-ticket-connector-operations-ticketget">
                    <title>TicketGet（获取工单）</title>
                    <para>
                        这个操作用来获取一个工单的所有属性，包括动态字段、所有信件和属于工单的所有附件。
                    </para>
                    <para>可能的属性：</para>
                    <para>
                        <programlisting>
                            <![CDATA[
      <TicketGet>
         <!--You have a MANDATORY CHOICE of the next 3 items at this level-->
         <!--Optional:-->
         <UserLogin>?</UserLogin>
         <!--Optional:-->
         <CustomerUserLogin>?</CustomerUserLogin>
         <!--Optional:-->
         <SessionID>?</SessionID>
         <!--Optional:-->
         <Password>?</Password>
         <!--1 or more repetitions:-->
         <TicketID>?</TicketID>
         <!--Optional:-->
         <DynamicFields>?</DynamicFields>
         <!--Optional:-->
         <Extended>?</Extended>
         <!--Optional:-->
         <AllArticles>?</AllArticles>
         <!--Optional:-->
         <ArticleSenderType>?</ArticleSenderType>
         <!--Optional:-->
         <ArticleOrder>?</ArticleOrder>
         <!--Optional:-->
         <ArticleLimit>?</ArticleLimit>
         <!--Optional:-->
         <Attachments>?</Attachments>
         <!--Optional:-->
         <GetAttachmentContents>?</GetAttachmentContents>
         <!--Optional:-->
         <HTMLBodyAsAttachment>?</HTMLBodyAsAttachment>
      </TicketGet>
                            ]]>
                        </programlisting>
                    </para>
                </section>
                <section id="generic-ticket-connector-operations-ticketsearch">
                    <title>TicketSearch（搜索工单）</title>
                    <para>
                        ‘搜索工单’操作返回匹配一个预定义条件的工单编号列表。
                    </para>
                    <para>可能的属性：</para>
                    <para>
                        <programlisting>
                            <![CDATA[
      <TicketSearch>
         <!--You have a MANDATORY CHOICE of the next 3 items at this level-->
         <!--Optional:-->
         <UserLogin>?</UserLogin>
         <!--Optional:-->
         <CustomerUserLogin>?</CustomerUserLogin>
         <!--Optional:-->
         <SessionID>?</SessionID>
         <!--Optional:-->
         <Password>?</Password>
         <!--Optional:-->
         <Limit>?</Limit>
         <!--Zero or more repetitions:-->
         <TicketNumber>?</TicketNumber>
         <!--Zero or more repetitions:-->
         <Title>?</Title>
         <!--Zero or more repetitions:-->
         <Queues>?</Queues>
         <!--Zero or more repetitions:-->
         <QueueIDs>?</QueueIDs>
         <!--Optional:-->
         <UseSubQueues>?</UseSubQueues>
         <!--Zero or more repetitions:-->
         <Types>?</Types>
         <!--Zero or more repetitions:-->
         <TypeIDs>?</TypeIDs>
         <!--Zero or more repetitions:-->
         <States>?</States>
         <!--Zero or more repetitions:-->
         <StateIDs>?</StateIDs>
         <!--Zero or more repetitions:-->
         <StateType>?</StateType>
         <!--Zero or more repetitions:-->
         <StateTypeIDs>?</StateTypeIDs>
         <!--Zero or more repetitions:-->
         <Priorities>?</Priorities>
         <!--Zero or more repetitions:-->
         <PriorityIDs>?</PriorityIDs>
         <!--Zero or more repetitions:-->
         <Services>?</Services>
         <!--Zero or more repetitions:-->
         <ServiceIDs>?</ServiceIDs>
         <!--Zero or more repetitions:-->
         <SLAs>?</SLAs>
         <!--Zero or more repetitions:-->
         <SLAIDs>?</SLAIDs>
         <!--Zero or more repetitions:-->
         <Locks>?</Locks>
         <!--Zero or more repetitions:-->
         <LockIDs>?</LockIDs>
         <!--Zero or more repetitions:-->
         <OwnerIDs>?</OwnerIDs>
         <!--Zero or more repetitions:-->
         <ResponsibleIDs>?</ResponsibleIDs>
         <!--Zero or more repetitions:-->
         <WatchUserIDs>?</WatchUserIDs>
         <!--Zero or more repetitions:-->
         <CustomerID>?</CustomerID>
         <!--Zero or more repetitions:-->
         <CustomerUserLogin>?</CustomerUserLogin>
         <!--Zero or more repetitions:-->
         <CreatedUserIDs>?</CreatedUserIDs>
         <!--Zero or more repetitions:-->
         <CreatedTypes>?</CreatedTypes>
         <!--Zero or more repetitions:-->
         <CreatedTypeIDs>?</CreatedTypeIDs>
         <!--Zero or more repetitions:-->
         <CreatedPriorities>?</CreatedPriorities>
         <!--Zero or more repetitions:-->
         <CreatedPriorityIDs>?</CreatedPriorityIDs>
         <!--Zero or more repetitions:-->
         <CreatedStates>?</CreatedStates>
         <!--Zero or more repetitions:-->
         <CreatedStateIDs>?</CreatedStateIDs>
         <!--Zero or more repetitions:-->
         <CreatedQueues>?</CreatedQueues>
         <!--Zero or more repetitions:-->
         <CreatedQueueIDs>?</CreatedQueueIDs>
         <!--Zero or more repetitions:-->
         <DynamicField>
            <Name>?<Name>
            <!--You have a MANDATORY CHOICE of the next 6 items at this level-->
            <!--Optional:-->
            <Equals>?</Equals>
            <!--Optional:-->
            <Like>?</Like>
            <!--Optional:-->
            <GreaterThan>?</GreaterThan>
            <!--Optional:-->
            <GreaterThanEquals>?</GreaterThanEquals>
            <!--Optional:-->
            <SmallerThan>?</SmallerThan>
            <!--Optional:-->
            <SmallerThanEquals>?</SmallerThanEquals>
         </DynamicField>
         <!--Optional:-->
         <Ticketflag>
            <!--Optional:-->
            <Seen>?</Seen>
         </Ticketflag>
         <!--Optional:-->
         <From>?</From>
         <!--Optional:-->
         <To>?</To>
         <!--Optional:-->
         <Cc>?</Cc>
         <!--Optional:-->
         <Subject>?</Subject>
         <!--Optional:-->
         <Body>?</Body>
         <!--Optional:-->
         <FullTextIndex>?</FullTextIndex>
         <!--Optional:-->
         <ContentSearch>?</ContentSearch>
         <!--Optional:-->
         <ConditionInline>?</ConditionInline>
         <!--Optional:-->
         <ArticleCreateTimeOlderMinutes>?</ArticleCreateTimeOlderMinutes>
         <!--Optional:-->
         <ArticleCreateTimeNewerMinutes>?</ArticleCreateTimeNewerMinutes>
         <!--Optional:-->
         <ArticleCreateTimeNewerDate>?</ArticleCreateTimeNewerDate>
         <!--Optional:-->
         <ArticleCreateTimeOlderDate>?</ArticleCreateTimeOlderDate>
         <!--Optional:-->
         <TicketCreateTimeOlderMinutes>?</TicketCreateTimeOlderMinutes>
         <!--Optional:-->
         <ATicketCreateTimeNewerMinutes>?</ATicketCreateTimeNewerMinutes>
         <!--Optional:-->
         <TicketCreateTimeNewerDate>?</TicketCreateTimeNewerDate>
         <!--Optional:-->
         <TicketCreateTimeOlderDate>?</TicketCreateTimeOlderDate>
         <!--Optional:-->
         <TicketLastChangeTimeOlderMinutes>?</TicketLastChangeTimeOlderMinutes>
         <!--Optional:-->
         <TicketLastChangeTimeNewerMinutes>?</TicketLastChangeTimeNewerMinutes>
         <!--Optional:-->
         <TicketLastChangeTimeNewerDate>?</TicketLastChangeTimeNewerDate>
         <!--Optional:-->
         <TicketLastChangeTimeOlderDate>?</TicketLastChangeTimeOlderDate>
         <!--Optional:-->
         <TicketChangeTimeOlderMinutes>?</TicketChangeTimeOlderMinutes>
         <!--Optional:-->
         <TicketChangeTimeNewerMinutes>?</TicketChangeTimeNewerMinutes>
         <!--Optional:-->
         <TicketChangeTimeNewerDate>?</TicketChangeTimeNewerDate>
         <!--Optional:-->
         <TicketChangeTimeOlderDate>?</TicketChangeTimeOlderDate>
         <!--Optional:-->
         <TicketCloseTimeOlderMinutes>?</TicketCloseTimeOlderMinutes>
         <!--Optional:-->
         <TicketCloseTimeNewerMinutes>?</TicketCloseTimeNewerMinutes>
         <!--Optional:-->
         <TicketCloseTimeNewerDate>?</TicketCloseTimeNewerDate>
         <!--Optional:-->
         <TicketCloseTimeOlderDate>?</TicketCloseTimeOlderDate>
         <!--Optional:-->
         <TicketPendingTimeOlderMinutes>?</TicketPendingTimeOlderMinutes>
         <!--Optional:-->
         <TicketPendingTimeNewerMinutes>?</TicketPendingTimeNewerMinutes>
         <!--Optional:-->
         <TicketPendingTimeNewerDate>?</TicketPendingTimeNewerDate>
         <!--Optional:-->
         <TicketPendingTimeOlderDate>?</TicketPendingTimeOlderDate>
         <!--Optional:-->
         <TicketEscalationTimeOlderMinutes>?</TicketEscalationTimeOlderMinutes>
         <!--Optional:-->
         <TTicketEscalationTimeNewerMinutes>?</TTicketEscalationTimeNewerMinutes>
         <!--Optional:-->
         <TicketEscalationTimeNewerDate>?</TicketEscalationTimeNewerDate>
         <!--Optional:-->
         <TicketEscalationTimeOlderDate>?</TicketEscalationTimeOlderDate>
         <!--Optional:-->
         <ArchiveFlags>?</ArchiveFlags>
         <!--Zero or more repetitions:-->
         <OrderBy>?</OrderBy>
         <!--Zero or more repetitions:-->
         <SortBy>?</SortBy>
         <!--Zero or more repetitions:-->
         <CustomerUserID>?</CustomerUserID>
      </TicketSearch>
                            ]]>
                        </programlisting>
                    </para>
                </section>
                <section id="generic-ticket-connector-operations-tickethistoryget">
                    <title>TicketHistoryGet（获取工单历史）</title>
                    <para>
                        这个操作用于从一个或多个工单中获取所有历史记录。
                    </para>
                    <para>可能的属性：</para>
                    <para>
                        <programlisting>
                            <![CDATA[
      <TicketHistoryGet>
         <!--You have a MANDATORY CHOICE of the next 2 items at this level-->
         <!--Optional:-->
         <UserLogin>?</UserLogin>
         <!--Optional:-->
         <SessionID>?</SessionID>
         <!--Optional:-->
         <Password>?</Password>
         <!--1 or more repetitions:-->
         <TicketID>?</TicketID>
      </TicketHistoryGet>
                            ]]>
                        </programlisting>
                    </para>
                </section>
            </section>
        </section>
    </section>
    <section id="genericinterface-bundled-connectors-examples">
        <title>例子：</title>
        <section>
            <title>WEB服务配置</title>
            <para>
                下面是一个基本但完整的YAML格式的WEB服务配置文件，通过SOAP网络传输方法使用了所有的工单连接器操作。为了在OTRS中使用它，你需要复制它的内容到一个叫<filename>GenericTicketConnectorSOAP.yml</filename>的文件，并且在系统管理页面进入WEB服务窗口，然后在WEB服务概览窗口点击“添加WEB服务”按钮，然后在添加WEB服务窗口点击“导入WEB服务”按钮，将这个文件导入到OTRS中。
            </para>
            <para>
                <programlisting>
                    <![CDATA[
---
Debugger:
  DebugThreshold: debug
  TestMode: 0
Description: Ticket Connector SOAP Sample
FrameworkVersion: 3.4.x git
Provider:
  Operation:
    SessionCreate:
      Description: Creates a Session
      MappingInbound: {}
      MappingOutbound: {}
      Type: Session::SessionCreate
    TicketCreate:
      Description: Creates a Ticket
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketCreate
    TicketUpdate:
      Description: Updates a Ticket
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketUpdate
    TicketGet:
      Description: Retrieves Ticket data
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketGet
    TicketSearch:
      Description: Search for Tickets
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketSearch
    TicketHistoryGet:
      Description: Retrieves history of a Ticket
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketHistoryGet
  Transport:
    Config:
      MaxLength: 100000000
      NameSpace: http://www.otrs.org/TicketConnector/
    Type: HTTP::SOAP
RemoteSystem: ''
Requester:
  Transport:
    Type: ''
                    ]]>
                </programlisting>
            </para>
            <para>
                类似的例子可以用REST网络传输做到，REST
WEB服务使用HTTP操作比如“POST”、“GET”、“PUT”、“PATCH”等等。这个操作连同一个叫做资源的URI路径一起定义一个OTRS通用接口操作或调用程序（取决于通讯方式）。
            </para>
            <para>
                下列的例子为‘创建会话’使用/Session资源，为搜索工单和创建工单使用
/Ticket资源，为获取工单和更新工单使用/Ticket/{TicketID}郑源（这里{TicketID}是一个工单的实际工单ID，例如/Ticket/123）。为了在OTRS中使用它，你需要复制它的内容到一个叫<filename>GenericTicketConnectorREST.yml</filename>的文件，并且在系统管理页面进入WEB服务窗口，然后在WEB服务概览窗口点击“添加WEB服务”按钮，然后在添加WEB服务窗口点击“导入WEB服务”按钮，将这个文件导入到OTRS中。
            </para>
            <para>
                <programlisting>
                    <![CDATA[
---
Debugger:
  DebugThreshold: debug
  TestMode: '0'
Description: Ticket Connector REST Sample
FrameworkVersion: 3.4.x git
Provider:
  Operation:
    SessionCreate:
      Description: Creates a Session
      MappingInbound: {}
      MappingOutbound: {}
      Type: Session::SessionCreate
    TicketCreate:
      Description: Creates a Ticket
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketCreate
    TicketGet:
      Description: Retrieves Ticket data
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketGet
    TicketSearch:
      Description: Search for Tickets
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketSearch
    TicketUpdate:
      Description: Updates a Ticket
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketUpdate
    TicketHistoryGet:
      Description: Retrieves history of a Ticket
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketHistoryGet
  Transport:
    Config:
      KeepAlive: ''
      MaxLength: '100000000'
      RouteOperationMapping:
        SessionCreate:
          RequestMethod:
          - POST
          Route: /Session
        TicketCreate:
          RequestMethod:
          - POST
          Route: /Ticket
        TicketGet:
          RequestMethod:
          - GET
          Route: /Ticket/:TicketID
        TicketSearch:
          RequestMethod:
          - GET
          Route: /Ticket
        TicketUpdate:
          RequestMethod:
          - PATCH
          Route: /Ticket/:TicketID
        TicketHistoryGet:
          RequestMethod:
          - GET
          Route: /TicketHistory/:TicketID
    Type: HTTP::REST
RemoteSystem: ''
Requester:
  Transport:
    Type: ''
                    ]]>
                </programlisting>
            </para>


        <!-- This part is removed because Mapping Simple does not work with Keys inside other hashes
            <note>

                <para>
                    It can be also possible to use the Mapping Simple module in order to specify
                    different values or attribute names and covert them to the required values and
                    attribute names. this settings can be done from the web interface or
                    specified in the YAML file, here it is an example:
                </para>
            </note>
            <example id='ticketcreate-operation-with-mapping'>
                <title>TicketCreate operation using Mapping Simple </title>
                <para>
                    In the following example the MappingInbound configuration has been changed
                    to convert the value "My State" to "open". Notice that this is only the
                    configuration for TicketCreate operation and not for the complete web service.
                </para>
                <programlisting>
                    <![CDATA[
    TicketCreate:
      Description: Creates a Ticket
      MappingInbound:
        Config:
          KeyMapDefault:
            MapTo: ''
            MapType: Keep
          KeyMapExact:
            State: State
          ValueMap:
            State:
              ValueMapExact:
                My State: open
          ValueMapDefault:
            MapTo: ''
            MapType: Keep
        Type: Simple
      MappingOutbound: {}
      Type: Ticket::TicketCreate
                    ]]>
                </programlisting>
            </example>
 -->
</section>
        <section>
            <title>Perl SOAP请求者</title>
            <para>
                下列代码是一个Perl脚本，可以通过通用接口连接到OTRS。为了执行工单连接器提供的操作，它使用了两个Perl的CPAN模块：SOAP::Lite和Data::Dumper。在你尝试运行这个脚本之前，请确保你的环境能够使用这些模块。
            </para>
            <para>
                <programlisting>
                    <![CDATA[
#!/usr/bin/perl -w
# --
# otrs.SOAPRequest.pl - sample to send a SOAP request to OTRS Generic Interface Ticket Connector
# Copyright (C) 2001-2018 OTRS AG, http://otrs.com/
# --
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU AFFERO General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# or see http://www.gnu.org/licenses/agpl.txt.
# --

use strict;
use warnings;

# use ../ as lib location
use File::Basename;
use FindBin qw($RealBin);
use lib dirname($RealBin);

use SOAP::Lite;
use Data::Dumper;

# ---
# Variables to be defined.

# this is the URL for the web service
# the format is
# <HTTP_TYPE>:://<OTRS_FQDN>/nph-genericinterface.pl/Webservice/<WEB_SERVICE_NAME>
# or
# <HTTP_TYPE>:://<OTRS_FQDN>/nph-genericinterface.pl/WebserviceID/<WEB_SERVICE_ID>
my $URL = 'http://localhost/otrs/nph-genericinterface.pl/Webservice/GenericTicketConnector';

# this name space should match the specified name space in the SOAP transport for the web service.
my $NameSpace = 'http://www.otrs.org/TicketConnector/';

# this is operation to execute, it could be TicketCreate, TicketUpdate, TicketGet, TicketSearch
# or SessionCreate. and they must to be defined in the web service.
my $Operation = 'TicketCreate';

# this variable is used to store all the parameters to be included on a request in XML format. Each
# operation has a determined set of mandatory and non mandatory parameters to work correctly. Please
# check the OTRS Admin Manual in order to get a complete list of parameters.
my $XMLData = '
<UserLogin>some user login</UserLogin>
<Password>some password</Password>
<Ticket>
    <Title>some title</Title>
    <CustomerUser>some customer user login</CustomerUser>
    <Queue>some queue</Queue>
    <State>some state</State>
    <Priority>some priority</Priority>
</Ticket>
<Article>
    <Subject>some subject</Subject>
    <Body>some body</Body>
    <ContentType>text/plain; charset=utf8</ContentType>
</Article>
';

# ---

# create a SOAP::Lite data structure from the provided XML data structure.
my $SOAPData = SOAP::Data
    ->type( 'xml' => $XMLData );

my $SOAPObject = SOAP::Lite
    ->uri($NameSpace)
    ->proxy($URL)
    ->$Operation($SOAPData);

# check for a fault in the soap code.
if ( $SOAPObject->fault ) {
    print $SOAPObject->faultcode, " ", $SOAPObject->faultstring, "\n";
}

# otherwise print the results.
else {

    # get the XML response part from the SOAP message.
    my $XMLResponse = $SOAPObject->context()->transport()->proxy()->http_response()->content();

    # deserialize response (convert it into a perl structure).
    my $Deserialized = eval {
        SOAP::Deserializer->deserialize($XMLResponse);
    };

    # remove all the headers and other not needed parts of the SOAP message.
    my $Body = $Deserialized->body();

    # just output relevant data and no the operation name key (like TicketCreateResponse).
    for my $ResponseKey ( keys %{$Body} ) {
        print Dumper( $Body->{$ResponseKey} );
    }
}
                    ]]>
                </programlisting>
            </para>
        </section>
        <section>
            <title>Perl REST请求者</title>
            <para>
                下列的代码是一个Perl脚本，可以通过通用接口连接到OTRS。为了执行工单连接器提供的操作，它使用了三个Perl的CPAN模块：JSON、REST::Client和Data::Dumper。在你尝试运行这个脚本之前，请确保你的环境能够使用这些模块。
            </para>
            <para>
                <programlisting>
                    <![CDATA[
#!/usr/bin/perl
# --
# Copyright (C) 2001-2018 OTRS AG, http://otrs.com/
# --
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU AFFERO General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
# or see http://www.gnu.org/licenses/agpl.txt.
# --

use strict;
use warnings;
use utf8;

## nofilter(TidyAll::Plugin::OTRS::Perl::Dumper)

# use ../ as lib location
use File::Basename;
use FindBin qw($RealBin);
use lib dirname($RealBin);

use JSON;
use REST::Client;

# This is the HOST for the web service the format is:
# <HTTP_TYPE>:://<OTRS_FQDN>/nph-genericinterface.pl
my $Host = 'http://localhost/otrs/nph-genericinterface.pl';

my $RestClient = REST::Client->new(
    {
        host => $Host,
    }
);

# These are the Controllers and Providers the format is:
# /Webservice/<WEB_SERVICE_NAME>/<RESOURCE>/<REQUEST_VALUE>
# or
# /WebserviceID/<WEB_SERVICE_ID>/<RESOURCE>/<REQUEST_VALUE>
#
# See the documentation on how to setup Providers.
#
# This example will retrieve the Ticket with the TicketID = 1 (<REQUEST_VALUE>)
my $GetControllerAndRequest = '/Webservice/GenericTicketConnectorREST/Ticket/1';

# This example is the base URL for Ticket Create
my $CreateControllerAndRequest = '/Webservice/GenericTicketConnectorREST/Ticket';

# This example will update the Ticket with the TicketID = 1 (<REQUEST_VALUE>)
my $UpdateControllerAndRequest = '/Webservice/GenericTicketConnectorREST/Ticket/1';

# This is the base URL for Ticket Search
my $SearchControllerAndRequest = '/Webservice/GenericTicketConnectorREST/Ticket';

# This is the base URL for Ticket history with the TicketID = 1 (<REQUEST_VALUE>)
my $HistoryControllerAndRequest = '/Webservice/GenericTicketConnectorREST/TicketHistory/1';

# TicketGet Example
# See the documentation of OTRSGenericInterfaceREST on how to setup
#   - webservice
#   - transport
#   - operations
my $GetParams = {
    UserLogin => "some agent user login",       # to be filled with valid agent login
    Password  => "some agent user password",    # to be filled with valid agent password
};

# Build GetParams as part of the URL for REST-GET requests
my $QueryParams = $RestClient->buildQuery( %{$GetParams} );
$GetControllerAndRequest .= $QueryParams;

$RestClient->GET($GetControllerAndRequest);

my $GetResponseCode = $RestClient->responseCode();

if ( $GetResponseCode ne '200' ) {
    print "Get request failed, response code was: $GetResponseCode\n";
}
else {

    # If the request was answered correctly, we receive a JSON string here.
    my $ResponseContent = $RestClient->responseContent();

    my $Data = decode_json $ResponseContent;

    # Just to print out the returned Data structure:
    use Data::Dumper;
    print "Get response was:\n";
    print Dumper($Data);

}

# TicketSearch Example
# See the documentation of OTRSGenericInterfaceREST on how to setup
#   - webservice
#   - transport
#   - operations
my $SearchParams = {
    UserLogin => "some agent user login",       # to be filled with valid agent login
    Password  => "some agent user password",    # to be filled with valid agent password
    Queues    => ['Raw'],
};

# Build SearchParams as part of the URL for REST-GET requests
$QueryParams = $RestClient->buildQuery( %{$SearchParams} );
$SearchControllerAndRequest .= $QueryParams;

$RestClient->GET($SearchControllerAndRequest);

# If the host isn't reachable, wrong configured or couldn't serve the requested page:
my $SearchResponseCode = $RestClient->responseCode();

if ( $SearchResponseCode ne '200' ) {
    print "Search request failed, response code was: $SearchResponseCode\n";
}
else {

    # If the request was answered correctly, we receive a JSON string here.
    my $ResponseContent = $RestClient->responseContent();

    my $Data = decode_json $ResponseContent;

    # Just to print out the returned Data structure:
    use Data::Dumper;
    print "Search Response was:\n";
    print Dumper($Data);

}

# TicketCreate Example
# See the documentation of OTRSGenericInterfaceREST on how to setup
# - webservice
# - transport
# - operations
my $CreateOrUpdateParams = {
    UserLogin => "some agent user login",       # to be filled with valid agent login
    Password  => "some agent user password",    # to be filled with valid agent password
    Ticket    => {
        Title        => 'some ticket title',
        Queue        => 'Raw',
        Lock         => 'unlock',
        Type         => 'Unclassified',
        State        => 'new',
        Priority     => '3 normal',
        Owner        => 'some agent user login',
        CustomerUser => 'customer-1',
    },
    Article => {
        Subject     => 'some subject',
        Body        => 'some body',
        ContentType => 'text/plain; charset=utf8',
    },
};

my $CreateJSONParams = encode_json $CreateOrUpdateParams;

my @CreateRequestParam = (
    $CreateControllerAndRequest,
    $CreateJSONParams
);

# We have to use REST-POST requests in order to send UserLogin and Password correctly
# though other REST methods would fit better.
$RestClient->POST(@CreateRequestParam);

# If the host isn't reachable, wrong configured or couldn't serve the requested page:
my $CreateResponseCode = $RestClient->responseCode();

if ( $CreateResponseCode ne '200' ) {
    print "Create request failed, response code was: $CreateResponseCode\n";
}
else {

    # If the request was answered correctly, we receive a JSON string here.
    my $ResponseContent = $RestClient->responseContent();

    my $Data = decode_json $ResponseContent;

    # Just to print out the returned Data structure:
    use Data::Dumper;
    print "Create Response was:\n";
    print Dumper($Data);

}

# TicketUpdate Example
# See the documentation of OTRSGenericInterfaceREST on how to setup
#   - webservice
#   - transport
#   - operations
my $UpdateJSONParams = encode_json $CreateOrUpdateParams;

my @UpdateRequestParam = (
    $UpdateControllerAndRequest,
    $UpdateJSONParams
);

# We have to use REST-PATCH requests in order to send UserLogin and Password correctly
# though other REST methods would fit better.
$RestClient->PATCH(@UpdateRequestParam);

# If the host isn't reachable, wrong configured or couldn't serve the requested page:
my $UpdateResponseCode = $RestClient->responseCode();
if ( $UpdateResponseCode ne '200' ) {
    print "Update request failed, response code was: $UpdateResponseCode\n";
}
else {

    # If the request was answered correctly, we receive a JSON string here.
    my $ResponseContent = $RestClient->responseContent();

    my $Data = decode_json $ResponseContent;

    # Just to print out the returned Data structure:
    use Data::Dumper;
    print "Update response was:\n";
    print Dumper($Data);

}

# TicketHistoryGet Example
# See the documentation of OTRSGenericInterfaceREST on how to setup
#   - webservice
#   - transport
#   - operations
my $HistoryParams = {
    UserLogin => "some agent user login",       # to be filled with valid agent login
    Password  => "some agent user password",    # to be filled with valid agent password
    TicketID  => [1],
};

# Build SearchParams as part of the URL for REST-GET requests
$QueryParams = $RestClient->buildQuery( %{$HistoryParams} );
$HistoryControllerAndRequest .= $QueryParams;

$RestClient->GET($HistoryControllerAndRequest);

# If the host isn't reachable, wrong configured or couldn't serve the requested page:
my $HistoryResponseCode = $RestClient->responseCode();

if ( $HistoryResponseCode ne '200' ) {
    print "History request failed, response code was: $HistoryResponseCode\n";
}
else {

    # If the request was answered correctly, we receive a JSON string here.
    my $ResponseContent = $RestClient->responseContent();

    my $Data = decode_json $ResponseContent;

    # Just to print out the returned Data structure:
    use Data::Dumper;
    print "History Response was:\n";
    print Dumper($Data);

}

                    ]]>
                </programlisting>
            </para>
        </section>
        <section>
            <title>REST请求的cURL例子</title>
            <para>
                用上面给出的通用工单连接器REST配置的例子，我们可以：
            </para>
            <para>
                <command>创建工单：</command>在/Ticket路径上使用POST方法。
            </para>
            <para>
                <command>搜索工单：</command>在/Ticket路径上使用GET方法。
            </para>
            <para>
                <command>更新工单：</command>在/Ticket/{TicketID}路径上使用PATCH方法，{TicketID}是代表传输配置中:TicketID的模板。
            </para>
            <para>
                <command>获取工单：</command>在/Ticket/{TicketID}路径上使用GET方法，{TicketID}是代表传输配置中:TicketID的模板。
            </para>
            <para>
                <command>获取工单历史：
</command>在/TicketHistory/{TicketID}路径上使用GET方法，{TicketID}是代表传输配置中:TicketID的模板。
            </para>

            <section>
                <title>创建一个新工单</title>
                <para>cURL命令：</para>
                <para>
                    <screen>
<![CDATA[
shell> curl "http://localhost/otrs/nph-genericinterface.pl/Webservice/GenericTicketConnectorREST/Ticket?UserLogin=agent&Password=123" -H "Content-Type: application/json" -d "{\"Ticket\":{\"Title\":\"REST Create Test\", \"Type\": \"Unclassified\", \"Queue\":\"Raw\",\"State\":\"open\",\"Priority\":\"3 normal\",\"CustomerUser\":\"customer\"},\"Article\":{\"Subject\":\"Rest Create Test\",\"Body\":\"This is only a test\",\"ContentType\":\"text/plain; charset=utf8\"}}"  -X POST
]]>
                    </screen>
                </para>
                <para>响应：</para>
                <para>
                    <screen>
{
  "ArticleID":5484,
  "TicketNumber":"1001936",
  "TicketID":"1686"
}
                    </screen>
                </para>
            </section>
            <section>
                <title>获取工单详细信息</title>
                <para>cURL命令：</para>
                <para>
                    <screen>
<![CDATA[
curl "http://localhost/otrs/nph-genericinterface.pl/Webservice/GenericTicketConnectorREST/Ticket/1686?UserLogin=agent&Password=123"
]]>
                    </screen>
                </para>
                <para>响应：</para>
                <para>
                    <screen>
{
  "Ticket": [
    {
      "Age": 777,
      "PriorityID": 3,
      "ServiceID": "",
      "Type": "Unclassified",
      "Responsible": "root@localhost",
      "StateID": 4,
      "ResponsibleID": 1,
      "ChangeBy": 2,
      "EscalationTime": 0,
      "Changed": "2014-06-30 19:08:14",
      "OwnerID": 2,
      "RealTillTimeNotUsed": 0,
      "GroupID": 1,
      "Owner": "agent",
      "CustomerID": "OTRS",
      "TypeID": 1,
      "Created": "2014-06-30 19:08:12",
      "Priority": "3 normal",
      "UntilTime": 0,
      "EscalationUpdateTime": 0,
      "QueueID": 2,
      "Queue": "Raw",
      "State": "open",
      "Title": "REST Create Test",
      "CreateBy": 2,
      "TicketID": 1686,
      "StateType": "open",
      "EscalationResponseTime": 0,
      "UnlockTimeout": 0,
      "EscalationSolutionTime": 0,
      "LockID": 1,
      "TicketNumber": "1001936",
      "ArchiveFlag": "n",
      "Lock": "unlock",
      "CreateTimeUnix": 1404173292,
      "SLAID": "",
      "CustomerUserID": "customer"
    }
  ]
}
                    </screen>
                </para>
            </section>
            <section>
                <title>更新工单</title>
                <para>cURL命令：</para>
                <para>
                    <screen>
<![CDATA[
curl "http://localhost/otrs/nph-genericinterface.pl/Webservice/GenericTicketConnectorREST/Ticket/1686?UserLogin=agent&Password=123" -H "Content-Type: application/json" -d "{\"Ticket\":{\"Queues\":\"Postmaster\"}}"  -X PATCH
]]>
                    </screen>
                </para>
                <para>响应：</para>
                <para>
                    <screen>
{
  "TicketNumber":"1001936",
  "TicketID":"1686"
}
                    </screen>
                </para>
            </section>
            <section>
                <title>搜索工单</title>
                <para>cURL命令：</para>
                <para>
                    <screen>
<![CDATA[
curl "http://localhost/otrs/nph-genericinterface.pl/Webservice/GenericTicketConnectorREST/Ticket?UserLogin=agent&Password=123&Queue=Postmaster"
]]>
                    </screen>
                </para>
                <para>响应：</para>
                <para>
                    <screen>
{
  "TicketID": [
    "1686",
    "102",
    "100",
    "1"
  ]
}
                    </screen>
                </para>
            </section>
            <section>
                <title>获取工单历史详情</title>
                <para>cURL命令：</para>
                <para>
                    <screen>
<![CDATA[
curl "http://localhost/otrs/nph-genericinterface.pl/Webservice/GenericTicketConnectorREST/TicketHistory/1686?UserLogin=agent&Password=123"
]]>
                    </screen>
                </para>
                <para>响应：</para>
                <para>
                    <screen>
{
  "TicketHistory":[
    {
      "History":[
        {
          "CreateBy":1,
          "HistoryType":"NewTicket",
          "TicketID":"1",
          "CreateTime":"2017-06-08 22:44:48",
          "TypeID":1,
          "OwnerID":1,
          "QueueID":1,
          "Name":"New Ticket [2015071510123456] created.",
          "StateID":1,
          "PriorityID":3,
          "ArticleID":"1",
          "HistoryTypeID":1
        }
      ],
      "TicketID":"1"
    }
  ]
}
                    </screen>
                </para>
            </section>
        </section>
    </section>
</section>
