<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="performance-tuning">
    <title>性能优化</title>

    <abstract>
        <para>
            下面是OTRS安装（包括配置）、编码、内存使用及其它方面的性能增强技术的清单。
        </para>
    </abstract>

    <section id="performance-tuning-otrs">
        <title>OTRS</title>
        <para>
            提升OTRS性能有如下一些方法。
        </para>

        <section id="performance-tuning-otrs-index">
            <title>TicketIndexModule 工单索引模块</title>
            <para>
                工单队列视图的索引有两个后端模块：
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::IndexAccelerator::RuntimeDB</literal></term>
                    <listitem>
                        <para>
                            This is the default option, and will generate each queue view on the fly
from the ticket table. You will not have performance trouble until you have
about 60,000 open tickets in your system.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::IndexAccelerator::StaticDB</literal></term>
                    <listitem>
                        <para>
                            The most powerful module, should be used when you have above 80,000 open
tickets. It uses an extra <literal>ticket_index</literal> table, which will
be populated with keywords based on ticket data. Use
<filename>bin/otrs.Console.pl Maint::Ticket::QueueIndexRebuild</filename>
for generating an initial index after switching backends.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>
                You can change the used IndexAccelerator module via SysConfig.
            </para>
        </section>

        <section id="performance-tuning-otrs-search">
            <title>SearchIndexModule</title>
            <para>
                This module helps to extend your articles full-text search (From, To, Cc,
Subject and Body search).  There are two backend modules for the search
index:
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::ArticleSearchIndex::RuntimeDB</literal></term>
                    <listitem>
                        <para>
                            This is the default option, and will will do full-text searches on live data
(it works fine for up to 50,000 tickets).
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::ArticleSearchIndex::StaticDB</literal></term>
                    <listitem>
                        <para>
                            This module will strip all articles and build an index after article
creation, increasing performance of full-text searches up to 50%.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>
                You can change the used SearchIndexModule via SysConfig.
            </para>
            <para>
                To create an initial index, use <filename>bin/otrs.Console.pl
Maint::Ticket::FulltextIndexRebuild</filename>.
            </para>
            <para>
                For StaticDB module, there are some options available for fine tuning:
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::Attribute</literal></term>
                    <listitem>
                        <para>
                            The attribute "WordCountMax" defines the maximum of words which will be
processed to build up the index. For example only the first 1000 words of an
article body are stored in the article search index. The attributes
"WordLengthMin" and "WordLengthMax" are used as word length boundaries. Only
words with a length between these two values are stored in the article
search index.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::Filters</literal></term>
                    <listitem>
                        <para>
                            There are three default filters defined:
                        </para>
                        <itemizedlist mark='opencircle'>
                            <listitem>
                                <para>
                                    The first filter strips out special chars like: <literal>, &amp; &lt; &gt; ?
" ! * | ; [ ] ( ) + $ ^=</literal>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    The second filter strips out words which begin or ends with one of following
chars: <literal>' : .</literal>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    The third filter strips out words which do not contain a word-character:
<literal>a-z, A-Z, 0-9, _</literal>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::StopWords</literal></term>
                    <listitem>
                        <para>
                            There are so-called stop-words defined for some languages. These stop-words
will be skipped while creating the search index.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="performance-tuning-otrs-storage">
            <title>TicketStorageModule 工单存储模块</title>
            <para>
                存储工单/信件有两个不同后端模块：
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::ArticleStorageDB</literal></term>
                    <listitem>
                        <para>
                            This default module will store attachments in the database.
                        </para>
                        <note>
                            <para>
                                Don't use it with large setups.
                            </para>
                        </note>
                        <para>
                            Pro: If your web server isn't running under 'otrs' user, use this module to
avoid file permission problems.
                        </para>
                        <para>
                            Con: It is not advisable to store attachments in your database. Take care
that your database is able to store large objects. I.e.: configure MySQL
with <literal>set-variable = max_allowed_packet=8M</literal> to store 8 MB
objects (the default is 2M).
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::ArticleStorageFS</literal></term>
                    <listitem>
                        <para>
                            Use this module to store attachments on the local file system.
                        </para>
                        <note>
                            <para>
                                Recommended for large setups.
                            </para>
                        </note>
                        <para>
                            赞成：它很快！
                        </para>
                        <para>
                            Con: Your web server should run under the 'otrs' user. Also, if you have
multiple front-end servers, you must make sure the filesystem is shared
between the servers. Place it on an NFS share or preferably a SAN or similar
solution.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <note>
                <para>
                    You can switch from one back-end to the other on the fly. You can switch the
backend in the SysConfig, and then run the command line utility
<filename>bin/otrs.Console.pl Admin::Article::StorageSwitch</filename> to
put the articles from the database onto the filesystem or the other way
around. You can use the <emphasis>--target</emphasis> option to specify the
target backend. Please note that the entire process can take considerable
time to run, depending on the number of articles you have and the available
CPU power and/or network capacity.
                </para>
            </note>
            <para>
                <screen><![CDATA[
shell> bin/otrs.Console.pl Admin::Article::StorageSwitch --target ArticleStorageFS
                ]]></screen>
            </para>
            <para>
                <emphasis>脚本: 切换存储后端，从数据库切换到文件系统。</emphasis>
            </para>
            <para>
                如果你想在数据库中保持旧的附件，可以激活系统配置选项<literal>Ticket::StorageModule::CheckAllBackends</literal>，以确保OTRS仍然能够找到它们。
            </para>
        </section>

        <section>
            <title>归档工单</title>

            <para>
                由于OTRS可以作为审计证明系统，删除关闭的工单可能不是个好主意。因此我们提供了将关闭工单归档的功能。
            </para>
            <para>
                匹配某个条件的工单可以标记为“已归档”。这些工单在使用常规的工单搜索或运行一个自动任务时无法访问。系统本身不再需要处理大量的工单，而只考虑‘最近’的工单就可以了。这在大型系统中能带来巨大的性能提升。
            </para>
            <para>
                启用工单归档功能只需要下列简单的几步：
            </para>
            <orderedlist>
                <listitem>
                    <para>
                        在系统配置中激活归档系统
                    </para>
                    <para>
                        In the Admin page, go to SysConfig and select the group
<literal>Ticket</literal>. In <literal>Core::Ticket</literal> you find the
option <literal>Ticket::ArchiveSystem</literal> which is set to "no" by
default. Change this setting to "yes" and save this change.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        定义一个自动任务
                    </para>
                    <para>
                        在<link linkend="adminarea">系统管理页面</link>，选择‘GenericAgent自动任务’并添加一个新任务。
                    </para>
                    <para>
                        <orderedlist>
                            <listitem>
                                <para>
                                    任务设置
                                </para>
                                <para>
                                    为归档任务提供一个名称，并选择合适的选项来计划这个任务。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    工单过滤
                                </para>
                                <para>
                                    工单过滤器就是搜索匹配选定条件的工单。要只归档前几个月关闭的工单，使用过滤器也许是一个好主意。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    工单操作
                                </para>
                                <para>
                                    在这部分设置标签为“归档选中的工单”字段为“archive tickets归档工单”。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    保存任务
                                </para>
                                <para>
                                    在页面的结尾可以找到保存任务的按钮。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    影响的工单
                                </para>
                                <para>
                                    系统在执行这个自动任务时会显示所有要归档的工单。
                                </para>
                            </listitem>
                        </orderedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        工单搜索
                    </para>
                    <para>
                        当你搜索工单时，系统默认搜索未归档的工单。如果你要同时搜索已归档的工单，仅需在定义搜索条件时添加‘归档搜索’即可。
                    </para>
                </listitem>
            </orderedlist>
        </section>
        <section id="performance-tuning-otrs-cache">
            <title>缓存</title>
            <para>
                OTRS caches a lot of temporary data in
<filename>/opt/otrs/var/tmp</filename>. Please make sure that this uses a
high performance file system/storage. If you have enough RAM, you can also
try to put this directory on a ramdisk like this:
            </para>
            <para>
                <screen><![CDATA[
shell> /opt/otrs/bin/otrs.Console.pl Maint::Session::DeleteAll
shell> /opt/otrs/bin/otrs.Console.pl Maint::Cache::Delete
shell> sudo mount -o size=16G -t tmpfs none /opt/otrs/var/tmp

# 可在文件/etc/fstab中添加永久挂载点
                ]]></screen>
            </para>
            <note>
                <para>
                    Please note that this will be a non-permanent storage that will be lost on
server reboot. All your sessions (if you store them in the filesystem) and
your cache data will be lost.
                </para>
            </note>
            <para>
                There is also a centralized memcached based cache backend available for
purchase from OTRS Group.
            </para>
        </section>

    </section>


    <section id="performance-tuning-database">
        <title>数据库</title>
        <para>
            你使用的数据库不同，数据库性能问题也不一样。学习你采用的数据库的相关文档，或与你的数据库管理员一起检查。
        </para>

        <section id="performance-tuning-database-mysql">
            <title>MySQL</title>
            <para>
                如果你使用默认的MySQL表类型MyISAM，并且删除了大型表的一部分或对有变长行的表（有VARCHAR、BLOB、TEXT列的表）做了大量修改，你必须用“optimize”命令对表的数据文件做碎片整理。
            </para>
            <para>
                如果mysqld进程占用了大量的CPU时间，你就应该尝试执行optimize，来优化ticket（工单）、ticket_history（工单历史）和article（信件）表（参阅下面的脚本）。
            </para>
            <para>
            <screen><![CDATA[
shell> mysql -u user -p database
mysql> optimize table ticket;
mysql> optimize table ticket_history;
mysql> optimize table article;
            ]]></screen>
            </para>
            <para>
                <emphasis>脚本：优化数据库表。</emphasis>
            </para>
        </section>

        <section id="performance-tuning-database-postgresql">
            <title>PostgreSQL</title>
            <para>
                PostgreSQL最好通过修改数据目录下的<filename>postgresql.conf</filename>文件来调优。关于如何调优的建议，请参考下列文章：
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <ulink url="http://www.revsys.com/writings/postgresql-performance.html">
<citetitle>http://www.revsys.com/writings/postgresql-performance.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <ulink url="http://varlena.com/GeneralBits/Tidbits/perf.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/perf.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <ulink url="http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                If performance is still not satisfactory, we suggest that you join the
PostgreSQL Performance mailing list ( <ulink
url="http://www.postgresql.org/community/lists/">
<citetitle>http://www.postgresql.org/community/lists/</citetitle> </ulink>
), and ask questions there. The folks on the PostgreSQL list are very
friendly and can probably help.
            </para>
        </section>

    </section>

    <section id="performance-tuning-webserver">
        <title>WEB服务器</title>
        <para>
            Of course you should use mod_perl 2.0 ( <ulink
url="http://perl.apache.org/">
<citetitle>http://perl.apache.org/</citetitle> </ulink> ). It's much faster
(~ *100) than pure CGI, but it needs more RAM.
        </para>

        <section id="performance-tuning-webserver-db">
            <title>预建立的数据库连接</title>
            <para>
                You can have the database connections pre-established on startup of the web
server. This saves time (see <filename>README.webserver</filename>).
            </para>
        </section>

        <section id="performance-tuning-webserver-startup">
            <title>预装载的模块 - startup.pl</title>
            <para>
                Use the startup script <filename>scripts/apache2-perl-startup.pl</filename>
for preloaded/precompiled Perl modules on your mod_perl webserver to be
faster, with a smaller memory footprint (see
<filename>README.webserver</filename>).
            </para>
        </section>
        <section id="performance-tuning-webserver-reload">
            <title>当磁盘文件更新时重载Perl模块</title>
            <para>
                By default Apache::Reload is used in
<filename>scripts/apache2-httpd.include.conf</filename>. Disable it and you
will get 8% more speed. But remember to restart the web server if you
install any modules via the OTRS Package Manager, or any values in your
SysConfig or in <filename>Kernel/Config.pm</filename>.
            </para>
            <important>
                <para>
                    This would also mean you can't use the OTRS Package Manager via the web
interface, you will need to use the console commands:
<filename>bin/otrs.Console.pl Admin::Package::*</filename>.
                </para>
            </important>
        </section>

        <section id="performance-tuning-webserver-strategy">
            <title>选择正确的策略</title>
            <para>
                If you have a larger installation, e.g. over 1,000 new tickets per day and
over 40 agents, it is a good idea to read the chapters on Performance of the
mod_perl User's Guide ( <ulink
url="http://perl.apache.org/docs/2.0/user/index.html">
<citetitle>http://perl.apache.org/docs/2.0/user/index.html</citetitle>
</ulink> ).
            </para>
        </section>

        <section id="performance-tuning-webserver-gzip">
            <title>mod_gzip/mod_deflate</title>
            <para>
                If your bandwidth is small, use <literal>mod_deflate</literal> for
Apache2. If you have an html page with 45k,
<literal>mod_gzip</literal>/<literal>mod_deflate</literal> compresses it to
about 7k. The drawback is that this increases the load on the server side.
            </para>
        </section>

    </section>

</chapter>
