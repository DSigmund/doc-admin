<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="performance-tuning">
    <title>性能优化</title>

    <abstract>
        <para>
            下面是OTRS安装（包括配置）、编码、内存使用及其它方面的性能增强技术的清单。
        </para>
    </abstract>

    <section id="performance-tuning-otrs">
        <title>OTRS</title>
        <para>
            提升OTRS性能有如下一些方法。
        </para>

        <section id="performance-tuning-otrs-index">
            <title>TicketIndexModule 工单索引模块</title>
            <para>
                工单队列视图的索引有两个后端模块：
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::IndexAccelerator::RuntimeDB</literal></term>
                    <listitem>
                        <para>
                            这是默认选项，并将从工单表中即时生成每个队列视图。 在有6万个处理工单之前，系统都不会遇到性能问题。
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::IndexAccelerator::StaticDB</literal></term>
                    <listitem>
                        <para>
                            当您有超过80,000个处理中的工单时，应该使用最强大的模块。
它使用一个额外的<literal>ticket_index</literal>表，用基于工单数据的关键字填充。
在切换后端模块后使用<filename>bin/otrs.Console.pl
Maint::Ticket::QueueIndexRebuild</filename>生成初始索引。
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>
                你可以通过系统配置来修改使用的IndexAccelerator模块。
            </para>
        </section>

        <section id="performance-tuning-otrs-search">
            <title>Ticket Search Index</title>
            <para>
                OTRS uses a special search index to perform full-text searches across fields
in articles from different communication channels.
            </para>
            <para>
                To create an initial index, use <filename>bin/otrs.Console.pl
Maint::Ticket::FulltextIndex --rebuild</filename>.
            </para>
            <note>
                <para>
                    Actual article indexing happens via an OTRS daemon job in the
background. While articles which were just added in the system are marked
for indexing immediately, it could happen their index is available within a
few minutes.
                </para>
            </note>
            <para>
                There are some options available for fine tuning the search index:
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::IndexArchivedTickets</literal></term>
                    <listitem>
                        <para>
                            Defines if archived tickets will be included in the search index (off by
default). This is advisable to keep the index small on large systems with
archived tickets. If this is turned off, archived tickets will not be found
by full-text searches.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::Attribute</literal></term>
                    <listitem>
                        <para>
                            The attribute <literal>WordCountMax</literal> defines the maximum number of
words which will be processed to build up the index. For example only the
first 1000 words of an article body are stored in the article search
index. The attributes <literal>WordLengthMin</literal> and
<literal>WordLengthMax</literal> are used as word length boundaries. Only
words with a length between these two values are stored in the article
search index.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::Filters</literal></term>
                    <listitem>
                        <para>
                            定义了三个默认过滤器：
                        </para>
                        <itemizedlist mark='opencircle'>
                            <listitem>
                                <para>
                                    第一个过滤器剥离特殊的字符，如：<literal>, &amp; &lt; &gt; ? " ! * | ; [ ] ( ) + $
^=</literal>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    第二个过滤器剥离使用以下字符之一开始或结束的字词：<literal>' : .</literal>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    第三个过滤器剥离不包含字符的单词：<literal>a-z, A-Z, 0-9, _</literal>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::StopWords</literal></term>
                    <listitem>
                        <para>
                            有一些语言定义了所谓的停止词。 创建搜索索引时将跳过这些停止词。
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="performance-tuning-otrs-storage">
            <title>Article Storage (Email, Phone and Internal Articles)</title>
            <para>
                There are two different backend modules for the article storage of phone,
email and internal articles (configured via
<literal>Ticket::Article::Backend::MIMEBase::ArticleStorage</literal>):
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::Article::Backend::MIMEBase::ArticleStorageDB</literal></term>
                    <listitem>
                        <para>
                            这个默认模块将附件存储在数据库中。
                        </para>
                        <note>
                            <para>
                                在大型安装环境中不要使用它。
                            </para>
                        </note>
                        <para>
                            Pro: works with multiple front end servers.
                        </para>
                        <para>
                            Con: requires much storage space in the database.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::Article::Backend::MIMEBase::ArticleStorageFS</literal></term>
                    <listitem>
                        <para>
                            使用此模块将附件存储在本地文件系统上。
                        </para>
                        <note>
                            <para>
                                在大型安装环境中推荐使用。
                            </para>
                        </note>
                        <para>
                            优点：它很快！
                        </para>
                        <para>
                            Con: If you have multiple front end servers, you must make sure the
filesystem is shared between the servers. Place it on an NFS share or
preferably a SAN or similar solution.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <note>
                <para>
                    你可以动态切换存储后端，切换后运行命令行工具<filename>bin/otrs.Console.pl
Admin::Article::StorageSwitch</filename>来将文档从数据库放到文件系统中，或者从文件系统放到数据库中。你可以使用<emphasis>--target</emphasis>
选项来指定目标后端。请注意：整个过程可能会花费相当长的时间，取决于你拥有文档的数量以及可用的CPU能力和/或网络带宽。
                </para>
            </note>
            <para>
                <screen><![CDATA[
shell> bin/otrs.Console.pl Admin::Article::StorageSwitch --target ArticleStorageFS
                ]]></screen>
            </para>
            <para>
                <emphasis>脚本: 切换存储后端，从数据库切换到文件系统。</emphasis>
            </para>
            <para>
                If you want to keep old attachments in the database, you can activate the
SysConfig option
<literal>Ticket::Article::Backend::MIMEBase::CheckAllStorageBackends</literal>
to make sure OTRS will still find them.
            </para>
        </section>

        <section>
            <title>归档工单</title>

            <para>
                由于OTRS可以用作审核系统，删除关闭的工单可能不是一个好主意。 因此，我们实现了一个可以让您归档工单的功能。
            </para>
            <para>
                匹配某个条件的工单可以标记为“已归档”。这些工单在使用常规的工单搜索或运行一个自动任务时无法访问。系统本身不再需要处理大量的工单，而只考虑‘最近’的工单就可以了。这在大型系统中能带来巨大的性能提升。
            </para>
            <para>
                要使用归档功能，只需按照以下步骤操作：
            </para>
            <orderedlist>
                <listitem>
                    <para>
                        在系统配置中激活归档系统
                    </para>
                    <para>
                        在系统管理页面中，进入系统管理后选择<literal>Ticket（工单）</literal>组，在<literal>Core::Ticket</literal>中找到选项<literal>Ticket::ArchiveSystem</literal>，默认设置为“否”。修改这个选项为“是”并保存。
                    </para>
                </listitem>
                <listitem>
                    <para>
                        定义一个自动任务
                    </para>
                    <para>
                        在<link linkend="adminarea">系统管理页面</link>，选择‘GenericAgent自动任务’并添加一个新任务。
                    </para>
                    <para>
                        <orderedlist>
                            <listitem>
                                <para>
                                    任务设置
                                </para>
                                <para>
                                    为归档任务提供一个名称，并选择合适的选项来计划这个任务。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    工单过滤
                                </para>
                                <para>
                                    工单过滤器就是搜索匹配选定条件的工单。要只归档前几个月关闭的工单，使用过滤器也许是一个好主意。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    工单操作
                                </para>
                                <para>
                                    在这部分设置标签为“归档选中的工单”字段为“archive tickets归档工单”。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    保存任务
                                </para>
                                <para>
                                    在页面的结尾可以找到保存任务的按钮。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    影响的工单
                                </para>
                                <para>
                                    系统在执行这个自动任务时会显示所有要归档的工单。
                                </para>
                            </listitem>
                        </orderedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        工单搜索
                    </para>
                    <para>
                        当你搜索工单时，系统默认搜索未归档的工单。如果你要同时搜索已归档的工单，仅需在定义搜索条件时添加‘归档搜索’即可。
                    </para>
                </listitem>
            </orderedlist>
        </section>
        <section id="performance-tuning-otrs-cache">
            <title>缓存</title>
            <para>
                OTRS在目录<filename>/opt/otrs/var/tmp</filename>下缓存了大量的临时数据。请确保它使用了高性能的文件系统或存储。如果你有足够的内存，还可以尝试把这个目录放入内存盘，如下面这样：
            </para>
            <para>
                <screen><![CDATA[
shell> /opt/otrs/bin/otrs.Console.pl Maint::Session::DeleteAll
shell> /opt/otrs/bin/otrs.Console.pl Maint::Cache::Delete
shell> sudo mount -o size=16G -t tmpfs none /opt/otrs/var/tmp

# 可在文件/etc/fstab中添加永久挂载点
                ]]></screen>
            </para>
            <note>
                <para>
                    请注意：这个非永久存储会在服务器重启后丢失，所有的会话（如果你将它们存储在文件系统）和缓存数据都将丢失。
                </para>
            </note>
            <para>
                还有一种基于集中内存缓存的缓存后端可从OTRS集团购买。
            </para>
        </section>

    </section>


    <section id="performance-tuning-database">
        <title>数据库</title>
        <para>
            你使用的数据库不同，数据库性能问题也不一样。学习你采用的数据库的相关文档，或与你的数据库管理员一起检查。
        </para>

        <section id="performance-tuning-database-mysql">
            <title>MySQL</title>
            <para>
                如果你使用默认的MySQL表类型MyISAM，并且删除了大型表的一部分或对有变长行的表（有VARCHAR、BLOB、TEXT列的表）做了大量修改，你必须用“optimize”命令对表的数据文件做碎片整理。
            </para>
            <para>
                如果mysqld进程占用了大量的CPU时间，你就应该尝试执行optimize，来优化ticket（工单）、ticket_history（工单历史）和article（信件）表（参阅下面的脚本）。
            </para>
            <para>
            <screen><![CDATA[
shell> mysql -u user -p database
mysql> optimize table ticket;
mysql> optimize table ticket_history;
mysql> optimize table article;
            ]]></screen>
            </para>
            <para>
                <emphasis>脚本：优化数据库表。</emphasis>
            </para>
        </section>

        <section id="performance-tuning-database-postgresql">
            <title>PostgreSQL</title>
            <para>
                PostgreSQL最好通过修改数据目录下的<filename>postgresql.conf</filename>文件来调优。关于如何调优的建议，请参考下列文章：
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <ulink url="http://www.revsys.com/writings/postgresql-performance.html">
<citetitle>http://www.revsys.com/writings/postgresql-performance.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <ulink url="http://varlena.com/GeneralBits/Tidbits/perf.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/perf.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <ulink url="http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                如果仍然对PostgreSQL性能不满意，我们建议你加入PostgreSQL性能邮件列表：<ulink
url="http://www.postgresql.org/community/lists/"><citetitle>http://www.postgresql.org/community/lists/</citetitle></ulink>，并在那里提问。PostgreSQL邮件列表上的伙计们都非常友善，应能提供适合的帮助。
            </para>
        </section>

    </section>

    <section id="performance-tuning-webserver">
        <title>WEB服务器</title>
        <para>
            毫无疑问你应该使用 mod_perl 2.0 ( <ulink
url="http://perl.apache.org/"><citetitle>http://perl.apache.org/</citetitle></ulink>
)。它比纯CGI快了约100倍，但它需要更多的内存。
        </para>

        <section id="performance-tuning-webserver-db">
            <title>预建立的数据库连接</title>
            <para>
                你可以在WEB服务器启动时就预先建立数据库连接。这可以节约时间（参阅WEB服务器的<filename>README</filename>文档）。
            </para>
        </section>

        <section id="performance-tuning-webserver-startup">
            <title>预装载的模块 - startup.pl</title>
            <para>
                在你的mod_perl
WEB服务器上为预装载的/预编译的Perl模块使用启动脚本<filename>scripts/apache2-perl-startup.pl</filename>，仅需少量内存即可让WEB服务器更快（参阅WEB服务器的<filename>README</filename>文档）。
            </para>
        </section>
        <section id="performance-tuning-webserver-reload">
            <title>当磁盘文件更新时重载Perl模块</title>
            <para>
                默认情况下在<filename>scripts/apache2-httpd.include.conf</filename>中使用Apache ::
Reload。禁用它，你将获得8％的速度提升。
但是，如果您通过OTRS软件包管理器安装任何模块，或在系统配置或<filename>Kernel/Config.pm</filename>中修改了任何值，请记得重启Web服务器。
            </para>
            <important>
                <para>
                    这也意味着你不能通过Web界面使用OTRS软件包管理器，而需要使用控制台命令：<filename>bin/otrs.Console.pl
Admin::Package::*</filename>。
                </para>
            </important>
        </section>

        <section id="performance-tuning-webserver-strategy">
            <title>选择正确的策略</title>
            <para>
                如果你是一个大型安装环境，比如每天超过1000个新工单且超过40个服务人员，建议阅读mod_perl用户手册的性能章节（<ulink
url="http://perl.apache.org/docs/2.0/user/index.html"><citetitle>http://perl.apache.org/docs/2.0/user/index.html</citetitle></ulink>）。
            </para>
        </section>

        <section id="performance-tuning-webserver-gzip">
            <title>mod_gzip/mod_deflate</title>
            <para>
                如果你的带宽较小，可在Apache2中使用<literal>mod_deflate</literal>模块。<literal>mod_gzip</literal>/<literal>mod_deflate</literal>能够一个45K的HTML页面压缩到约7K。缺点是这会增加WEB服务器端的负载。
            </para>
        </section>

    </section>

</chapter>
