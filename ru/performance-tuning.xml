<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">


<!-- $Id: performance-tuning.xml,v 1.7 2011-02-16 08:56:01 mg Exp $ -->
<chapter id="performance-tuning">
<title>Performance Tuning</title>

<abstract>
<para>
An exhaustive list of various techniques you might want to use to get the
most performance possible out of your OTRS system: configuration, coding,
memory use and more.
</para>
</abstract>

<section id="performance-tuning-otrs">
<title>OTRS</title>
<para>
There are several options to improve the performance of OTRS.
</para>

<section id="performance-tuning-otrs-index">
<title>TicketIndexModule</title>
<para>
There are two backend modules for the ticket index:
</para>

<para>
<itemizedlist mark='opencircle'>

<listitem>
<para>
Kernel::System::Ticket::IndexAccelerator::RuntimeDB (default), generate each
queue view on the fly from the ticket table. You will not have performance
trouble until you have about 60,000 tickets (with 6,000 open tickets) in
your system.
</para>
</listitem>

<listitem>
<para>
Kernel::System::Ticket::IndexAccelerator::StaticDB, the most powerful
module, it should be used when you have above 80,000 tickets (more than
6,000 open tickets) - it use an extra ticket_index table, which works like a
view. Use <filename>bin/otrs.RebuildTicketIndex.pl</filename> for generating
an initial index build after switching backends.
</para>
</listitem>

</itemizedlist>
</para>

<para>
You can change the IndexAccelerator via SysConfig.
</para>

</section>


<section id="performance-tuning-otrs-storage">
<title>TicketStorageModule</title>
<para>
There are two different backend modules for the ticket/article storage:
</para>

<para>
<itemizedlist mark='opencircle'>

<listitem>
<para>
Kernel::System::Ticket::ArticleStorageDB (default), store attachments, etc.
in the database. Note: Don't use it for large set ups.
</para>
<para>
Pro: If your webserver user isn't the otrs user, use this module to avoid
file permission problems.
</para>
<para>
Contra: It's not really advisable to store attachments in your
database. Take care that your database is able to store large
objects. E.g. MySQL (config)  "set-variable = max_allowed_packet=8M" to
store 8 MB objects (default is 2M).
</para>
</listitem>

<listitem>
<para>
Kernel::System::Ticket::ArticleStorageFS, store attachments etc. on the
local file system. Note: Recommended for large setups.
</para>
<para>
Pro: Fast!
</para>
<para>
Contra: Your web server user should be the otrs user (file system
permissions!).  Also, if you have multiple front end servers, you should
make sure the file system is shared between the servers. So place it on an
NFS share or preferably a SAN or similar solution.
</para>
</listitem>

</itemizedlist>

</para>

<para>
Note: you can switch from one to the other back-end on the fly. You can
switch the backend in the SysConfig, and then you can run the command line
utility <filename>otrs.ArticleStorageSwitch.pl</filename> to put the
articles from the database onto the filesystem or the other way around. You
can use the <emphasis>-s</emphasis> and <emphasis>-d</emphasis> option to
specify the source and destination back-ends. Please note that the whole
process can take a lot of time, depending on the amount of articles you have
and the available CPU power and/or network capacity.
</para>

<para>
<programlisting>
shell> bin/otrs.ArticleStorageSwitch.pl -s ArticleStorageDB -d ArticleStorageFS
</programlisting>
</para>
<para>
    <emphasis>Script 21.1 Switching storage back-ends from database to
filesystem.</emphasis>
</para>
</section>

<section>
    <title>Archiving Tickets</title>

    <para>
        As OTRS can be used as an audit proof system, deleting closed tickets may
not be a good idea.  Therefore we implemented a feature that allows you to
archive tickets.
    </para>
    <para>
        This means that tickets that match certain criteria are marked as
"archived", and these tickets are not touched if you do a regular ticket
search or run a Generic Agent job.  The system itself has not to deal with a
huge amount of tickets any longer as only the "latest" tickets are taken
into consideration when using OTRS. This can mean a huge performance gain on
large systems.
    </para>
    <para>
        To use the archive feature simply follow these steps:
    </para>
    <orderedlist>
        <listitem>
            <para>
                Activate the archive system in SysConfig
            </para>
            <para>
                In the Admin panel of OTRS go to SysConfig and select the group
<literal>Ticket</literal>.  In <literal>Core::Ticket</literal> you find the
option <literal>Ticket::ArchiveSystem</literal> which is set to "no" per
default. Change this setting to "yes" and save this change.
            </para>
        </listitem>
        <listitem>
            <para>
                Define a GenericAgent job
            </para>
            <para>
                In the Admin panel select GenericAgent and add a new job there.
<orderedlist>
                    <listitem>
                        <para>
                            Job Settings
                        </para>
                        <para>
                            Provide a name for the archiving job and select proper options to schedule
this job.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Ticket Filter
                        </para>
                        <para>
                            The ticket filter is basically a ticket search that is looking for tickets
that match the selected criteria.  It might be a good idea to only archive
tickets in a close state that have been closed a few months before.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Ticket Action
                        </para>
                        <para>
                            In the section Ticket Action you will find an action called "Archive
selected tickets".  Set this to "archive tickets".
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Save the job
                        </para>
                        <para>
                            At the end of the page you will find an option to save the job.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Affected tickets
                        </para>
                        <para>
                            The system will display all tickets which will be archived when executing
the Generic Agent job
                        </para>
                    </listitem>
                </orderedlist>
            </para>
        </listitem>
        <listitem>
            <para>
                Ticket Search
            </para>
            <para>
                When you search for tickets, the system default is only searching tickets
which are not archived.  If you want to search through archived tickets
also, simply add "archive search" while defining search criteria.
            </para>
        </listitem>
    </orderedlist>
</section>

</section>


<section id="performance-tuning-database">
<title>Database</title>
<para>
This depends on the database you are using. If you're having trouble, read
the documentation for your database or ask your database administrator.
</para>

<section id="performance-tuning-database-mysql">
<title>MySQL</title>
<para>
If you use MySQL table type MyISAM (which is the default), and have deleted
a large part of a table or if you have made many changes to a table with
variable-length rows (tables that have VARCHAR, BLOB or TEXT columns), you
need to defragment the datafile (tables) with the "optimize" command.
</para>
<para>
You should try this if mysqld needs a lot of your CPU time. Optimize tables
ticket, ticket_history and article (see Script 21.2 below).
</para>

<para>
<programlisting>
shell$ mysql -u user -p database
mysql$ optimize table ticket;
mysql$ optimize table ticket_history;
mysql$ optimize table article;
</programlisting>
</para>

<para>
    <emphasis>Script 21.2. Optimizing data base tables.</emphasis>
</para>

</section>

<section id="performance-tuning-database-postgresql">
<title>PostgreSQL</title>
<para>
PostgreSQL is best tuned by modifying the postgresql.conf file in your
PostgreSQL data directory. For advice on how to do this, see these articles:
</para>

<para>
    <itemizedlist>
        <listitem>
            <para>
            <ulink url="http://www.revsys.com/writings/postgresql-performance.html">
<citetitle>http://www.revsys.com/writings/postgresql-performance.html</citetitle>
</ulink>
            </para>
        </listitem>
        <listitem>
            <para>
            <ulink url="http://varlena.com/GeneralBits/Tidbits/perf.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/perf.html</citetitle>
</ulink>
            </para>
        </listitem>
        <listitem>
            <para>
            <ulink url="http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html</citetitle>
</ulink>
            </para>
        </listitem>
    </itemizedlist>
</para>

<para>
If performance is still not satisfactory, we suggest that you join the
PostgreSQL Performance mailing list ( <ulink
url="http://www.postgresql.org/community/lists/">
http://www.postgresql.org/community/lists/ </ulink> ) and ask questions
there. The folks on the PostgreSQL list are very friendly and can probably
help.
</para>
</section>

</section>


<section id="performance-tuning-webserver">
<title>Веб-сервер</title>
<para>
Of course you should use mod_perl 2.0 ( <ulink
url="http://perl.apache.org/">
<citetitle>http://perl.apache.org/</citetitle> </ulink>).  It's much faster
(~ * 100) than pure cgi. But it needs more RAM.
</para>

<section id="performance-tuning-webserver-db">
<title>Pre-establish database connections</title>
<para>
You can have the database connections pre-established on startup of the web
server.  This saves time (see README.webserver).
</para>
</section>

<section id="performance-tuning-webserver-startup">
<title>Preloaded modules - startup.pl</title>
<para>
Use the startup script <filename>scripts/apache2-perl-startup.pl</filename>
for preloaded/precompiled Perl modules on your mod_perl webserver to be
faster and smaller (see README.webserver).
</para>
</section>
<section id="performance-tuning-webserver-reload">
<title>Reload Perl modules when updated on disk</title>
<para>
By default Apachee::Reload is used in
scripts/apache2-httpd.include.conf. Disable it and you will get 8% more
speed. But remember to restart the web server if you install any modules via
the OTRS Package Manager, any values in your SysConfig or in
Kernel/Config.pm.  Important: this would also mean you can't use the OTRS
Package Manager via the web interface, you need to use the command line
variant - <filename>bin/otrs.PackageManager.pl</filename>.
</para>
</section>

<section id="performance-tuning-webserver-strategy">
<title>Choosing the Right Strategy</title>
<para>
If you have a really large installation (over 1,000 new tickets per day and
over 40 agents) it is a good idea to read "Choosing the Right Strategy"
(<ulink url="http://perl.apache.org/docs/1.0/guide/strategy.html">
<citetitle>http://perl.apache.org/docs/1.0/guide/strategy.html</citetitle>
</ulink>).
</para>
</section>

<section id="performance-tuning-webserver-gzip">
<title>mod_gzip/mod_deflate</title>
<para>
If your bandwidth is a little bit small, use mod_deflate for Apache2.  If
you have an html page with 45k, mod_gzip/mod_deflate compresses it. The page
will be about 7k. The drawback is that this increases load on the server
side.
</para>
</section>

</section>

</chapter>
