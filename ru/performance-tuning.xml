<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">


<!-- $Id: performance-tuning.xml,v 1.10 2011-04-04 08:03:20 mg Exp $ -->
<chapter id="performance-tuning">
<title>Настройка Производительности</title>

<abstract>
<para>
Исчерпывающий перечень различных методов, которые вы можете использовать,
чтобы получить максимально возможную производительность вашей системы OTRS:
конфигурации, код, использование памяти и многое другое.
</para>
</abstract>

<section id="performance-tuning-otrs">
<title>OTRS</title>
<para>
Есть несколько вариантов для улучшения производительности OTRS.
</para>

<section id="performance-tuning-otrs-index">
<title>TicketIndexModule</title>
<para>
Есть два типа хранилища информации для хранения индексов заявок:
</para>

<para>
<itemizedlist mark='opencircle'>

<listitem>
<para>
Kernel::System::Ticket::IndexAccelerator::RuntimeDB (по умолчанию),
генерирует шаблон просмотра для каждой очереди "на лету" из таблицы
заявок. Вы не будете иметь проблем производительности, пока у вас есть
только 60.000 (с 6000 открытых заявок) в вашей системы.
</para>
</listitem>

<listitem>
<para>
Kernel::System::Ticket::IndexAccelerator::StaticDB, самый мощный модуль, его
следует использовать, когда у вас еть больше 80.000 заявок (более 6000
открытых заявок) - для этого используется дополнительная таблица
ticket_index, которая работает как обычный шаблон. Используйте
<filename>bin/otrs.RebuildTicketIndex.pl</filename> для получения начального
индекса после создания хранилища информации.
</para>
</listitem>

</itemizedlist>
</para>

<para>
Вы можете изменить IndexAccelerator через SysConfig.
</para>

</section>


<section id="performance-tuning-otrs-storage">
<title>TicketStorageModule</title>
<para>
Существует два различных хранилица для хранения заявок/статей:
</para>

<para>
<itemizedlist mark='opencircle'>

<listitem>
<para>
Kernel::System::Ticket::ArticleStorageDB (по умолчанию), сохраняет вложения,
и т.д. в базе данных. Примечание: Не используйте его для больших наборов
данных.
</para>
<para>
Pro: Если пользователь вашего веб-сервера не OTRS-пользователь, используйте
этот модуль, чтобы избежать проблем с правами доступа к файлу.
</para>
<para>
Противопоказания: Это не совсем целесообразно хранить вложения в базе
данных. Будьте осторожны, при храненении больших объектов. Например MySQL
(параметр конфигурации) "set-variable=max_allowed_packet=8M"  для хранения
объектов размером 8 MB (по умолчанию это 2M).
</para>
</listitem>

<listitem>
<para>
Kernel::System::Ticket::ArticleStorageFS, хранит вложения ит.д. в локальной
файловой системе. Примечание: Рекомендуется для больших установок.
</para>
<para>
Pro: Fast!
</para>
<para>
Противопоказания: Ваш пользователь веб-сервера должен быть
OTRS-пользователем (права доступа к файловой системе!). Кроме того, если у
вас есть несколько интерфейсов и серверов, вы должны убедиться, что файловая
система разделяется между серверами. Так что разместите  его на расшаренный
NFS-ресурс или, предпочтительно, SAN или же аналогичные решения.
</para>
</listitem>

</itemizedlist>

</para>

<para>
Примечание: вы можете переключаться с одного фронт-енда на другой "на лету"
Вы можете переключать бэк-энд в SysConfig и замем вы можете запустить
утилиту в командной строке
<filename>otrs.ArticleStorageSwitch.pl</filename>, чтобы внести статьи из
базы данных в файловую систему и наоборот. Вы можете использовать опциии
<emphasis>-s</emphasis> и <emphasis>-d</emphasis> для указания источника и
конечный бэк-эенд. Обратите внимание, что весь процесс может занять много
времени, в зависимости от количества статей, которые у вас есть и доступной
мощности процессора и/или пропускной способности сети.
</para>

<para>
<programlisting>
shell> bin/otrs.ArticleStorageSwitch.pl -s ArticleStorageDB -d ArticleStorageFS
</programlisting>
</para>
<para>
    <emphasis>Сценарий 21.1 Перемещение хранилища данных с базы данных на
файловую систему.</emphasis>
</para>
</section>

<section>
    <title>Архивирование Заявок</title>

    <para>
        Как OTRS может быть использован в качестве доказательства системы аудита,
удаление закрытых заявок не может быть хорошей идеей. Поэтому мы реализовали
функцию, которая позволяет архивировать заявки.
    </para>
    <para>
        Это означает, что заявки, которые соответствуют определенным критериям,
которые помечены как "архивированные", и к этим заявкам не притрагивались,
если вы производите обычный поиск заявок или запускаете задание для Generic
Agent. Система сама собой не имеет дела с огромным количеством заявок, как
только "последняя" заявка не принимается во внимание при использовании
OTRS. Это может означать огромный прирост производительности на больших
системах.
    </para>
    <para>
        Для использования функции архивации выполните следующие действия:
    </para>
    <orderedlist>
        <listitem>
            <para>
                Включение архивирование системы в SysConfig
            </para>
            <para>
                В панели управления администратора OTRS перейдите в SysConfig и выберите
группу <literal>Заявка</literal>. В <literal>Core::Ticket</literal> вы
можете найти опцию <literal>Ticket::ArchiveSystem</literal> которая
установлена в "нет" по умолчанию. Измените эту настройку в "да" и сохраните
изменения.
            </para>
        </listitem>
        <listitem>
            <para>
                Определение работы GenericAgent
            </para>
            <para>
                В панели администратора выберите GenericAgent и добавьте новое задание
(работу). <orderedlist>
                    <listitem>
                        <para>
                            Настройки Задания
                        </para>
                        <para>
                            Введите имя для задания на архивирование и выберите правильный вариант
графика этой работы.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Ticket Filter
                        </para>
                        <para>
                            Фильтр заявок в основном, поиск заявок, который ищет заявки, которые
соответствуют заданым критериям. Это может быть хорошей идеей, чтобы только
архивировать заявки, которые закрыты или были закрыты несколько месяцев
назад.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Действия над заявками
                        </para>
                        <para>
                            В разделе Действия для Заявок вы можете найти действие, которое называется
"Архивировать выбранные заявки". Установите его значение в "архивировать
заявки".
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Сохранить работу
                        </para>
                        <para>
                            В конце страницы у вас будет возможность сохранить работу (задание).
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Обработанные заявки
                        </para>
                        <para>
                            Система отобразит все заявки, которые будут архивировться при вызове задания
Generic Agent.
                        </para>
                    </listitem>
                </orderedlist>
            </para>
        </listitem>
        <listitem>
            <para>
                Поиск Заявок
            </para>
            <para>
                Когда вы производите поиск заявок, система, по умолчанию ищет заявки,
которые не архивировались. Если вы хотите, чтобы поиск производился также и
по архивированным заявкам, просто дополнительно укажите критерий "поиск в
архиве".
            </para>
        </listitem>
    </orderedlist>
</section>

</section>


<section id="performance-tuning-database">
<title>База данных</title>
<para>
Это зависит от используемой базы данных. Если у вас возникли проблемы,
читайте документацию по вашей базе данных или же обратитесь к администартору
базы данных.
</para>

<section id="performance-tuning-database-mysql">
<title>MySQL</title>
<para>
Если вы в MySQL используете тип таблиц MyISAM (значение по умолчанию), и
удаляете большую часть таблицы, или если вы сделали много изменений в
таблице с переменной длинной строки (таблицы которые содержат поля типов
VARCHAR, BLOB или TEXT) вам нужно произвести дефрагментацию файла данных
(таблиц) с помощью команды "optimize".
</para>
<para>
Вы должны попробовать это, если сервер mysqld требует много процессорного
времени. Оптимизация таблиц ticket_history и article (см ниже Сценарий
21.2).
</para>

<para>
<programlisting>
shell$ mysql -u user -p database
mysql$ optimize table ticket;
mysql$ optimize table ticket_history;
mysql$ optimize table article;
</programlisting>
</para>

<para>
    <emphasis>Сценарий 21.2. Оптимизация таблиц базы данных.</emphasis>
</para>

</section>

<section id="performance-tuning-database-postgresql">
<title>PostgreSQL</title>
<para>
PostgreSQL лучше настраивается путем изменений в файле postgresql.conf
который находится в директории с установленым PostgreSQL. За советом, как
это сделать следите в следующих статьсях:
</para>

<para>
    <itemizedlist>
        <listitem>
            <para>
            <ulink url="http://www.revsys.com/writings/postgresql-performance.html">
<citetitle>http://www.revsys.com/writings/postgresql-performance.html</citetitle>
</ulink>
            </para>
        </listitem>
        <listitem>
            <para>
            <ulink url="http://varlena.com/GeneralBits/Tidbits/perf.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/perf.html</citetitle>
</ulink>
            </para>
        </listitem>
        <listitem>
            <para>
            <ulink url="http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html</citetitle>
</ulink>
            </para>
        </listitem>
    </itemizedlist>
</para>

<para>
Если производительность остается на неудовлетворительном уровне, мы
предлагаем вам присоединится к спискам рассылки "PostgreSQL Performance" (
<ulink url="http://www.postgresql.org/community/lists/">
http://www.postgresql.org/community/lists/ </ulink> ) и задавать вопросы
именно там. Люди в этом списке рассылке очень дружелюбны а всегада
постараются вам помочь.
</para>
</section>

</section>


<section id="performance-tuning-webserver">
<title>Веб-сервер</title>
<para>
Конечно же вы должны использовать mod_perl 2.0 ( <ulink
url="http://perl.apache.org/">
<citetitle>http://perl.apache.org/</citetitle> </ulink>). Он более быстр (~
* 100) чем "чистый" cgi. Но он требует больше оперативной памяти (RAM).
</para>

<section id="performance-tuning-webserver-db">
<title>Предварительно установленное соединение с базой данных</title>
<para>
Вы можете иметь соединение с базой данных заранее установленное при запуске
веб-сервера. Это существенно сэкономит время (см. README.webserver).
</para>
</section>

<section id="performance-tuning-webserver-startup">
<title>Предварительно загруженные модули  - startup.pl</title>
<para>
Используйте сценарий запуска
<filename>scripts/apache2-perl-startup.pl</filename> для предварительной
загрузки/компиляции Perl модулей на вашем сервере с mod_perl чтобы все
работало быстрее (см. README.webserver).
</para>
</section>
<section id="performance-tuning-webserver-reload">
<title>Перезагрузка Perl-модулей во время обновления с диска</title>
<para>
По умолчанию Apachee::Reload используется в
scripts/apache2-httpd.include.conf. Отключите его, если у вас больше 8%
скорости. Но помните чтобы перезапустить веб-сервер, если вы установите
модули через OTRS Package Manager, любые значения в SysConfig или в
Kernel/Config.pm. Важно: это также будет означать, что вы не можете
использовать OTRS Package Manager через веб-интерфейс, вы должны будете
использовать вариант с командной строкой -
<filename>bin/otrs.PackageManager.pl</filename>.
</para>
</section>

<section id="performance-tuning-webserver-strategy">
<title>Выбор Правильной Стратегии</title>
<para>
Если у вас действительно большая инсталяция (более 1, 000 новых заявок в
день и болше 40 агентов) то у вас есть хорошая возможность прочитать статью
"Выбор Правильной Стратегии"  (<ulink
url="http://perl.apache.org/docs/1.0/guide/strategy.html">
<citetitle>http://perl.apache.org/docs/1.0/guide/strategy.html</citetitle>
</ulink>).
</para>
</section>

<section id="performance-tuning-webserver-gzip">
<title>mod_gzip/mod_deflate</title>
<para>
Если ваша скорость будет немного мала, используйте mod_deflate для
Apache2. Если вы загружаете html-страницу размером в 45к,
mod_gzip/mod_deflate сожмет ее. И Страница будет иметь размер около
7к. Недостатком такого подхода является дополнительная нагрузка на
сервер. Это нужно помнить.
</para>
</section>

</section>

</chapter>
