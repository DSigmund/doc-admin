<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">


<!-- $Id: external-backends.xml,v 1.6 2011-02-09 17:24:50 mg Exp $ -->
<chapter id="external-backends">
<title>Использование внешних хранилищ данных</title>

<section id='customer-data'>
<title>Данные клиентов</title>

<para>
OTRS способен обрабатывать различные атрибуты данных клиента, такие как имя
пользователя, адрес электронной почты, номер телефона и т.д. Эта информация
будет отображаться для обоих оболочек, агентов и клиентов. Эти атрибуты
используются также для проверки подлинности клиентов.
</para>

<para>
Использование/Отображение данных клиента полностью настраивается, но без
следующих данных OTRS не будет работать, потому что эта информация всегда
необходима для проверки подлиности клиентов:
</para>

<para>
<itemizedlist>
  <listitem>
    <para>
      Вход пользователей
    </para>
  </listitem>
  <listitem>
    <para>
      Адресс электронной почты
    </para>
  </listitem>
  <listitem>
    <para>
      ID Клиента
    </para>
  </listitem>
</itemizedlist>
</para>

<para>
Используйте параметры конфигурации приведенные в Сценарии 11.1 в вашем файле
<filename>Kernel/Config.pm</filename> если вы хотите отображать информацию о
клиентах в вашем веб-интерфейсе.
</para>

<para>
<programlisting>
    # Ticket::Frontend::CustomerInfo*
    # (show customer info on Compose (Phone and Email), Zoom and
    # Queue view)
    $Self->{'Ticket::Frontend::CustomerInfoCompose'} = 1;
    $Self->{'Ticket::Frontend::CustomerInfoZoom'} = 1;
    $Self->{'Ticket::Frontend::CustomerInfoQueue'} = 0;
</programlisting>
</para>

<para>
    <emphasis>Сценарий 11.1. Конфигурационные параметры
Kernel/Config.pm.</emphasis>
</para>

</section>


<section id="customer-user-backend">
<title>Пользовательский бэк-енд</title>

<para>
Вы можете использоваь два типа хранилища информации клиентов: Базу Данных DB
и LDAP. Если у вас уже есть другой бэк-енд для хранения пользовательской
информации (например SAP), также есть возможность написать модуль для
использования этой функции.
</para>

<section id='customer-backend-db'>
<title>База Данных (По умолчанию)</title>

<para>
В Примере 11-1 отображает конфигурацию Базы Данных для хранения
пользовательской информации в базе данных OTRS.
</para>

<example id='db-customer-backend'>
<title>Настройка клиентского хранилища базы данных (DB)</title>

<para>
<programlisting>
# CustomerUser (customer database backend and settings)
$Self->{CustomerUser} = {
    Name => 'Database Datasource',
    Module => 'Kernel::System::CustomerUser::DB',
    Params => {
        # if you want to use an external database, add the required settings
#        DSN => 'DBI:odbc:yourdsn',
#        DSN => 'DBI:mysql:database=customerdb;host=customerdbhost',
#        User => '',
#        Password => '',
        Table => 'customer_user',
    },
# customer unique id
CustomerKey => 'login',
# customer #
CustomerID => 'customer_id',
CustomerValid => 'valid_id',
    CustomerUserListFields => ['first_name', 'last_name', 'email'],
    CustomerUserSearchFields => ['login', 'last_name', 'customer_id'],
    CustomerUserSearchPrefix => '',
    CustomerUserSearchSuffix => '*',
    CustomerUserSearchListLimit => 250,
    CustomerUserPostMasterSearchFields => ['email'],
    CustomerUserNameFields => ['salutation','first_name','last_name'],
    CustomerUserEmailUniqCheck => 1,
#    # show not own tickets in customer panel, CompanyTickets
#    CustomerUserExcludePrimaryCustomerID => 0,
#    # generate auto logins
#    AutoLoginCreation => 0,
#    AutoLoginCreationPrefix => 'auto',
#    # admin can change customer preferences
#    AdminSetPreferences => 1,
#    # cache time to live in sec. - cache any database queries
#    CacheTTL => 0,
#    # just a read only source
#    ReadOnly => 1,
    Map => [
        # note: Login, Email and CustomerID needed!
        # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly, http-link-target
        [ 'UserTitle',      'Title',      'title',      1, 0, 'var', '', 0 ],
        [ 'UserFirstname',  'Firstname',  'first_name', 1, 1, 'var', '', 0 ],
        [ 'UserLastname',   'Lastname',   'last_name',  1, 1, 'var', '', 0 ],
        [ 'UserLogin',      'Username',   'login',      1, 1, 'var', '', 0 ],
        [ 'UserPassword',   'Password',   'pw',         0, 0, 'var', '', 0 ],
        [ 'UserEmail',      'Email',      'email',      1, 1, 'var', '', 0 ],

#        [ 'UserEmail',      'Email', 'email',           1, 1, 'var', '$Env{"CGIHandle"}?Action=AgentTicketCompose&amp;ResponseID=1&amp;TicketID=$Data{"TicketID"}&amp;ArticleID=$Data{"ArticleID"}', 0 ],
        [ 'UserCustomerID', 'CustomerID', 'customer_id', 0, 1, 'var', '', 0 ],

#        [ 'UserCustomerIDs', 'CustomerIDs', 'customer_ids', 1, 0, 'var', '', 0 ],
        [ 'UserPhone',        'Phone',       'phone',        1, 0, 'var', '', 0 ],
        [ 'UserFax',          'Fax',         'fax',          1, 0, 'var', '', 0 ],
        [ 'UserMobile',       'Mobile',      'mobile',       1, 0, 'var', '', 0 ],
        [ 'UserStreet',       'Street',      'street',       1, 0, 'var', '', 0 ],
        [ 'UserZip',          'Zip',         'zip',          1, 0, 'var', '', 0 ],
        [ 'UserCity',         'City',        'city',         1, 0, 'var', '', 0 ],
        [ 'UserCountry',      'Country',     'country',      1, 0, 'var', '', 0 ],
        [ 'UserComment',      'Comment',     'comments',     1, 0, 'var', '', 0 ],
        [ 'ValidID',          'Valid',       'valid_id',     0, 1, 'int', '', 0 ],
    ],
    # default selections
    Selections => {
        UserTitle => {
            'Mr.' => 'Mr.',
            'Mrs.' => 'Mrs.',
        },
    },
};
</programlisting>
</para>

</example>

<para>
Если вы хотите настроить данные клиентов, измените заголовки столбцов или
добавьте новые, к таблице _user table в базе данных OTRS. Сценарий 11.2
отображает как добавлять новые поля для номера комнаты.
</para>

<para>
<screen>
linux:~# mysql -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 116 to server version: 5.0.18-Debian_7-log

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt; use otrs;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; ALTER TABLE customer_user ADD room VARCHAR (250);
Query OK, 1 rows affected (0.01 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql&gt; quit
Bye
linux:~#
</screen>
</para>

<para>
    <emphasis>Сценарий 11.2. Добавление поля "комната" в таблицу customer_user
table. </emphasis>
</para>

<para>
Теперь добавьте новый столбец в MAP-масив в файле
<filename>Kernel/Config.pm</filename>, как это показано в Сценарии 11.3.
</para>

<para>
<programlisting>
    # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
    [...]
    [ 'UserRoom',      'Room',      'room',       0, 1, 'var', '', 0 ],
</programlisting>
</para>

<para>
    <emphasis>Сценарий 11.3. Добавление поля "комната" в файл
Kernel/Config.pm.</emphasis>
</para>

<para>
Конечно, можно редактировать всю эту информации о клиенте с помощью
клиентского веб-интерфейса.
</para>


<section id='multi-customer-ids-db'>
<title>Клиент с несколькими идентификаторами (Заявки Компании)</title>

<para>
Одному клиенту можно назначить более одного идентификатоар. Это может быть
полезно, если клиенту необходимо получить доступ к заявкам других  клиентов,
например, руководитель хочет посмотреть заявки его помощников. Если клиент
может получить доступ к заявкам другого клиента, то используется особенность
заявок компании OTRS. Заявки компании могут быть доступны через ссылку
"Заявки Компании" в панели управления.
</para>

<para>
должны быть доступны для клиентов. Для использованя заявок компании, новый
столбец с идентификатором (IDs), который должен быть доступен для клиентов,
должен быть добавлен в таблицу customer_user базы данных OTRS (см. ниже
Сценарий 11.4).
</para>

<para>
<screen>
linux:~# mysql -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 124 to server version: 5.0.18-Debian_7-log

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt; use otrs;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; ALTER TABLE customer_user ADD customer_ids VARCHAR (250);
Query OK, 1 rows affected (0.02 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql&gt; quit
Bye
linux:~#
</screen>
</para>

<para>
    <emphasis>Сценарий 11.4. Добавление поля айди клиента в таблицу
customer_user table.</emphasis>
</para>

<para>
Теперь новый столбец должен быть добавлен в MAP-массив в
<filename>Kernel/Config.pm</filename>, как это показано в Сценарии 11.5.
</para>

<para>
<programlisting>
    # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
    [...]
    [ 'UserCustomerIDs', 'CustomerIDs', 'customer_ids', 1, 0, 'var', '', 0 ],
</programlisting>
</para>

<para>
    <emphasis>Сценарий 11.5. Добавление поля клиент айди в файле
Kernel/Config.pm.</emphasis>
</para>

<para>
Теперь, новый столбец для мульти-идентификатора клиента можно редактировать
с помощью веб-интерфейса агента, в разделе для управления клиентами.
</para>

<para>
Для того, чтобы один клиент получил доступ к заявкам других клиентов, нужно
добавить идентификаторы этих пользователей в новое поле для нескольких
идентификаторов клиента. Каждый идентификатор должен быть отделен точкой с
запятой (см. Пример 11-2 ниже).
</para>

<example id='company-tickets-db'>
<title>Хранение Заявок Компании в базе данных DB</title>

<para>
Клиенты А, Б и С созданы в вашей системе и А хочет иметь доступ к заявкам Б
и Ц через панель управления . Б и Ц должны иметь доступ к заявкам других
пользователей.
</para>

<para>
Для реализации подобной настройки измените данные о клиенте в таблице
customer_user и в <filename>Kernel/Config.pm</filename> как это показано
ниже. Потом загрузите настройки для пользователя А через пользовательский
веб-интерфейс или через панель управления. Если настройки отображаются в
поле для CustomerIDs значениями "Б и Ц".
</para>

</example>

</section>

</section>


<section id='customer-backend-ldap'>
<title>LDAP</title>

<para>
Если у вас есть каталог LDAP с данными о клиентах, вы можете использовать
его в качестве хранилища данных о клиентах в OTRS, как это показано в
Примере 11-3.
</para>

<example id='ldap-customer-backend'>
<title>Настройка LDAP в качестве хранилища информации о клиентах</title>

<para>
<programlisting>
# CustomerUser
# (customer ldap backend and settings)
$Self->{CustomerUser} = {
    Name => 'LDAP Data Source',
    Module => 'Kernel::System::CustomerUser::LDAP',
    Params => {
        # ldap host
        Host => 'bay.csuhayward.edu',
        # ldap base dn
        BaseDN => 'ou=seas,o=csuh',
        # search scope (one|sub)
        SSCOPE => 'sub',
        # The following is valid but would only be necessary if the
        # anonymous user does NOT have permission to read from the LDAP tree
        UserDN => '',
        UserPw => '',
        # in case you want to add always one filter to each ldap query, use
        # this option. e. g. AlwaysFilter => '(mail=*)' or AlwaysFilter => '(objectclass=user)'
        AlwaysFilter => '',
        # if your frontend is e. g. iso-8859-1 and the charset of your
        # ldap server is utf-8, use these options.
#            SourceCharset => 'utf-8',
#            DestCharset => 'iso-8859-1',
            # if both your frontend and your LDAP are unicode, use this:
#            SourceCharset => 'utf-8',
#            DestCharset   => 'utf-8',
            # Net::LDAP new params (if needed - for more info see perldoc Net::LDAP)
            Params => {
                port => 389,
                timeout => 120,
                async => 0,
                version => 3,
            },
    },
    # customer unique id
    CustomerKey => 'uid',
    # customer #
    CustomerID => 'mail',
    CustomerUserListFields => ['cn', 'mail'],
    CustomerUserSearchFields => ['uid', 'cn', 'mail'],
    CustomerUserSearchPrefix => '',
    CustomerUserSearchSuffix => '*',
    CustomerUserSearchListLimit => 250,
    CustomerUserPostMasterSearchFields => ['mail'],
    CustomerUserNameFields => ['givenname', 'sn'],
    # show not own tickets in customer panel, CompanyTickets
    CustomerUserExcludePrimaryCustomerID => 0,
    # add an ldap filter for valid users (expert setting)
#    CustomerUserValidFilter => '(!(description=locked))',
    # administrator can't change customer preferences
    AdminSetPreferences => 0,
#    # cache time to live in sec. - cache any database queries
#    CacheTTL => 0,
    Map => [
        # note: Login, Email and CustomerID are mandatory!
        # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
        [ 'UserTitle',      'Title',      'title',           1, 0, 'var', '', 0 ],
        [ 'UserFirstname',  'Firstname',  'givenname',       1, 1, 'var', '', 0 ],
        [ 'UserLastname',   'Lastname',   'sn',              1, 1, 'var', '', 0 ],
        [ 'UserLogin',      'Username',   'uid',             1, 1, 'var', '', 0 ],
        [ 'UserEmail',      'Email',      'mail',            1, 1, 'var', '', 0 ],
        [ 'UserCustomerID', 'CustomerID', 'mail',            0, 1, 'var', '', 0 ],
#        [ 'UserCustomerIDs', 'CustomerIDs', 'second_customer_ids', 1, 0, 'var', '', 0 ],
        [ 'UserPhone',      'Phone',      'telephonenumber', 1, 0, 'var', '', 0 ],
        [ 'UserAddress',    'Address',    'postaladdress',   1, 0, 'var', '', 0 ],
        [ 'UserComment',    'Comment',    'description',     1, 0, 'var', '', 0 ],
    ],
};
</programlisting>
</para>

</example>

<para>
.Если дополнительные атрибуты клиента хранятся в LDAP-каталоге, например,
имя руководителя, номер мобильного телефона, или отдела, и если вы хотите,
чтобы отобразить эту информацию в OTRS, просто расширить MAP-массив в
<filename>Kernel/Config.pm</filename> записями для этих атрибутов, как
показано в Сценарии 11.6.
</para>

<para>
<programlisting>
    # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
    [...]
    [ 'UserPhone',      'Phone',      'telephonenumber', 1, 0, 'var', '', 0 ],
</programlisting>
</para>

<para>
    <emphasis>Сценарий 11.6. Добавление нового поля в файл
Kernel/Config.pm.</emphasis>
</para>


<section id='multi-customer-ids-ldap'>
<title>Клиент с несколькими идентификаторами (Заявки Компании)</title>

<para>
Одному клиенту можно назначить более одного идентификатоар. Это может быть
полезно, если клиенту необходимо получить доступ к заявкам других  клиентов,
например, руководитель хочет посмотреть заявки его помощников. Если клиент
может получить доступ к заявкам другого клиента, то используется особенность
заявок компании OTRS. Заявки компании могут быть доступны через ссылку
"Заявки Компании" в панели управления.
</para>

<para>
Для использования опции "заявки компании" новое поле должно быть добавлено в
каталог LDAP, который содержит идентификаторы, которые должны быть доступны
для клиентов.
</para>

<para>
Если новое поле в каталоге LDAP был создан новый элемент должен быть
добавлен в MAP-массив в <filename>Kernel/Config.pm</filename>, как этл
показано в Сценарии 11.7.
</para>

<para>
<programlisting>
    # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
    [...]
    [ 'UserCustomerIDs', 'CustomerIDs', 'customer_ids', 1, 0, 'var', '', 0 ],
</programlisting>
</para>

<para>
    <emphasis>Сценарий 11.7. Подстановка новых полей в Kernel/Config.pm
file.</emphasis>
</para>

<para>
Поле мульти ID клиента может быть отредактировано напрямую в директории
LDAP, OTRS может только читать информацию из LDAP, но не записывать ее.
</para>

<para>
Чтобы убедтися что клиент имеет доступ к заявкам других клиентов, добавьте
ID клиента заявки которого должны простамтриватся к новому полю в вашей
LDAP-директории. Каждый идентификатор должен быть отделен точнкой с запятой
(см. ниже Рисунок 11-4).
</para>

<example id='company-tickets-ldap'>
<title>Хранение "Заявок Компании" в LDAP.</title>

<para>
Клиенты А, Б и Ц созданны в вашей системе и А хочет иметь доступ к заявкам Б
и Ц через панель клиента. Б и Ц не должны иметь доступа к другим
пользователям.
</para>

<para>
Для обеспечения этой установки измените LDAP-директорию и маппинг в
<filename>Kernel/Config.pm</filename>, как это показано ниже. Потом добавьте
информацию в поле для CustomerIDs, значения "Б;Ц;" для клиента "А" в вашей
LDAP-директории.
</para>

</example>

</section>

</section>


<section id='multiple-customer-backends'>
<title>Использование больше чем одного хранилища информации с OTRS</title>

<para>
Если вы хотите использовать больше одного клиентского хранилища информации в
OTRS (например LDAP и базу данных), конфигурационный параметр CustomerUser
должен быть расширен с числом, например "CustomerUser1", "CustomerUser2"
(см. ниже Пример 11-5).
</para>

<example id='multiple-customer-backend-example'>
<title>Использование больше чем одного пользовательского хранилища данных с OTRS</title>

<para>
В следующем примере показано применение конфигурации как для LDAP так и для
базы данных клиентского бэкэнда с OTRS.
</para>

<para>
<programlisting>
# 1. Customer user backend: DB
# (customer database backend and settings)
$Self->{CustomerUser1} = {
    Name => 'Customer Database',
    Module => 'Kernel::System::CustomerUser::DB',
    Params => {
        # if you want to use an external database, add the
        # required settings
#        DSN => 'DBI:odbc:yourdsn',
#        DSN => 'DBI:mysql:database=customerdb;host=customerdbhost',
#        User => '',
#        Password => '',
        Table => 'customer_user',
    },
    # customer unique id
    CustomerKey = 'login',
    # customer #
    CustomerID = 'customer_id',
    CustomerValid = 'valid_id',
    CustomerUserListFields => ['first_name', 'last_name', 'email'],
    CustomerUserSearchFields => ['login', 'last_name', 'customer_id'],
    CustomerUserSearchPrefix => '',
    CustomerUserSearchSuffix => '*',
    CustomerUserSearchListLimit => 250,
    CustomerUserPostMasterSearchFields => ['email'],
    CustomerUserNameFields => ['salutation','first_name','last_name'],
    CustomerUserEmailUniqCheck => 1,
#    # show not own tickets in customer panel, CompanyTickets
#    CustomerUserExcludePrimaryCustomerID => 0,
#    # generate auto logins
#    AutoLoginCreation => 0,
#    AutoLoginCreationPrefix => 'auto',
#    # admin can change customer preferences
#    AdminSetPreferences => 1,
#    # cache time to live in sec. - cache any database queries
#    CacheTTL => 0,
#    # just a read only source
#    ReadOnly => 1,
    Map => [

        # note: Login, Email and CustomerID needed!
        # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly, http-link-target
        [ 'UserTitle',      'Title',      'title',        1, 0, 'var', '', 0 ],
        [ 'UserFirstname',  'Firstname',  'first_name',   1, 1, 'var', '', 0 ],
        [ 'UserLastname',   'Lastname',   'last_name',    1, 1, 'var', '', 0 ],
        [ 'UserLogin',      'Username',   'login',        1, 1, 'var', '', 0 ],
        [ 'UserPassword',   'Password',   'pw',           0, 0, 'var', '', 0 ],
        [ 'UserEmail',      'Email',      'email',        1, 1, 'var', '', 0 ],
        [ 'UserCustomerID', 'CustomerID', 'customer_id',  0, 1, 'var', '', 0 ],
        [ 'UserPhone',      'Phone',      'phone',        1, 0, 'var', '', 0 ],
        [ 'UserFax',        'Fax',        'fax',          1, 0, 'var', '', 0 ],
        [ 'UserMobile',     'Mobile',     'mobile',       1, 0, 'var', '', 0 ],
        [ 'UserStreet',     'Street',     'street',       1, 0, 'var', '', 0 ],
        [ 'UserZip',        'Zip',        'zip',          1, 0, 'var', '', 0 ],
        [ 'UserCity',       'City',       'city',         1, 0, 'var', '', 0 ],
        [ 'UserCountry',    'Country',    'country',      1, 0, 'var', '', 0 ],
        [ 'UserComment',    'Comment',    'comments',     1, 0, 'var', '', 0 ],
        [ 'ValidID',        'Valid',      'valid_id',     0, 1, 'int', '', 0 ],
    ],
    # default selections
    Selections => {
        UserTitle => {
            'Mr.' => 'Mr.',
            'Mrs.' => 'Mrs.',
        },
    },
};

# 2. Customer user backend: LDAP
# (customer ldap backend and settings)
$Self->{CustomerUser2} = {
    Name => 'LDAP Datasource',
    Module => 'Kernel::System::CustomerUser::LDAP',
    Params => {
        # ldap host
        Host => 'bay.csuhayward.edu',
        # ldap base dn
        BaseDN => 'ou=seas,o=csuh',
        # search scope (one|sub)
        SSCOPE => 'sub',
#        # The following is valid but would only be necessary if the
#        # anonymous user does NOT have permission to read from the LDAP tree
        UserDN => '',
        UserPw => '',
        # in case you want to add always one filter to each ldap query, use
        # this option. e. g. AlwaysFilter => '(mail=*)' or AlwaysFilter => '(objectclass=user)'
        AlwaysFilter => '',
        # if both your frontend and your LDAP are unicode, use this:
#        SourceCharset => 'utf-8',
#        DestCharset   => 'utf-8',
        # if your frontend is e. g. iso-8859-1 and the character set of your
        # ldap server is utf-8, use these options:
#        SourceCharset => 'utf-8',
#        DestCharset => 'iso-8859-1',

        # Net::LDAP new params (if needed - for more info see perldoc Net::LDAP)
        Params => {
            port => 389,
            timeout => 120,
            async => 0,
            version => 3,
        },
    },
    # customer unique id
    CustomerKey => 'uid',
    # customer #
    CustomerID => 'mail',
    CustomerUserListFields => ['cn', 'mail'],
    CustomerUserSearchFields => ['uid', 'cn', 'mail'],
    CustomerUserSearchPrefix => '',
    CustomerUserSearchSuffix => '*',
    CustomerUserSearchListLimit => 250,
    CustomerUserPostMasterSearchFields => ['mail'],
    CustomerUserNameFields => ['givenname', 'sn'],
    # show not own tickets in customer panel, CompanyTickets
    CustomerUserExcludePrimaryCustomerID => 0,
    # add a ldap filter for valid users (expert setting)
#    CustomerUserValidFilter => '(!(description=locked))',
    # admin can't change customer preferences
    AdminSetPreferences => 0,
    Map => [
        # note: Login, Email and CustomerID needed!
        # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
        [ 'UserTitle',      'Title',      'title',           1, 0, 'var', '', 0 ],
        [ 'UserFirstname',  'Firstname',  'givenname',       1, 1, 'var', '', 0 ],
        [ 'UserLastname',   'Lastname',   'sn',              1, 1, 'var', '', 0 ],
        [ 'UserLogin',      'Username',   'uid',             1, 1, 'var', '', 0 ],
        [ 'UserEmail',      'Email',      'mail',            1, 1, 'var', '', 0 ],
        [ 'UserCustomerID', 'CustomerID', 'mail',            0, 1, 'var', '', 0 ],
#        [ 'UserCustomerIDs', 'CustomerIDs', 'second_customer_ids', 1, 0, 'var', '', 0 ],
        [ 'UserPhone',      'Phone',      'telephonenumber', 1, 0, 'var', '', 0 ],
        [ 'UserAddress',    'Address',    'postaladdress',   1, 0, 'var', '', 0 ],
        [ 'UserComment',    'Comment',    'description',     1, 0, 'var', '', 0 ],
    ],
};
</programlisting>
</para>

</example>

<para>
Есть возможность интегрировать до 10 различных пользовательских хранилищ
информации. Через интерфейс управления клиентами в OTRS все данные о
клиентах можно посмотреть и отредактировать (если есть доступ на запись).
</para>

</section>

</section>

<section id="auth-backends">
<title>Хранилища для аутентификации агентов и клиентов</title>

<para>
OTRS offers the option to authenticate agents and customers against
different backends.
</para>

<section id='agent-auth-backends'>
<title>Authentication backends for agents</title>

<section id='agent-auth-backend-db'>
<title>DB (Default)</title>

<para>
The backend to authenticate agents which is used per default is the OTRS
database. Agents can be added and edited via the <link
linkend="adminarea-agents"> user management interface </link> in the <link
linkend="adminarea"> admin area </link> (see Example 11-6 below).
</para>

<example id='configuration-agent-auth-backend-db'>
<title>Authenticate agents against a DB backend</title>

<para>
<programlisting>
    $Self->{'AuthModule'} = 'Kernel::System::Auth::DB';
</programlisting>
</para>

</example>

</section>

<section id='agent-auth-backend-ldap'>
<title>LDAP</title>

<para>
If a LDAP directory has all your agent data stored, you can use the LDAP
module to authenticate your users in OTRS (see Example 11-7 below).  This
module has only read access to the LDAP tree, that means you can't edit your
users via the <link linkend='adminarea-agents'> user management interface
</link> .
</para>

<example id='configuration-agent-auth-backend-ldap'>
<title>Authenticate agents against a LDAP backend</title>

<para>
<programlisting>
# This is an example configuration for an LDAP auth. backend.
# (Make sure Net::LDAP is installed!)
$Self->{'AuthModule'} = 'Kernel::System::Auth::LDAP';
$Self->{'AuthModule::LDAP::Host'} = 'ldap.example.com';
$Self->{'AuthModule::LDAP::BaseDN'} = 'dc=example,dc=com';
$Self->{'AuthModule::LDAP::UID'} = 'uid';

# Check if the user is allowed to auth in a posixGroup
# (e. g. user needs to be in a group xyz to use otrs)
$Self->{'AuthModule::LDAP::GroupDN'} = 'cn=otrsallow,ou=posixGroups,dc=example,dc=com';
$Self->{'AuthModule::LDAP::AccessAttr'} = 'memberUid';
# for ldap posixGroups objectclass (just uid)
#  $Self->{'AuthModule::LDAP::UserAttr'} = 'UID';
# for non ldap posixGroups objectclass (with full user dn)
#  $Self->{'AuthModule::LDAP::UserAttr'} = 'DN';

# The following is valid but would only be necessary if the
# anonymous user do NOT have permission to read from the LDAP tree
$Self->{'AuthModule::LDAP::SearchUserDN'} = '';
$Self->{'AuthModule::LDAP::SearchUserPw'} = '';

# in case you want to add always one filter to each ldap query, use
# this option. e. g. AlwaysFilter => '(mail=*)' or AlwaysFilter => '(objectclass=user)'
$Self->{'AuthModule::LDAP::AlwaysFilter'} = '';

# in case you want to add a suffix to each login name, then
# you can use this option. e. g. user just want to use user but
# in your ldap directory exists user@domain.
#    $Self->{'AuthModule::LDAP::UserSuffix'} = '@domain.com';

# Net::LDAP new params (if needed - for more info see perldoc Net::LDAP)
$Self->{'AuthModule::LDAP::Params'} = {
    port => 389,
    timeout => 120,
    async => 0,
    version => 3,
};
</programlisting>
</para>

</example>

<para>
The configuration parameters shown in the Script 11.8 can be used to
synchronize the user data from your LDAP directory into your local OTRS
database. This reduces the number of requests to your LDAP server and speeds
up the authentication with OTRS. The data sync is done when the agent
authenticates the first time. Although the data can be synced into the local
OTRS database, the LDAP directory is the last instance for the
authentication, so an inactive user in the LDAP tree can't authenticate to
OTRS, even when the account data is already stored in the OTRS database. The
agent data in the LDAP directory can't be edited via the web interface of
OTRS, so the data has to be managed directly in the LDAP tree.
</para>

<para>
<programlisting>
# agent data sync against ldap
$Self->{'AuthSyncModule'} = 'Kernel::System::Auth::Sync::LDAP';
$Self->{'AuthSyncModule::LDAP::Host'} = 'ldap://ldap.example.com/';
$Self->{'AuthSyncModule::LDAP::BaseDN'} = 'dc=otrs, dc=org';
$Self->{'AuthSyncModule::LDAP::UID'} = 'uid';
$Self->{'AuthSyncModule::LDAP::SearchUserDN'} = 'uid=sys, ou=user, dc=otrs, dc=org';
$Self->{'AuthSyncModule::LDAP::SearchUserPw'} = 'some_pass';
$Self->{'AuthSyncModule::LDAP::UserSyncMap'} = {
    # DB -> LDAP
    UserFirstname => 'givenName',
    UserLastname  => 'sn',
    UserEmail     => 'mail',
};
[...]

# AuthSyncModule::LDAP::UserSyncInitialGroups
# (sync following group with rw permission after initial create of first agent
# login)
$Self->{'AuthSyncModule::LDAP::UserSyncInitialGroups'} = [
    'users',
];
</programlisting>
</para>

<para>
    <emphasis>Script 11.8. Synchronizing the user data from the LDAP directory
into the OTRS database.</emphasis>
</para>

</section>


<section id='agent-auth-backend-httpbasic'>
<title>HTTPBasicAuth for agents</title>

<para>
If you want to implement a "single sign on" solution for all your agents,
you can use HTTP basic authentication (for all your systems) and the
HTTPBasicAuth module for OTRS (see Example 11-8 below).
</para>

<example id='configuration-agent-auth-backend-htbasic'>
<title>Authenticate agents using HTTPBasic</title>

<para>
<programlisting>
# This is an example configuration for an apache ($ENV{REMOTE_USER})
# auth. backend. Use it if you want to have a singe login through
# apache http-basic-auth
$Self->{'AuthModule'} = 'Kernel::System::Auth::HTTPBasicAuth';

# Note:
#
# If you use this module, you should use as fallback
# the following configuration settings if the user is not authorized
# apache ($ENV{REMOTE_USER})
$Self->{LoginURL} = 'http://host.example.com/not-authorised-for-otrs.html';
$Self->{LogoutURL} = 'http://host.example.com/thanks-for-using-otrs.html';
</programlisting>
</para>

</example>

</section>


<section id='agent-auth-backend-radius'>
<title>Radius</title>

<para>
The configuration parameters shown in the Example 11-9 can be used to
authenticate agents against a radius server.
</para>

<example id='configuration-agent-auth-backend-radius'>
<title>Authenticate agents against a radius backend</title>

<para>
<programlisting>
# This is example configuration to auth. agents against a radius server
$Self->{'AuthModule'} = 'Kernel::System::Auth::Radius';
$Self->{'AuthModule::Radius::Host'} = 'radiushost';
$Self->{'AuthModule::Radius::Password'} = 'radiussecret';
</programlisting>
</para>

</example>

</section>

</section>


<section id="customer-auth-backends">
<title>Authentication backends for customers</title>

<section id='customer-auth-backend-db'>
<title>База Данных (По умолчанию)</title>

<para>
The default used authentication backend for customers in OTRS is the OTRS
database. With this backend, all customer data can be edited via the web
interface of OTRS (see the Example 11-10 below).
</para>

<example id='configuration-customer-auth-backend-db'>
<title>Аутентификация Клиента в Базе Данных</title>

<para>
<programlisting>
# This is the auth. module againt the otrs db
$Self->{'Customer::AuthModule'} = 'Kernel::System::CustomerAuth::DB';
$Self->{'Customer::AuthModule::DB::Table'} = 'customer_user';
$Self->{'Customer::AuthModule::DB::CustomerKey'} = 'login';
$Self->{'Customer::AuthModule::DB::CustomerPassword'} = 'pw';
#$Self->{'Customer::AuthModule::DB::DSN'} = "DBI:mysql:database=customerdb;host=customerdbhost";
#$Self->{'Customer::AuthModule::DB::User'} = "some_user";
#$Self->{'Customer::AuthModule::DB::Password'} = "some_password";
</programlisting>
</para>

</example>

</section>


<section id='customer-auth-backend-ldap'>
<title>LDAP</title>

<para>
Если у вас есть каталог LDAP со всеми данными о клиентах, можно использовать
модуль LDAP для аутентификации клиентов в OTRS (см. Пример 11-11
ниже). Поскольку этот модуль имеет права только для чтения для данных из
LDAP-бэкенда, то нету возможности изменить данные клиента через веб.
</para>

<example id='configuration-customer-auth-backend-ldap'>
<title>Аутентификация клиентов в LDAP</title>

<para>
<programlisting>
# This is an example configuration for an LDAP auth. backend.
# (make sure Net::LDAP is installed!)
$Self->{'Customer::AuthModule'} = 'Kernel::System::CustomerAuth::LDAP';
$Self->{'Customer::AuthModule::LDAP::Host'} = 'ldap.example.com';
$Self->{'Customer::AuthModule::LDAP::BaseDN'} = 'dc=example,dc=com';
$Self->{'Customer::AuthModule::LDAP::UID'} = 'uid';

# Check if the user is allowed to auth in a posixGroup
# (e. g. user needs to be in a group xyz to use otrs)
$Self->{'Customer::AuthModule::LDAP::GroupDN'} = 'cn=otrsallow,ou=posixGroups,dc=example,dc=com';
$Self->{'Customer::AuthModule::LDAP::AccessAttr'} = 'memberUid';
# for ldap posixGroups objectclass (just uid)
$Self->{'Customer::AuthModule::LDAP::UserAttr'} = 'UID';
# for non ldap posixGroups objectclass (full user dn)
#$Self->{'Customer::AuthModule::LDAP::UserAttr'} = 'DN';

# The following is valid but would only be necessary if the
# anonymous user does NOT have permission to read from the LDAP tree
$Self->{'Customer::AuthModule::LDAP::SearchUserDN'} = '';
$Self->{'Customer::AuthModule::LDAP::SearchUserPw'} = '';

# in case you want to add always one filter to each ldap query, use
# this option. e. g. AlwaysFilter => '(mail=*)' or AlwaysFilter => '(objectclass=user)'
$Self->{'Customer::AuthModule::LDAP::AlwaysFilter'} = '';

# in case you want to add a suffix to each customer login name, then
# you can use this option. e. g. user just want to use user but
# in your ldap directory exists user@domain.
#$Self->{'Customer::AuthModule::LDAP::UserSuffix'} = '@domain.com';

# Net::LDAP new params (if needed - for more info see perldoc Net::LDAP)
$Self->{'Customer::AuthModule::LDAP::Params'} = {
    port => 389,
    timeout => 120,
    async => 0,
    version => 3,
};
</programlisting>
</para>

</example>

</section>


<section id='customer-auth-backend-httpbasic'>
<title>HTTPBasicAuth аутентификация для клиентов</title>

<para>
Если вы хотите внедрить "single sign on"-решение для ваших пользователей, вы
можете использовать базовую, HTTPBasic аутентификацию (для всех ваших
систем) и использовать модуль HTTPBasicAuth с OTRS (больше не нужно
логинится в OTRS). См. ниже Пример 11-12.
</para>

<example id='configuration-customer-auth-backend-htbasic'>
<title>Аутентификация клиентов с помощью HTTPBasic</title>

<para>
<programlisting>
# This is an example configuration for an apache ($ENV{REMOTE_USER})
# auth. backend. Use it if you want to have a singe login through
# apache http-basic-auth
$Self->{'Customer::AuthModule'} = 'Kernel::System::CustomerAuth::HTTPBasicAuth';

# Note:
# If you use this module, you should use the following
# config settings as fallback, if user isn't login through
# apache ($ENV{REMOTE_USER})
$Self->{CustomerPanelLoginURL} = 'http://host.example.com/not-authorised-for-otrs.html';
$Self->{CustomerPanelLogoutURL} = 'http://host.example.com/thanks-for-using-otrs.html';
</programlisting>
</para>

</example>

</section>


<section id='customer-auth-backend-radius'>
<title>Radius</title>

<para>
Настройки приведенные в примере 11-13 могут быть использованы для
аутентификации ваших клиентов с radius-сервером.
</para>

<example id='configuration-customer-auth-backend-radius'>
<title>Аутентификация клиентов с использованием radius </title>

<para>
<programlisting>
# This is a example configuration to auth. customer against a radius server
$Self->{'Customer::AuthModule'} = 'Kernel::System::Auth::Radius';
$Self->{'Customer::AuthModule::Radius::Host'} = 'radiushost';
$Self->{'Customer::AuthModule::Radius::Password'} = 'radiussecret';
</programlisting>
</para>

</example>

</section>

</section>

</section>


<section id="customer-self-registration">
<title>Дополнительная настройка самостоятельной регистрации клиентов</title>

<para>
Можно настроить самостоятельную регистрацию для новых клиентов, которые
доступны через панель customer.pl. Новые дополнительные или обязательные
поля, такие как номер комнаты, адрес или состояние могут быть добавлены.
</para>

<para>
В следующем примере показано, как можно указать обязательные для заполнения
поля в базе данных клиентов, в данном случае, для хранения номера клиента.
</para>

<section id='customer-self-registration-dtl'>
<title>Настройка веб-интерфейса</title>

<para>
Для отображения новых полей для номера комнаты в веб-интерфейсе пользователя
customer.pl, .dtl-файл, который отвечает за шаблон этого интерфейса, должен
быть изменен. Редактируйте файл
<filename>Kernel/Output/HTML/Standard/CustomerLogin.dtl</filename> и
добавьте новые поля после строки 80 (см. ниже Сценарий 11.9).
</para>

<para>
<programlisting>
[...]
&lt;div class="NewLine"&gt;
    &lt;label for="Room"&gt;$Text{"Room{CustomerUser}"}&lt;/label&gt;
    &lt;input title="$Text{"Room Number"}" name="Room" type="text" id="UserRoom" maxlength="50" /&gt;
&lt;/div&gt;
[...]
</programlisting>
</para>

<para>
    <emphasis>Сценарий 11.9. Отображение новых полей в
веб-интерфейсе.</emphasis>
</para>

</section>


<section id="customer-self-registration-mapping">
<title>Отображения клиентов</title>

<para>
In the next step, the customer mapping has to be expanded with the new entry
for the room number. To ensure that the changes are not lost after an
update, put the "CustomerUser" settings from the
<filename>Kernel/Config/Defaults.pm</filename> into the
<filename>Kernel/Config.pm</filename>. Now change the MAP array and add the
new room number field, as shown in the Script 11.10.
</para>

<para>
<programlisting>
# CustomerUser
# (customer database backend and settings)
$Self->{CustomerUser} = {
    Name => 'Database Backend',
    Module => 'Kernel::System::CustomerUser::DB',
    Params => {
        # if you want to use an external database, add the
        # required settings
#        DSN => 'DBI:odbc:yourdsn',
#        DSN => 'DBI:mysql:database=customerdb;host=customerdbhost',
#        User => '',
#        Password => '',
        Table => 'customer_user',
    },
    # customer unique id
    CustomerKey => 'login',
    # customer #
    CustomerID => 'customer_id',
    CustomerValid => 'valid_id',
    CustomerUserListFields => ['first_name', 'last_name', 'email'],
#    CustomerUserListFields => ['login', 'first_name', 'last_name', 'customer_id', 'email'],
    CustomerUserSearchFields => ['login', 'last_name', 'customer_id'],
    CustomerUserSearchPrefix => '',
    CustomerUserSearchSuffix => '*',
    CustomerUserSearchListLimit => 250,
    CustomerUserPostMasterSearchFields => ['email'],
    CustomerUserNameFields => ['salutation', 'first_name', 'last_name'],
    CustomerUserEmailUniqCheck => 1,
#    # show not own tickets in customer panel, CompanyTickets
#    CustomerUserExcludePrimaryCustomerID => 0,
#    # generate auto logins
#    AutoLoginCreation => 0,
#    AutoLoginCreationPrefix => 'auto',
#    # admin can change customer preferences
#    AdminSetPreferences => 1,
#    # cache time to live in sec. - cache database queries
#    CacheTTL => 0,
#    # just a read only source
#    ReadOnly => 1,
    Map => [

        # note: Login, Email and CustomerID needed!
        # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly, http-link-target
        [ 'UserTitle',      'Title',      'title',       1, 0, 'var', '', 0 ],
        [ 'UserFirstname',  'Firstname',  'first_name',  1, 1, 'var', '', 0 ],
        [ 'UserLastname',   'Lastname',   'last_name',   1, 1, 'var', '', 0 ],
        [ 'UserLogin',      'Username',   'login',       1, 1, 'var', '', 0 ],
        [ 'UserPassword',   'Password',   'pw',          0, 0, 'var', '', 0 ],
        [ 'UserEmail',      'Email',      'email',       1, 1, 'var', '', 0 ],
        [ 'UserCustomerID', 'CustomerID', 'customer_id', 0, 1, 'var', '', 0 ],
        [ 'UserPhone',      'Phone',      'phone',       1, 0, 'var', '', 0 ],
        [ 'UserFax',        'Fax',        'fax',         1, 0, 'var', '', 0 ],
        [ 'UserMobile',     'Mobile',     'mobile',      1, 0, 'var', '', 0 ],
        [ 'UserRoom',       'Room',       'room',        1, 0, 'var', '', 0 ],
        [ 'UserStreet',     'Street',     'street',      1, 0, 'var', '', 0 ],
        [ 'UserZip',        'Zip',        'zip',         1, 0, 'var', '', 0 ],
        [ 'UserCity',       'City',       'city',        1, 0, 'var', '', 0 ],
        [ 'UserCountry',    'Country',    'country',     1, 0, 'var', '', 0 ],
        [ 'UserComment',    'Comment',    'comments',    1, 0, 'var', '', 0 ],
        [ 'ValidID',        'Valid',      'valid_id',    0, 1, 'int', '', 0 ],
    ],
    # default selections
    Selections => {
        UserTitle => {
            'Mr.' => 'Mr.',
            'Mrs.' => 'Mrs.',
        },
    },
};
</programlisting>
</para>

<para>
    <emphasis>Script 11.10. Changing the map array.</emphasis>
</para>

</section>

<section id="customer-self-registration-customer-table">
<title>Customize the customer_user table in the OTRS DB</title>

<para>
The last step is to add the new room number column to the customer_user
table in the OTRS database (see Script 11.11 below). In this column, the
entries for the room numbers will be stored.
</para>

<para>
<screen>
linux:~# mysql -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 6 to server version: 5.0.18-Debian_7-log

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt; use otrs;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; ALTER TABLE customer_user ADD room VARCHAR (200);
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql&gt; quit
Bye
linux:~#
</screen>
</para>

<para>
    <emphasis>Script 11.11. Adding a new column to the customer_user
table.</emphasis>
</para>

<para>
Now you took all the steps involved, and the new field for the room should
be displayed in the customer.pl panel. New customers should have to insert
their room number if they register a new account. If you use apache and use
mod_perl for OTRS, you should restart the web server to activate the
changes.
</para>
</section>

</section>

</chapter>
