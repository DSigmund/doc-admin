<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="manual-installation-of-otrs">
<title>Установка из исходных кодов (Linux, Unix)</title>

<section id="preparing-manual-installation">
<title>Подготовка к установке из исходных кодов</title>

<para>
Если вы решили устанавливать OTRS из исходных кодов, перейдите по ссылке
<ulink url="http://www.otrs.com/try/">
<citetitle>http://www.otrs.com/try/</citetitle> </ulink> и загрузите архив с
исходными кодами в любом удобном для вас формате: .tar.gz, .tar.bz2, или
.zip
</para>

<para>
Распакуйте архив (например с помощью команды <command>tar</command>) в
каталог <filename>/opt</filename> а затем переименуйте каталог otrs-x.x.x на
otrs (см. ниже Сценарий ниже).
</para>

<para>
<screen>
linux:/opt# tar xf /tmp/otrs-x.x.x.tar.gz
linux:/opt# mv otrs-x.x.x otrs
linux:/opt# ls
otrs
linux:/opt#
</screen>
</para>

<para>
<emphasis>Script: Установка OTRS, первые шаги.</emphasis>
</para>

<para>
OTRS не должен выполнятся с правами администратора root. На следующем шаге
настройки OTRS необходимо добавить нового пользователя. Домашняя директория
нового пользователя должна находится в каталоге
<filename>/opt/otrs</filename>. Если веб-сервер не работает с теми правами
что и новый пользователь 'otrs', а именно так и есть в большинстве систем,
то его нужно добавить в группу пользователей веб-сервера (см Сценарий ниже).
</para>

<para>
<screen>
linux:/opt# useradd -r -d /opt/otrs/ -c 'OTRS user' otrs
linux:/opt# usermod -G www otrs
linux:/opt#
</screen> (SUSE=www, Red Hat/CentOS/Fedora=apache,
Debian/Ubuntu=www-data)
</para>

<para>
<emphasis>Сценарий: Добавление нового пользователя 'otrs' и добавление его в
группу.</emphasis>
</para>

<para>
Затем нужно скопировать некоторые конфигурационные файлы, точнее
демонстрационные копии конфигурационных файлов, которые позже будут
использоваться системой. Файлы находятся в каталоге
<filename>/opt/otrs/Kernel</filename> и
<filename>/opt/otrs/Kernel/Config</filename> и имеют расширение .dist
(см. Сценарий ниже).
</para>

<para>
<screen>
linux:/opt# cd otrs/Kernel/
linux:/opt/otrs/Kernel# cp Config.pm.dist Config.pm
linux:/opt/otrs/Kernel# cd Config
linux:/opt/otrs/Kernel/Config# cp GenericAgent.pm.dist GenericAgent.pm
</screen>
</para>

<para>
<emphasis>Сценарий: Копирование демонстрационных копий конфигурационных
файлов</emphasis>
</para>

<para>
На завершающем этапе установки OTRS необходимо установить соответствующие
права доступа к файлам. Для этого используйте сценарий
<command>otrs.SetPermissions.pl</command>, находящийся в директории
<filename>bin</filename> домашнего каталога пользователя 'otrs'. Скрипт
можно вызвать со следующими параметрами:
</para>

<para>
<cmdsynopsis>
<command>otrs.SetPermissions.pl</command> <arg choice='req'>
<replaceable>Home directory of the OTRS user</replaceable> </arg> <arg
choice='req'> --otrs-user= <replaceable>OTRS user</replaceable> </arg> <arg
choice='req'> --web-user= <replaceable>Web server user</replaceable> </arg>
<arg choice='opt'> --otrs-group= <replaceable>Group of the OTRS
user</replaceable> </arg> <arg choice='opt'> --web-group= <replaceable>Group
of the web server user</replaceable> </arg></cmdsynopsis>
</para>

<para>
Если ваш веб-сервер работает с теми же правами что и пользователь 'otrs', то
команда установки надлежащих прав доступа будет выглядеть так:
<command>otrs.SetPermissions.pl /opt/otrs --otrs-user=otrs
--web-user=otrs</command>. На SUSE-системах веб-сервер работает с правами
пользователя 'wwwrun'. На Debian-системах - 'www-data'. Для установки
надлежащих прав доступа используйте команду <command>otrs.SetPermissions.pl
/opt/otrs --otrs-user=otrs --web-user=wwwrun --otrs-group=nogroup
--web-group=www</command>.
</para>

</section>

<section id="installation-of-perl-modules">
<title>Установка Perl-модулей</title>

<para>
Исходя из Таблицы 3-1. для работы OTRS необходимо установить некоторые
дополнительные модули Perl­. При установке OTRS из исходных кодов, эти
модули придется установить вручную. Конечно же это намного проще сделать
используя менеджер пакетов, который прилагается к вашему Linux-дистрибутиву
(<application>yast</application>, <application>apt-get</application>) или,
как описано в этом разделе, использовать оболочку Perl shell и CPAN. Если вы
используете ActiveState Perl, например, на Windows, то можно использовать
PPM, встроенный менеджер пакетов Perl/Perl Package Manager. Мы рекомендуем
использовать менеджер пакетов, если это возможно.
</para>

<para>
Используйте команду <command>otrs.CheckModules.pl</command>, чтобы
проверить, какие модули необходимо установить. Этот сценарий находится в
директории <filename>bin</filename> домашнего каталогоа пользователя 'otrs'
(см. Сценарий ниже).
Некоторые модули необязательны. <screen>
linux:~# cd /opt/otrs/bin/
linux:/opt/otrs/bin# ./otrs.CheckModules.pl
   o CGI..............................ok (v3.60)
   o Crypt::PasswdMD5.................ok (v1.3)
   o Crypt::SSLeay....................Not installed! (Optional - Required for Generic Interface SOAP SSL connections.)
   o CSS::Minifier....................ok (v0.01)
   o Date::Format.....................ok (v2.22)
   o Date::Pcalc......................ok (v1.2)

   ...

</screen>
</para>

<para>
<emphasis>Сценарий: Проверка необходимых модулей.</emphasis>
</para>

<para>
Для установки недостающих модулей старайтесь использовать менеджер
управления пакетами, входящий в дистрибутив Linux. Таким образом, в случае
выхода обновлений или новых решений по обеспечению большей безопасности,
пакеты будут обновлятся автоматически. Чтобы узнать как установить
дополнительные пакеты обратитесь к документации, которая поставляется вместе
с дистрибутивом вашей операционной системы. Если модуль (соответствующая
версия) не доступен из репозитория пакетов, его всегда можно установить
используя CPAN, Comprehensive Perl Archive Network.
</para>

<para>
Для установки любого из выше описанных модулей через CPAN, нужно выполнить
команду <command>perl -e shell -MCPAN</command>. Оболочка Perl запустится в
интерактивном режиме и модуль CPAN будет загружен. Если CPAN уже
сконфигурирован, то с помощью команды <command>install</command> "имя
модуля" (install module_name)  можно начинать установку необходимых
модулей. CPAN автоматически отслеживает зависимости между Perl-модулями и
тут же оповещает, какие еще модули нужно установить.
</para>

<para>
    Execute also the commands <command>perl -cw bin/cgi-bin/index.pl</command>
<command>perl -cw bin/cgi-bin/customer.pl</command> and <command>perl -cw
bin/otrs.PostMaster.pl</command> after changing into the directory
<filename>/opt/otrs</filename>.  If the output of both commands is "syntax
OK", your Perl is properly set up (see Script below).
</para>

<para>
<screen>
linux:~# cd /opt/otrs
linux:/opt/otrs# perl -cw bin/cgi-bin/index.pl
cgi-bin/installer.pl syntax OK
linux:/opt/otrs# perl -cw bin/cgi-bin/customer.pl
cgi-bin/customer.pl syntax OK
linux:/opt/otrs# perl -cw bin/otrs.PostMaster.pl
bin/otrs.PostMaster.pl syntax OK
linux:/opt/otrs#
</screen>
</para>
<para>
<emphasis>Сценарий: Проверить синтаксис.</emphasis>
</para>

</section>

<section id="web-server-configuration">
<title>Настройка веб-сервера Apache</title>

<para>Сначала, вы должны установить веб-сервер Apache2 и mod_perl; это обычно
делается с помощью системного менеджера пакетов. Ниже вы найдете команды,
необходимые для установки Apache на наиболее распостраненные дистрибутивы
Linux.
</para>

<para>
  <screen>

# rhel / centos: linux:# yum install httpd mod_perl # suse: linux:# zypper install apache2-mod_perl # debian/ubuntu: linux:# apt-get install apache2 libapache-mod-perl2 </screen>
</para>

<para>
Для простого и удобного доступа к веб-интерфейсу OTRS через короткий адрес,
нужно использовать Alias и ScriptAlias. Большинство установок
<application>Apache</application> имеют директорию
<filename>conf.d</filename>. Очень часто в Linux-системах эта директория
находится в <filename>/etc/apache</filename> или
<filename>/etc/apache2</filename>. Войдите в систему с правами
администратора, затем перейдите в директорию <filename>conf.d</filename> и
скопируйте соответствующий шаблон конфигурационного файла
<filename>/opt/otrs/scripts/apache2-httpd.include.conf</filename> в файл
<filename>otrs.conf</filename>, который находится в каталоге настроек
Apache.
</para>

<para>
Перезагрузите веб-сервер, чтобы новые настройки вступили в силу. На
большинстве систем запустить/перезагрузить веб-сервер можно с помощью
команды <command>/etc/init.d/apache2 restart</command> (см. Сценарий ниже).
</para>

<para>
<screen>
linux:/etc/apache2/conf.d# /etc/init.d/apache2 restart
Forcing reload of web server: Apache2.
linux:/etc/apache2/conf.d#
</screen>
</para>

<para>
<emphasis>Сценарий: Перезапуск веб-сервера.</emphasis>
</para>

<para>
Теперь веб-сервер полностью настроен для работы OTRS.
</para>
</section>

<section id="database-configuration">
<title>Настройка базы данных</title>

<section id="manual-installation-of-database">
<title>Установка базы данных OTRS вручную.</title>

<para>
Если вы не можете воспользоваться веб-инсталлятором для установки базы
данных OTRS, то ее нужно установить вручную, как описано в этой
главе. Сценарий с SQL-инструкциями для создания и настройки базы данных
находится в директории <filename>scripts/database</filename> домашенего
каталога пользователя 'otrs' (см. Сценарий ниже).
</para>

<para>
<screen>
linux:~# cd /opt/otrs/scripts/database/
linux:/opt/otrs/scripts/database# ls
otrs-initial_insert.db2.sql         otrs-schema.mysql.sql
otrs-schema.oracle.sql
otrs-initial_insert.mssql.sql       otrs-schema-post.db2.sql
otrs-initial_insert.mysql.sql       otrs-schema.postgresql.sql
otrs-initial_insert.oracle.sql
otrs-initial_insert.postgresql.sql  otrs-schema-post.mssql.sql
otrs-initial_insert.xml             otrs-schema-post.mysql.sql
otrs-schema.db2.sql                 otrs-schema-post.oracle.sql
 otrs-schema-post.postgresql.sql
otrs-schema.mssql.sql               otrs-schema.xml
linux:/opt/otrs/scripts/database#
</screen>
</para>

<para>
<emphasis>Сценарий: Файлы, необходимые для создания и настройки базы
данных.</emphasis>
</para>

<para>
При установке базы данных, для различных СУБД существует свой, определенный
порядок обработки .sql-файлов.
</para>

<para>
<orderedlist numeration="arabic">
<title>Создание базы данных OTRS вручную, шаг за шагом</title>
<listitem>
<para>
Создание базы данных: Используя интерфейс базы данных или свой любимый
менеджер баз даных, создайте базу данных, которую планируете использовать
для OTRS.
</para>
</listitem>
<listitem>
<para>
Создание таблиц: Используя файлы otrs-schema.DatabaseType.sql (например
<filename>otrs-schema.oracle.sql</filename>,
<filename>otrs-schema.postgresql.sql</filename>) можно создать таблицы в
базе данных для OTRS.
</para>
</listitem>
<listitem>
<para>
Установка исходных данных системы: Чтобы OTRS работал должным образом,
необходимо установить некоторые исходные системные данные (например
различные состояния заявок, типы заявок и уведомлений). В зависимости от
типа выбраной вами базы данных используйте один из следующих файлов
<filename>otrs-initial_insert.mysql.sql</filename>,
<filename>otrs-initial_insert.oracle.sql</filename>,
<filename>otrs-initial_insert.postgresql.sql</filename> или
<filename>otrs-initial_insert.mssql.sql </filename>.
</para>
</listitem>
<listitem>
<para>
Создание связей между таблицами: Последний шаг - создание связей между
различными таблицами базы данных OTRS Для этого используйте файл
otrs-schema-post.DatabaseType.sql (например
<filename>otrs-schema-oracle.post.sql</filename>,
<filename>otrs-schema-post.postgresql.sql</filename>).
</para>
</listitem>
</orderedlist>
</para>

<para>
После завершения установки базы данных необходимо проверить и установить
соответствующие права доступа для базы данных OTRS. Сделать это необходимо
так, чтобы только один пользователь имел соответствующие права
доступа. Настройка прав доступа отличается в зависимости от выбраного вами
сервера базы данных и должна производится с помощью графического интерфейса
базы данных или с помощью программы клиента.
</para>

<para>
Если база данных и права доступа настроены правильно, то на следующем этапе
ее нужно подключить к OTRS. Откройте файл
<filename>Kernel/Config.pm</filename>, находящийся в домашнем каталоге
пользователя 'otrs' и измените параметры в соответствии с вашими
требованиями так, как это показанно в Сценарии ниже.
</para>

<para>
<programlisting>

    # DatabaseHost
    # (The database host.)
    $Self->{'DatabaseHost'} = 'localhost';

    # Database
    # (The database name.)
    $Self->{Database} = 'otrs';

    # DatabaseUser
    # (The database user.)
    $Self->{DatabaseUser} = 'otrs';

    # DatabasePw
    # (The password of database user.)
    $Self->{DatabasePw} = 'some-pass';

</programlisting>
</para>

<para>
<emphasis>Сценарий: Настраиваемые параметры</emphasis>
</para>

</section>

</section>

<section id="cronjobs">
<title>Настрой планировщика задач (cron jobs) для OTRS</title>

<para>
Для правильной работы системы OTRS необходим планировщик задач (cron
jobs). Планировщик задач (cron jobs) должен запускаться с теми же правами,
что и модули OTRS. Именно по этому cron jobs должен быть внесен в
crontab-файл пользователя 'otrs'.
</para>

<para>
Все сценарии с cron jobs находятся в директории
<filename>var/cron</filename> домашнего каталога пользователя 'otrs'
(см. Сценарий ниже).
</para>

<para>
<screen>
linux:~# cd /opt/otrs/var/cron
linux:/opt/otrs/var/cron# ls
aaa_base.dist                generic_agent.dist       rebuild_ticket_index.dist
cache.dist                   pending_jobs.dist        session.dist
fetchmail.dist               postmaster.dist          unlock.dist
generic_agent-database.dist  postmaster_mailbox.dist
linux:/opt/otrs/var/cron#
</screen>
</para>

<para>
<emphasis>Сценарий: Файлы, необходимые для создания заданий планировщика
задач (cron jobs).</emphasis>
</para>

<para>
Эти сценарии имеют расширение '.dist'. Их нужно скопировать в
соответствующие файлы без расширения. Если вы работаете в оболочке bash, то
можете воспользоваться командой из Сценария ниже.
</para>

<para>
<screen>
linux:/opt/otrs/var/cron# for foo in *.dist; do cp $foo `basename $foo .dist`; done
linux:/opt/otrs/var/cron# ls
aaa_base                generic_agent-database.dist  rebuild_ticket_index
aaa_base.dist           generic_agent.dist           rebuild_ticket_index.dist
cache                   pending_jobs                 session
cache.dist              pending_jobs.dist            session.dist
fetchmail               postmaster                   unlock
fetchmail.dist          postmaster.dist              unlock.dist
generic_agent           postmaster_mailbox
generic_agent-database  postmaster_mailbox.dist
linux:/opt/otrs/var/cron#
</screen>
</para>

<para>
<emphasis> Сценарий: Копирование и переименование всех файлов, необходимых
для создания заданий планировщика задач - cron jobs.</emphasis>
</para>

<para>
В Таблице 3-2 приводятся различные задания cron jobs.
</para>

<para>
<table id="table-of-cronjobs-for-otrs">
<title>Описание некоторых сценариев планировщика задач cron job.</title>
  <tgroup cols="2">
    <thead>
      <row>
        <entry>
          Сценарий
        </entry>
        <entry>
          Назначение
        </entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          aaa_base
        </entry>
        <entry>
          Определяет основные настройки для crontab пользователя 'otrs'.
        </entry>
      </row>
      <row>
        <entry>
          cache
        </entry>
        <entry>
          Удаляет из диска устаревшие ("просроченные") кэш-записи. Очищает
кэш-погрузчик для CSS и JavaScript файлов.
        </entry>
      </row>
      <row>
        <entry>
          fetchmail
        </entry>
        <entry>
          Этот сценарий может быть использован в том случае, если новые емейлы будут
поступать в систему обработки заявок через fetchmail.
        </entry>
      </row>
      <row>
        <entry>
          generic_agent
        </entry>
        <entry>
          Выполняет задания из GenericAgent, которые не сохраняются в базе данных, а в
собственных конфиг-файлах.
        </entry>
      </row>
      <row>
        <entry>
          generic_agent-database
        </entry>
        <entry>
          Выполняет задания из GenericAgent, которые хранятся в базе данных.
        </entry>
      </row>
      <row>
        <entry>
          pending_jobs
        </entry>
        <entry>
          Проверяет систему на наличие заявок, ожидающих решения, закрывает их или
отсылает напоминание, если это необходимо.
        </entry>
      </row>
      <row>
        <entry>
          postmaster
        </entry>
        <entry>
          Проверяет очередь сообщений системы обработки заявок, и доставляет те
сообщения, которые находятся в этой очереди.
        </entry>
      </row>
      <row>
        <entry>
          postmaster_mailbox
        </entry>
        <entry>
          Получает почту с POP3-счетов, которые были указаны в админке, в разделе
"Учетные записи PostMaster".
        </entry>
      </row>
      <row>
        <entry>
          rebuild_ticket_index
        </entry>
        <entry>
          Восстанавливает индекс заявки, что значительно повышает скорость просмотра
заявок в разделе QueueView.
        </entry>
      </row>
      <row>
        <entry>
          session
        </entry>
        <entry>
          Удаляет старые и больше не используемые ID-сессий (session IDs).
        </entry>
      </row>
      <row>
        <entry>
          unlock
        </entry>
        <entry>
          Открывает заявки, которые были ранее заблокированы в системе.
        </entry>
      </row>
    </tbody>
  </tgroup>
</table>
</para>

<para>
Чтобы настроить все задания cron jobs используйте скрипт
<filename>bin/Cron.sh</filename>, который находится в домашнем каталоге
пользователя 'otrs'. При запуске, скрипту нужно передать один из трех
параметров, указывающий на выполняемое действие: создание, удаление,
переустановка заданий. Допустимы следующие параметры:
</para>

<para>
<cmdsynopsis>
<command>Cron.sh</command> <arg choice='req'>
<replaceable>start</replaceable> </arg> <arg choice='req'>
<replaceable>stop</replaceable> </arg> <arg choice='req'>
<replaceable>restart</replaceable> </arg> <arg choice='opt'>
<replaceable>OTRS user</replaceable> </arg></cmdsynopsis>
</para>

<para>
Поскольку задания планировщика cron jobs должны быть установлены в
crontab-файле пользователя 'otrs', то нужно залогиниться как пользователь
'otrs'. Если вы вошли в систему как суперпользователь, с правами
администратора, и хотите изменить пользователя - используйте команду
<command>su otrs</command>. Для установки заданий cron jobs выполните
команды приведенные в Сценарии ниже.
</para>

<warning>
<para>
Обратите внимание, что при использовании файла <filename>Cron.sh</filename>
другие задания, установленные в crontab-файле для пользователя 'otrs' будут
перезаписаны или удалены. Внесите все необходимые изменения в файл
<filename>Cron.sh</filename>, чтобы сохранить другие crontab-задания.
</para>
</warning>

<para>
<screen>
linux:/opt/otrs/var/cron# cd /opt/otrs/bin/
linux:/opt/otrs/bin# su otrs
linux:~/bin$ ./Cron.sh start
/opt/otrs/bin
Cron.sh - start/stop OTRS cronjobs
Copyright (C) 2001-2009 OTRS AG, http://otrs.org/
(using /opt/otrs) done
linux:~/bin$ exit
exit
linux:/opt/otrs/bin#
</screen>
</para>

<para>
<emphasis>Сценарий: Установка cron jobs.</emphasis>
</para>

<para>
Команда <command>crontab -l -u otrs</command>, которую можно запускать с
правами администратора, отображает содержание crontab-файла пользователя
'otrs', так что можно легко проверить правильность расположения всех записей
(см. Сценарий ниже).
</para>

<para>
<screen>
linux:/opt/otrs/bin# crontab -l -u otrs
# --
# cron/aaa_base - base crontab package
# Copyright (C) 2001-2014 OTRS AG, http://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY.
# --
# Who gets the cron emails?
MAILTO="root@localhost"

# --
# cron/cache - delete expired cache
# Copyright (C) 2001-2014 OTRS AG, http://otrs.com/
# This software comes with ABSOLUTELY NO WARRANTY.
# --
# delete expired cache weekly (Sunday mornings)
20 0 * * 0  $HOME/bin/otrs.CacheDelete.pl --expired >> /dev/null
30 0 * * 0  $HOME/bin/otrs.LoaderCache.pl -o delete >> /dev/null

# --
# cron/fetchmail - fetchmail cron of the OTRS
# Copyright (C) 2001-2014 OTRS AG, http://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY.
# --
# fetch every 5 minutes emails via fetchmail
#*/5 * * * * /usr/bin/fetchmail -a &gt;&gt; /dev/null

# --
# cron/generic_agent - otrs.GenericAgent.pl cron of the OTRS
# Copyright (C) 2001-2014 OTRS AG, http://otrs.com/
# --
# --
# This software comes with ABSOLUTELY NO WARRANTY.
# --
# start generic agent every 20 minutes
*/20 * * * * $HOME/bin/GenericAgent.pl &gt;&gt; /dev/null
# example to execute GenericAgent.pl on 23:00 with
# Kernel::Config::GenericAgentMove job file
#0 23 * * * $HOME/bin/otrs.GenericAgent.pl -c "Kernel::Config::GenericAgentMove" &gt;&gt; /dev/null
# --
# cron/generic_agent - GenericAgent.pl cron of the OTRS
# Copyright (C) 2001-2014 OTRS AG, http://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY.
# --
# start generic agent every 10 minutes
*/10 * * * * $HOME/bin/otrs.GenericAgent.pl -c db &gt;&gt; /dev/null
# --
# cron/pending_jobs - pending_jobs cron of the OTRS
# Copyright (C) 2001-2014 OTRS AG, http://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY.
# --
# check every 120 min the pending jobs
45 */2 * * * $HOME/bin/otrs.PendingJobs.pl &gt;&gt; /dev/null
# --
# cron/postmaster - postmaster cron of the OTRS
# Copyright (C) 2001-2014 OTRS AG, http://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY.
# --
# check daily the spool directory of OTRS
10 0 * * *  $HOME/bin/otrs.ReprocessMails.pl >> /dev/null
# --
# cron/postmaster_mailbox - postmaster_mailbox cron of the OTRS
# Copyright (C) 2001-2014 OTRS AG, http://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY.
# --
# fetch emails every 10 minutes
*/10 * * * * $HOME/bin/otrs.PostMasterMailbox.pl &gt;&gt; /dev/null
# --
# cron/rebuild_ticket_index - rebuild ticket index for OTRS
# Copyright (C) 2001-2014 OTRS AG, http://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY.
# --
# just every day
01 01 * * * $HOME/bin/otrs.RebuildTicketIndex.pl &gt;&gt; /dev/null

# --
# cron/session - delete old session ids of the OTRS
# Copyright (C) 2001-2014 OTRS AG, http://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY.
# --
# delete every 120 minutes old/idle session ids
55 */2 * * * $HOME/bin/otrs.DeleteSessionIDs.pl --expired &gt;&gt; /dev/null

# --
# cron/unlock - unlock old locked ticket of the OTRS
# Copyright (C) 2001-2014 OTRS AG, http://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY.
# --
# unlock every hour old locked tickets
35 * * * * $HOME/bin/otrs.UnlockTickets.pl --timeout &gt;&gt; /dev/null

linux:/opt/otrs/bin#
</screen>
</para>

<para>
<emphasis>Сценарий: Файл Crontab.</emphasis>
</para>

</section>
<section id="installation-scheduler">

    <title>Планировщик OTRS</title>
    <para>
        Планировщик это отдельный процесс OTRS выполняющий асинхронные задания
    </para>
    <para>
        При установке из OTRS RPM сервис Планировщика устанавливается
автоматически. При установке из исходных кодов, его можно установить
копированием <filename>scripts/otrs-scheduler-linux</filename> файла в
<filename>/etc/init.d</filename> и назначив соответствующие права. Это
обеспечит запуск сервиса Планировщика при старте системы.
    </para>
</section>

</section>
