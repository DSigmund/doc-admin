<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">


<!-- $Id: process-management.xml,v 1.3 2012-11-26 09:18:36 mg Exp $ -->
<section id="process-management" >
<title>Process Management</title>

    <section>
        <title>Introduction</title>
        <para>
            This feature of OTRS allows you to model processes (workflows) in the ticket
system.  The basic idea is to be able to define reoccurring processes, and
to delegate work items to different people, as well as leading the progress
of a process in different directions based on certain criteria.
        </para>
    </section>
    <section>
        <title>Example process</title>
        <para>
            Давайте рассмотрим некий пример чтобы все было более наглядно и понятно. Мы
будем рассматривать процесс покупки книги:
        </para>

        <section>
            <title>Recording the demand</title>
            <para>
                Before an order will be placed, the demand for literature by an employee
will be recorded.  The following book is needed in our example:
            </para>
            <para>
                <screen>
Title: Prozessmanagement für Dummies
Autor: Thilo Knuppertz
ISBN: 3527703713
                </screen>
            </para>
        </section>

        <section>
            <title>Approval by superior</title>
            <para>
                The head of the employee's department needs to decide on the order.  In case
of a denial, a reason should be recorded by the superior.  In case of
approval, the order is passed to the purchasing department.
            </para>
        </section>

        <section>
            <title>Processing by purchasing department</title>
            <para>
                Purchasing now has the task to find out where the book can be ordered with
the best conditions.  If it is out of stock, this can be recorded in the
order.  In case of a successful order purchasing will record the supplier,
the price and the delivery date.
            </para>
        </section>

        <section>
            <title>Processing by the mailroom</title>
            <para>
                The shipment will arrive at the company. The incoming goods department
checks the shipment and records the date of receipt.  Now the employee will
be informed that their order has arrived and is ready to be collected.
            </para>
        </section>
    </section>

    <section>
        <title>Выполнение примера</title>
        <para>
            If we assume that a ticket acts in this workflow like an accompanying
document that can receive change notes, we already have a clear picture of
process tickets.
        </para>
        <para>
            From the analysis of the example process we can identify the following
neccessary items:
        </para>
        <para>
            <itemizedlist>
                <listitem><para>Possiblities to record data, let's call them <emphasis>Activity
Dialogs</emphasis>,</para></listitem>
                <listitem><para>checks which can react to changed data automatically, let's call them
<emphasis>Transitions</emphasis>,</para></listitem>
                <listitem><para>changes which can be applied to a process ticket after successful
transitions of a process ticket, let's call them <emphasis>Transition
Actions</emphasis>.</para></listitem>
            </itemizedlist>
        </para>
        <para>
            We also need an additional item which might not be as obvious:
        </para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>
                        A possibility to offer more than just one Activity Dialog to be available.
In our example this is needed when the superior must have the choice between
"Approve" and "Deny".  Let's call this <emphasis>Activity</emphasis>.
                </para></listitem>
            </itemizedlist>
        </para>

        <para>
            Now, with Activities, Activity Dialogs, Transitions and Transition Actions
we have the neccessary tools to model the individual steps of our example.
To be able to refer to these entities later, we will assign to them an
abbreviation in parentheses.
        </para>

        <para>
            What's still missing is an area where for each workflow the order of the
steps can be specified.  Let's call this <emphasis>Process</emphasis>.
        </para>

        <para>
            In the next step, we will define the individual entities that we need.
        </para>

        <section>
            <title>Диалоги Действий</title>
                <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            "Recoding the demand" (AD1): An Activity Dialog that contains all the
required fields for the data to be collected for the order (Title, Author
and ISBN), and a status field with the possibility to choose "Approval".
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            "Approval denied" (AD2): An Activity Dialog with a comment field and a
status field with the option "Approval denied".
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            "Approved " (AD3): Here we just need the status field with the option
"Approved".
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            "Order rejected" (AD4): An activity dialog which makes it possible for
purchasing to reject an impossible order (book out of stock).  Here we also
need a comment field and the status field with the option "Order denied".
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            "Order placed" (AD5): An activity dialog with the fields supplier, price and
delivery date for purchasing and the status field with the option "Order
placed".
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            "Shipment received" (AD6): An activity for the mailroom with a field for the
date of receipt and the status field with the option "Shipment received".
                        </para>
                    </listitem>
                </itemizedlist>
                </para>
        </section>
        <section>
            <title>Transitions</title>
                <para>
                <itemizedlist>
                    <listitem>
                        <para>"Approval" (T1): A transition which checks if the status field is set to
"Approval".</para>
                    </listitem>
                    <listitem>
                        <para>"Approval denied" (T2): A transition which checks if the status field is set
to "Approval denied".</para>
                    </listitem>
                    <listitem>
                        <para>"Approved" (T3): A transition which checks if the status field is set to
"Approved".</para>
                    </listitem>
                    <listitem>
                        <para>"Order denied" (T4): A transition which checks if the status field is set to
"Order denied".</para>
                    </listitem>
                    <listitem>
                        <para>"Order placed" (T5): A transition which checks if the status field is set to
"Order placed".</para>
                    </listitem>
                    <listitem>
                        <para>"Shipment received" (T6): A transition which checks if the status field is
set to "Shipment received".</para>
                    </listitem>
                </itemizedlist>
                </para>
        </section>
        <section>
            <title>TransitionActions</title>
                <para>
                <itemizedlist>
                    <listitem>
                        <para>Move the process ticket into the "Superior" queue. (TA1): This action is
supposed to be executed when the Transition "Approval" (T1) applied.</para>
                    </listitem>
                    <listitem>
                        <para>Change ticket responsible to "Superior". (TA2): To be executed when the
Transition "Approval" (T1) applied.</para>
                    </listitem>
                    <listitem>
                        <para>Move the process ticket into the "Employee" queue. (TA3): To be executed
when:</para>
                        <itemizedlist>
                            <listitem><para>
                            the Transition "Approval denied" (T2) applied
                            </para></listitem>
                            <listitem><para>
                            the Transition "Order denied" (T4) applied
                            </para></listitem>
                            <listitem><para>
                            the Transition "Shipment received" (T6) applied
                            </para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para>Change ticket responsible to "Employee". (TA4): To be executed when:</para>
                        <itemizedlist>
                            <listitem><para>
                            the transition "Approval denied" (T2) applied
                            </para></listitem>
                            <listitem><para>
                            the transition "Order denied" (T4) applied
                            </para></listitem>
                            <listitem><para>
                            the transition "Shipment received" (T6) applied
                            </para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para>Move process ticket into the "Purchasing" queue. (TA5): To be executed when
the transition "Approved" (T3) applied.</para>
                    </listitem>
                    <listitem>
                        <para>Move process ticket into the "Post office" queue. (TA6): To be executed when
the transition "Order placed" (T5) applied.</para>
                    </listitem>
                </itemizedlist>
                </para>
                <para>
                    As you can see, there are places where the same TransitionAction should be
executed.  Therefore it is reasonable to make it possible to link
TransitionActions freely with Transitions to be able to reuse them.
                </para>
        </section>
        <section>
            <title>Деятельность</title>
            <para>
                We chose the approach to see Activities as a basket which can contain one or
more Activity Dialogs.  We need these Activities for our example:
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Recording the demand (A1): Contains the Activity Dialog "Recording the
demand"</para>
                    </listitem>
                    <listitem>
                        <para>Approval (A2): Contains the Activity Dialogs "Approval denied" as well as
"Approved"</para>
                    </listitem>
                    <listitem>
                        <para>Order (A3): Contains the Activity Dialogs "Order denied" as well as "Order
placed"</para>
                    </listitem>
                    <listitem>
                        <para>Incoming (AS): Contains the Activity Dialog "Shipment received"</para>
                    </listitem>
                    <listitem>
                        <para>Process complete (A5): This is an Activity without possible
ActivityDialogs.  It will be set after "Approval denied", "Order denied" or
"Shipment received" and represents the end of the process.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                Now we can clearly see that Activities are precisely defined states of a
process ticket.  After a successful Transition a process ticket moves from
one Activity to another.
            </para>
        </section>

        <section>
            <title>Book ordering Process</title>
            <para>
                Let us conclude our example with the last missing piece in the puzzle, the
Process.  In our case this is the whole ordering workflow. Other processes
could be office supply ordering or completely different processes.
            </para>

            <para>
                The process has a starting point which consists of the start Activity and
the start Activity Dialog.  For any new book order, the start Activity
Dialog is the first screen that is displayed.  If this is completed and
saved, the Process ticket will be created and can follow the configured
workflow.
            </para>

            <para>
                The process also contains the directions for how the process ticket can move
through the Process. Let's call this the "Path". It consists of the start
Activity, one or more Transitions (possibly with Transition Actions), and
other Activities.
            </para>
            <para>Recording the demand until "Approval"</para>
            <para>
            <itemizedlist>
                <listitem>
                    <para>Starting point: Activity A1 (Recording the demand)</para>
                </listitem>
                <listitem>
                    <para>Possible Transition: T1 (Approval)</para>
                    <itemizedlist>
                        <listitem>
                            <para>If the condition of this activity is fulfilled, the ticket will move to
Activity A2 (Approval)</para>
                        </listitem>
                        <listitem>
                            <para>Additionally, the following TransitionActions are executed:</para>
                            <itemizedlist>
                                <listitem>
                                    <para>TA1 (Moving the ticket into the "Superior" Queue)</para>
                                </listitem>
                                <listitem>
                                    <para>TA2 (Set ticket responsible to "Superior")</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            </para>
            <para>
                That's the first step in the path of the book ordering process. It looks
like this (slightly simplified):
            </para>
            <para>
                <screen>
                'A1' => {
                    'T1' => {
                        ActivityEntityID => 'A2',
                        TransitionAction => [ 'TA1', 'TA2',],
                    },
                },
                </screen>
            </para>
            <para>
                Action 'A1' is a defined state of the process ticket, where there is the
possibility for the Transition 'T1'.  If this applies, the ticket will move
to the next Activity 'A2', and the TransitionActions 'TA1' and 'TA2' are
executed.  In Activity 'A2', the Activity Dialogs 'AD2' (Approval denied)
and 'AD3' (Approved) are available.
            </para>
            <para>Утверждение</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Starting Point: Activity A2 (Approval)</para>
                    </listitem>
                    <listitem>
                        <para>Possible Transitions:</para>
                            <itemizedlist>
                                <listitem>
                                    <para>T2 (Approval denied)</para>
                                    <itemizedlist>
                                        <listitem>
                                        <para>
                                            If this matches, the process ticket will move to Activity A5 (Process
complete).
                                        </para>
                                        </listitem>
                                        <listitem>
                                        <para>Additionally, the following TransitionActions are executed:</para>
                                        <itemizedlist>
                                        <listitem>
                                            <para>TA3 (перемещение заявки в Очередь "Employee")</para>
                                        </listitem>
                                        <listitem>
                                            <para>TA4 (установить ответственность за Заявку за "Employee")</para>
                                        </listitem>
                                        </itemizedlist>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                                <listitem>
                                    <para>T3 (Утвержден)</para>
                                    <itemizedlist>
                                        <listitem>
                                        <para>
                                            If this matches, the process ticket will move to Activity A3 (Order).
                                        </para>
                                        </listitem>
                                        <listitem>
                                            <para>Additionally, the following TransitionAction is executed:</para>
                                            <itemizedlist>
                                            <listitem>
                                                <para>TA5 (move process ticket to "Purchasing" Queue)</para>
                                            </listitem>
                                            </itemizedlist>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                            </itemizedlist>
                    </listitem>
                </itemizedlist>
            </para>
            <para>Simplified representation:</para>
            <para>
                <screen>
            'A2' => {
                'T2' => {
                    ActivityEntityID => 'A5',
                    TransitionAction => [ 'TA3', 'TA4'],
                },
                'T3' => {
                ActivityEntityID => 'A3',
                    TransitionAction => [ 'TA5'],
                    }
            },
                </screen>
            </para>
            <para>The path for these two steps together looks like this:</para>
            <para>
                <screen>
            Path => {
                'A1' => {
                    'T1' => {
                        ActivityEntityID => 'A2',
                        TransitionAction => [ 'TA1', 'TA2'],
                    },
                },
                'A2' => {
                    'T2' => {
                        ActivityEntityID => 'A5',
                        TransitionAction => [ 'TA3', 'TA4'],
                    },
                    'T3' => {
                        ActivityEntityID => 'A3',
                        TransitionAction => [ 'TA5'],
                    },
                },
            },
                </screen>
            </para>
            <para>
                We can see that from the current Activity, which defines a state of the
process ticket, there are one or more possibilities for Transition which
have exactly one target Activity (and possibly one or more
TransitionActions).
            </para>
            <para>
                The complete Path for the book ordering Process will then look like this:
            </para>
            <para>
                    <screen>
            Path => {
                'A1' => {
                    'T1' => {
                        ActivityEntityID => 'A2',
                        TransitionAction => [ 'TA1', 'TA2'],
                    },
                },
                'A2' => {
                    'T2' => {
                        ActivityEntityID => 'A5',
                        TransitionAction => [ 'TA3', 'TA4'],
                    },
                    'T3' => {
                        ActivityEntityID => 'A3',
                        TransitionAction => [ 'TA5'],
                    },
                },
                'A3' => {
                    'T4' => {
                        ActivityEntityID => 'A5',
                        TransitionAction => [ 'TA3', 'TA4'],
                    },
                    'T5' => {
                        ActivityEntityID => 'A4',
                        TransitionAction => [ 'TA6'],
                    },
                }
                'A4' => {
                    'T6' => {
                        ActivityEntityID => 'A5',
                        TransitionAction => [ 'TA3', 'TA4'],
                    },
                },
            },
                    </screen>
                </para>
            </section>
    </section>


<!--
    <section>

        <title>Process configuration reference</title>



        <section>
            <title>Process</title>
            <para>
                A Process models the path of a workflow/process. The waypoints on
                this path can be Activities or Tranistions, we'll talk about these later.
            </para>
            <section>
                <title>Process configuration</title>
                <para>
                    The Process configuration can only be done in the file <filename>Kernel/Config.pm</filename> at this point.
                    Let's see an example process configuration:
                </para>
                <para>
                    <screen>
$Self->{'Process'}   =
{
    'P1' => {
        Name       => 'Book order',
        CreateTime => '16-02-2012 13:37:00',
        CreateBy   => '1',
        ChangeTime => '17-02-2012 13:37:00',
        ChangeBy   => '1',
        State      => 'Active',
        StartActivity => 'A1',
        StartActivityDialog => 'AD1',
        Path       => {
            'A1' => {
                'T1' => {
                    ActivityEntityID => 'A2',
                },
            },
            'A2' => {
                'T2' =>  {
                    ActivityEntityID => 'A3',
                },
            },
        },
    },
    'P2' => {
        Name       => 'IT order',
        CreateTime => '26-02-2012 13:37:00',
        CreateBy   => '1',
        ChangeTime => '27-02-2012 13:37:00',
        ChangeBy   => '1',
        State      => 'Active',
        StartActivity => 'A2',
        StartActivityDialog => 'AD2',
        Path       => {
            'A2' => {
                'T3' => {
                    ActivityEntityID => 'A4',
                },
            },
        },
    }
};
                    </screen>
                </para>
            </section>
            <section>
                <title>Name</title>
                <para>
                    The name of the process, this can be selected by the agent when creating a new process ticket.
                </para>
            </section>
            <section>
                <title>CreateTime</title>
                <para>
                    The time when the process was created.
                </para>
            </section>
            <section>
                <title>CreateBy</title>
                <para>
                    The UID of the user creating the process.
                </para>
            </section>
            <section>
                <title>ChangeTime</title>
                <para>
                    The time when the process was changed.
                </para>
            </section>
            <section>
                <title>ChangeBy</title>
                <para>
                    The UID of the user who made the last change to the process.
                </para>
            </section>
            <section>
                <title>State</title>
                <para>
                    Defines the state of a process. Possible values:
                    <itemizedlist>
                        <listitem>
                            <para>
                                'Active' are all processes which can be used in new process tickets.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'FadeAway' are processes which cannot be selected any more for new tickets,
                                but existing tickets still can use the process.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'Inactive' processes are deactivated and cannot be used for new or existing tickets.
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </section>
            <section>
                <title>StartActivity</title>
                <para>
                    When creating a new process ticket, a StartActivity must be defined. As soon as the ticket is created,
                    this Activity will be set and used as the base for the first transition checks.
                </para>
            </section>
            <section>
                <title>StartActivityDialog</title>
                <para>
                    For new process tickets, a StartActivityDialog must be defined. This will be shown when creating
                    a new process ticket (after the process was selected). At this point, the ticket does not exist yet,
                    it will be created after submitting the StartActivityDialog.
                </para>
            </section>
            <section>
                <title>Path</title>
                <para>
                    The Path contains the structure of the Activities and the possible Transitions between
                    them, for the current process. This controls the way that a process ticket can take. Example:
                </para>
                <para>
                <screen>
'A1' => {
    'T1' => {
        ActivityEntityID => 'A2',
    },
    'T2' => {
        ActivityEntityID => 'A3',
    },
    'T3' => {
        ActivityEntityID => 'A4',
        TransitionAction => ['TA1', 'TA2'],
    },
},
                </screen>
                </para>
                <para>
                    If a process ticket is in Activity 'A1', it has three possible ways to get to another Activity.
                    In the Transitions 'T1' to 'T3', conditions are defined, that a process ticket must fulfil to
                    move (transit) to another Activity.
                </para>
                <para>
                    If in this case all the values of the process ticket and its dynamic fields that are needed for the
                    Transition 'T2' are correct, the ticket will be moved from Activity 'A1' to 'A3'. After an ActivityDialog
                    is submitted, or any other change is made to a ticket, it will be checked for possible Transitions from
                    the current Activity. If multiple Transitions are possible, the first one will be used (based on nummerical
                    sorting of the TransitionIDs).
                </para>
                <para>
                    Additionally, it is possible to assign TransitionActions to Transitions in the Path configuration.
                    These are modules which are executed after a successful Transition. They have to be specified in array form
                    as in the example, we'll talk about the details later.
                </para>
            </section>
        </section>



        <section>
            <title>Activity</title>
            <para>
                An Activity contains one or more ActivityDialogs and models a 'step' in the process.
                All ActivityDialogs of the current Activity are displayed in the ticket zoom and can be
                used until the conditions of a Transition are fulfilled.
            </para>
            <section>
            <title>Activity configuration</title>
            <para>
                Let's see an example activity configuration:
            </para>
            <para>
                <screen>
$Self->{'Process::Activity'} =
{
    'A1' => {
        Name       => 'Activity 1 optional',
        CreateTime => '16-02-2012 13:37:00',
        CreateBy   => '1',
        ChangeTime => '17-02-2012 13:37:00',
        ChangeBy   => '1',
        ActivityDialog => {
            1 => 'AD1',
        },
    },
    'A2' => {
        Name       => 'Activity 2 optional',
        CreateTime => '16-02-2012 13:37:00',
        CreateBy   => '1',
        ChangeTime => '17-02-2012 13:37:00',
        ChangeBy   => '1',
        ActivityDialog => {
            1 => 'AD5',
            2 => 'AD6',
            3 => 'AD1',
        },
    },
};
                </screen>
            </para>
            </section>
            <section>
                <title>Name</title>
                <para>
                    The name of the activity.
                </para>
            </section>
            <section>
                <title>CreateTime</title>
                <para>
                    The time when it was created.
                </para>
            </section>
            <section>
                <title>CreateBy</title>
                <para>
                    UID of the user who created the Activity.
                </para>
            </section>
            <section>
                <title>ChangeTime</title>
                <para>
                    The last time when it was changed.
                </para>
            </section>
            <section>
                <title>ChangeBy</title>
                <para>
                    UID of the last user who changed the Activity.
                </para>
            </section>
            <section>
                <title>ActivityDialog</title>
                <para>
                    ActivityDialog contains the list of ActivityDialogs which are available in this Activity.
                    All ActivityDialogs of the current Activity are displayed in the ticket zoom. Their order is
                    set by the order in the configuration, here 'AD5' is shown before 'AD6' and 'AD1'.
                </para>
            </section>
        </section>



        <section>
            <title>ActivityDialog</title>
            <para>
                An ActivityDialog is a particular screen and can be used in different Activities.
            </para>
            <section>
                <title>ActivityDialog configuration</title>
                <para>
                    Let's see an example config
                </para>
                <para>
                    <screen>
$Self->{'Process::ActivityDialog'} = {
    'AD1' => {
        Name => 'ActivityDialog 1 optional',
        DescriptionShort => 'Basic info',
        DescriptionLong  => 'Please insert the necessesary basic information for IT orders',
        CreateTime => '28-02-2012 13:37:00',
        CreateBy => '1',
        ChangeTime => '29-02-2012 13:37:00',
        ChangeBy => '1',
        Fields => {
            PriorityID => {
                DescriptionShort => 'Priority ID',
                DescriptionLong  => 'Enter the priority here',
                Display => 2,
            },
        },
        FieldOrder       => [ 'PriorityID' ],
        SubmitAdviceText => 'Note: If you submit the form...',
        SubmitButtonText => 'Send request',
    },
    'AD2' => {
        Name => 'ActivityDialog 2 optional',
        DescriptionShort => 'Basic info',
        DescriptionLong  => 'Please insert the necessesary basic information for Book orders',
        CreateTime => '28-02-2012 13:37:00',
        CreateBy => '1',
        ChangeTime => '29-02-2012 13:37:00',
        ChangeBy => '1',
        Fields => {
            StateID => {
                DescriptionShort    => 'State ID',
                DescriptionLong     => 'Enter the state here',
                Display             => 2,
                DefaultValue        => '2',
            },
            Queue => {
                DescriptionShort    => 'Queue ID',
                DescriptionLong     => 'Enter the queue here',
                Display             => 2,
                DefaultValue        => 'Raw',
            },
            Title => {
                DescriptionShort    => 'Title',
                DescriptionLong     => 'Enter the title here',
                Display             => 1,
                DefaultValue        => 'Default Title',
            },
            DynamicField_Anzahl => {
                DescriptionShort    => 'Amount',
                DescriptionLong     => 'Enter the amount here',
                Display             => 2,
                DefaultValue        => '4',
            },
        },
        FieldOrder       => [ 'DynamicField_Anzahl', 'StateID', 'Queue', 'Title' ],
        SubmitAdviceText => 'Note: If you submit the form...',
        SubmitButtonText => 'Send request',
    },
};
                    </screen>
                </para>
            </section>
            <section>
                <title>Name</title>
                <para>
                    Name of the ActivityDialog.
                </para>
            </section>
            <section>
                <title>CreateTime</title>
                <para>
                    Time when it was created.
                </para>
            </section>
            <section>
                <title>CreateBy</title>
                <para>
                    UID of the user who created this ActivityDialog.
                </para>
            </section>
            <section>
                <title>ChangeTime</title>
                <para>
                    Last time when it was changed.
                </para>
            </section>
            <section>
                <title>ChangeBy</title>
                <para>
                    UID of the last user who changed this ActivityDialog.
                </para>
            </section>
            <section>
                <title>Fields</title>
                <para>
                    Contains all fields which can be displayed in this ActivityDialog.
                    The following fields can currently be used:
                </para>
                <para>
                    <screen>
Title
State
StateID
Priority
PriorityID
Lock
LockID
Queue
QueueID
Customer
CustomerID
CustomerNo
CustomerUserID
Owner
OwnerID
Type
TypeID
SLA
SLAID
Service
ServiceID
Responsible
ResponsibleID
PendingTime
DynamicField_$FieldName  # for all dynamic fields
                    </screen>
                </para>
                <para>
                    Example of a single field configuration:
                </para>
                <para>
                    <screen>
StateID => {
    DescriptionShort    => 'State ID',
    DescriptionLong     => 'Enter the state here',
    Display             => 2,
    DefaultValue        => '2',
},
                    </screen>
                </para>
                <para>
                    The field "Article" is a special case. If it is present in a "Fields" configuration, the ActivityDialog
                    will contain a complete Richtext editor with subject field and attachment handling.
                    The entered text will then be added to the ticket as an article and sent by email.
                    Let's see an example Article field configuration:
                    <screen>
Article => {
    DescriptionShort => 'Please insert your comment here.',
    DescriptionLong => '',
    Display         => 1,
    Config          => {
        ArticleType  => 'note-internal',
        LabelSubject => '',
        LabelBody    => '',
    },
},
                    </screen>
                </para>
                <para>
                    Let's look at the field configuration options:
                </para>
                <section>
                    <title>DescriptionShort</title>
                    <para>
                        Optional short description that is shown with the field title.
                    </para>
                </section>
                <section>
                    <title>DescriptionLong</title>
                    <para>
                        Optional longer field description that is shown then the mouse is over the field,
                        for example advice on how to fill out the field.
                    </para>
                </section>
                <section>
                    <title>Display</title>
                    <para>
                        Controls if the field is shown and/or mandatory.
                        Possible values:

                        <itemizedlist>
                            <listitem>
                                <para>
                                    '0': field is invisible. This can be helpful if field values should automatically be set.
                                    The configured DefaultValue will be stored in this case.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    '1': field is visible, but optional.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    '2': field is visible and mandatory.
                                    The following fields can only be invisible or mandatory:
                                    <screen>
    QueueID
    Qeue
    StateID
    State
    Lock
    LockID
    Priority
    Priority
                                </screen>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                    <para>
                        If fields are configured as optional, and no value is submitted by the user, the DefaultValue
                        will be saved when the ActivityDialog is submitted by the user.
                    </para>
                </section>
                <section>
                    <title>DefaultValue</title>
                    <para>
                        For fields with 'ID' (like QueueID, OwnerID), this refers to the database ID of the value.
                        For other fields without 'ID' (like Queue, Owner), the DefaultValue must contain the value itself. Example:
                    </para>
                    <para>
                        <screen>
Queue => {
    DescriptionShort    => 'Queue',
    DescriptionLong     => 'Enter the queue here',
    Display             => 2,
    DefaultValue        => 'Raw',
},
                        </screen>
                    </para>
                </section>
            </section>
            <section>
                <title>FieldOrder</title>
                <para>
                    Here the display order of the fields is configured.
                    IMPORTANT: Invisible fields also must be configured here, because only configured fields will be considered
                    when saving. Fields which are not configured will not be saved.
                </para>
            </section>
            <section>
                <title>SubmitAdviceText</title>
                <para>
                    Optional text to be shown right above the submit botton for additional help or advice text.
                </para>
            </section>
            <section>
                <title>SubmitButtonText</title>
                <para>
                    Optional custom text for the submit button.
                </para>
            </section>
        </section>



        <section>
            <title>Transition</title>
            <para>
                A Transition decides - based on configurable conditions - which path in the Process
                is taken, i. e. to which Activity a Process ticket can be moved.
            </para>
            <section>
                <title>Transition configuration</title>
                <para>
                    Let's see an example:
                </para>
                <para>
                    <screen>
$Self->{'Process::Transition'} = {
    'T1' => {
        Name => 'Transition 1',
        CreateTime => '14-03-2012 13:37:00', # optional
        CreateBy => '1', # optional
        ChangeTime => '15-03-2012 13:37:00', # optional
        ChangeBy => '15-03-2012 13:37:00', # optional
        Condition => {
            Cond1 => {
                Fields => {
                    StateID => {
                        Type => 'String',
                        Match => '1',
                    },
                },
            },
        },
    },
    'T2' => {
        Name => 'Transition 2 optional',
        CreateTime => 'DATE', # optional
        CreateBy => 'USERID', # optional
        ChangeTime => 'DATE', # optional
        ChangeBy => 'USERID', # optional
        Condition => {
            Cond1 => {
                Queue => 'Raw',
                DynamicField_Farbe => '2',
                DynamicField_Anzahl => '1',
            },
        },
    },
};
                    </screen>
                </para>
            </section>
            <section>
                <title>Name</title>
                <para>
                    Name of the transition.
                </para>
            </section>
            <section>
                <title>CreateTime</title>
                <para>
                    Time when it was created.
                </para>
            </section>
            <section>
                <title>CreateBy</title>
                <para>
                    UID of the user who created this Transition.
                </para>
            </section>
            <section>
                <title>ChangeTime</title>
                <para>
                    Last time when it was changed.
                </para>
            </section>
            <section>
                <title>ChangeBy</title>
                <para>
                    UID of the last user who changed this Transition.
                </para>
            </section>
            <section>
                <title>Condition</title>
                <para>
                    Contains all conditions that are neccessary for this Transition to take effect. Example:
                </para>
                <para>
                    <screen>
Condition => {
    Type => 'and',
    Cond1 => {
        Type => 'and',
        Fields => {
            StateID => {
                Type => 'String',
                Match => '1',
            },
            DynamicField_Marke => {
                Type => 'String',
                Match => 'VW',
        },
    },
    Cond2 => {
        Type => 'and',
        Fields => {
            Queue => {
                Type => 'String',
                Match => 'Raw',
            },
        },
    },
},
                    </screen>
                </para>
                <para>
                    Let's look at the condition configuration in detail.
                </para>
                <section>
                    <title>Type (Condition)</title>
                    <para>
                        Specifies the way the different condition elements are connected to each other.
                        Possible values:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    'and': This is the default. All conditions must be met for the transition
                                    to take effect.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    'or': At least one condition must match.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    'xor': Exactly one condition must match, not more.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </section>
                <section>
                    <title>Cond1</title>
                    <para>
                        This is the name of an example condition. It can be freely choosen. Conditions are evaluated
                        in sorted order.
                    </para>
                </section>
                <section>
                    <title>Type (Cond)</title>
                    <para>
                        Specifies the way how the individual field tests of this condition are connected to each other.
                        Possible values:

                        <itemizedlist>
                            <listitem>
                                <para>
                                    'and': This is the default. All field tests must match for this condition to match.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    'or': At least one field test must match.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    'xor': Exactly one field test must match, not more.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </section>
                <section>
                    <title>Fields</title>
                    <para>
                        Specifies the particular fields whose values should be tested. From our example:
                        <screen>
Fields => {
    StateID => {
        Type => 'String',
        Match => '1',
    },
                        </screen>
                    </para>
                </section>
                <section>
                    <title>StateID</title>
                    <para>
                        Example of a field name. The following ticket fields can be used:
                        <screen>
Title
State
StateID
Priority
PriorityID
Lock
LockID
Queue
QueueID
Customer
CustomerID
CustomerNo
CustomerUserID
Owner
OwnerID
Type
TypeID
SLA
SLAID
Service
ServiceID
Responsible
ResponsibleID
PendingTime
DynamicField_$FieldName # for all DynamicFields
                        </screen>
                    </para>
                    <para>
                        When testing a field with 'ID' (like SLAID), the database ID of the field will be used for testing,
                        for other fields (like SLA) the actual value is used for testing.
                    </para>
                </section>
                <section>
                    <title>Type</title>
                    <para>
                        Determines the kind of field testing. Possible values:

                        <itemizedlist>
                            <listitem>
                                <para>
                                    'String': Compares the field value with the string specified in 'Match'. Matches
                                    if they are exactly the same.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    'Hash': Compares the field value (hash) with the hash specified in 'Match'.
                                    All hash values must be the same.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    'Array': Compares the field value (array) with the array specified in 'Match'.
                                    Both lists must be the same.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    'Regex': The field value can be tested with a regular expression. It is important that
                                    'Match' contains qr{}xms as a base condition. Between the braces the actual regular expression
                                    can be noted.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    'Module': Allows you to use a perl module for condition checking. If it returns 1, the check
                                    was positive. You can find an example module in
                                    <filename>Kernel/System/ProcessManagement/TransitionValidation/ValidateDemo.pm</filename>.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </section>
            </section>
        </section>



        <section>
            <title>TransitionActions</title>
            <para>
                TransitionActions sind Erweiterungen des OTRSTicketProcesses die nach erfolgreich durchgeführten Transitions angestoßen werden.
                Über TransitionActions können alle möglichen Veränderungen am Auftragsticket wie z.b. Queue Move oder Owner Change durchgeführt werden.
                Weiters lassen sich auf Wunsch TransitionActions erstellen die Emails versenden können oder andere automatisierbare Vorgänge
                nach erfolgreicher Transition durchführen.
            </para>
            <section>
                <title>TransitionAction Konfiguration</title>
                <para>
                    Die TransitionAction Konfiguration kann zum aktuellen Zeitpunkt nur in der Kernel -> Config.pm erstellt werden.
                    Eine Beispielkonfiguration:
                </para>
                <para>
                    <screen>
            $Self->{'Process::TransitionAction'} = {
                'TA1' => {
                    Name => 'Queue Move',
                    Module => 'Kernel::System::ProcessManagement::TransitionAction::QueueMove',
                    Config => {
                        TargetQueue => 'Junk',
                    },

                },
            };
                    </screen>
                </para>
            </section>
            <section>
                <title>Name</title>
                <para>
                    Gibt den Namen der TransitionAction an.
                </para>
            </section>
            <section>
                <title>Module</title>
                <para>
                    Hier ist der Pfad zum .pm File anzugeben in Perl Modulnotation.
                </para>
            </section>
            <section>
                <title>Config</title>
                <para>
                    Dies ist der Parameter in dem alle für das Modul benötigten Einstellungen gesetzt werden.
                    Was hier konfiguriert wird, hängt von den Anforderungen des jeweiligen TransitionAction Moduls ab.
                    Siehe hierzu die Dokumentation der einzelnen TransitionAction Module. Im obigen Beispiel des
                    QueueMove ist nur die Angabe der TargetQueue nötig.
                </para>
            </section>
            <section>
                <title>TransitionAction Module mehrfach verwenden</title>
                <para>
                    Um TransitionActionmodule wiederverwendbar zu machen, geben Sie einfach mehrere TransitionActions in der Konfiguration an.
                    Beispiel:
                </para>
                <para>
                    <screen>
            $Self->{'Process::TransitionAction'} = {
                'TA1' => {
                    Name => 'Queue Move Junk',
                    Module => 'Kernel::System::ProcessManagement::TransitionAction::QueueMove',
                    Config => {
                        TargetQueue => 'Junk',
                    },

                },
                'TA2' => {
                    Name => 'Queue Move Raw',
                    Module => 'Kernel::System::ProcessManagement::TransitionAction::QueueMove',
                    Config => {
                        TargetQueue => 'Raw',
                    },

                },
            };
                    </screen>
                </para>
                <para>
                    Hier wird das gleiche Modul einmal zum Verschieben eines Auftragstickets in die 'Raw', einmal zum
                    Verschieben eines Auftragstickets in die 'Junk' Queue verwendet. Welche TransitionAction durchgeführt werden soll,
                    ist in der Path Einstellung der Process configuration zu setzen.
                </para>
            </section>
        </section>
        <section>
            <title>Verwendbare TransitionActions</title>
            <para>
                Mit OTRSTicketProcesses werden mehrere bereits verwendbare TransitionActions mitgeliefert.
                Im folgen finden Sie die Dokumentation zu diesen Modulen und was Sie konfigurieren
                müssen um diese einzusetzen.
            </para>
            <section>
                <title>ArticleCreate</title>
                <para>
                    Diese TransitionAction erstellt einen Auftragsticket Artikel und kann für die Notizerstellung sowie
                    Email Antworten herangezogen werden. Eine Beispielkonfiguration:
                </para>
                <para>
                    <screen><![CDATA[
            $Self->{'Process::TransitionAction'} = {
                'TA1' => {
                    Name   => 'Article Create Note Internal',
                    Module => 'Kernel::System::ProcessManagement::TransitionAction::ArticleCreate',
                    Config => {
                        ArticleType => 'note-internal',    # email-external|email-internal|phone|fax|...
                        SenderType  => 'agent',            # agent|system|customer
                        ContentType =>
                            'text/plain; charset=ISO-8859-15',    # or optional Charset & MimeType
                        Subject     => 'some short description',  # required
                        Body        => 'the message text',        # required
                        HistoryType => 'OwnerUpdate'
                        ,    # EmailCustomer|Move|AddNote|PriorityUpdate|WebRequestCustomer|...
                        HistoryComment => 'Some free text!',
                        From           => 'Some Agent <email@example.com>',    # not required but useful
                        To      => 'Some Customer A <customer-a@example.com>', # not required but useful
                        Cc      => 'Some Customer B <customer-b@example.com>', # not required but useful
                        ReplyTo => 'Some Customer B <customer-b@example.com>', # not required
                        InReplyTo => '<asdasdasd.12@example.com>',             # not required but useful
                        References => '<asdasdasd.1@example.com> <asdasdasd.12@example.com>'
                        ,                                                      # not required but useful
                        NoAgentNotify => 0,    # if you don't want to send agent notifications
                        AutoResponseType =>
                            'auto reply', # auto reject|auto follow up|auto reply/new ticket|auto remove

                        ForceNotificationToUserID => [ 1, 43, 56 ],    # if you want to force somebody
                        ExcludeNotificationToUserID => [ 43, 56 ],
                             # if you want full exclude somebody from notfications,
                             # will also be removed in To: line of article,
                             # higher prio as ForceNotificationToUserID
                        ExcludeMuteNotificationToUserID => [ 43, 56 ],
                             # the same as ExcludeNotificationToUserID but only the
                             # sending gets muted, agent will still shown in To:
                             # line of article
                    },
                },
            };
                    ]]></screen>
                </para>
                <para>
                    Name definiert den Namen der konfigurierten TransitionAction.
                    Dieser ist frei wählbar, sollte jedoch
                    die Ausprägung der konfigurierten Aktion widerspiegeln.
                </para>
                <para>
                    ArticleType definiert die Art des Artikels. Mögliche Optionen sind:
                    email-external, email-internal, email-notification-ext, email-notification-int,
                    phone, fax, sms, webrequest, note-internal, note-external, note-report
                </para>
                <para>
                    SenderType definiert wer als Absender des Artikels herangezogen wird.
                    Mögliche Optionen sind: agent, system, customer
                </para>
                <para>
                    ContentType definiert die art des Artikelinhalts. Mögliche Optionen:
                    'text/plain; charset=ISO-8859-15' oder sonstiges Charset und MimeType
                </para>
                <para>
                    Subject definiert den Artikeltitel. Subject muß zwingend vorhanden sein.
                </para>
                <para>
                    Body definiert den Inhalt des Artikels. Body muß zwingend vorhanden sein.
                </para>
                <para>
                    HistoryType definiert die Art des History Eintrags. Mögliche Optionen:
                    AddNote, ArchiveFlagUpdate, Bounce, CustomerUpdate, EmailAgent, EmailCustomer,
                    EscalationResponseTimeNotifyBefore, EscalationResponseTimeStart, EscalationResponseTimeStop,
                    EscalationSolutionTimeNotifyBefore, EscalationSolutionTimeStart, EscalationSolutionTimeStop,
                    EscalationUpdateTimeNotifyBefore, EscalationUpdateTimeStart, EscalationUpdateTimeStop,
                    FollowUp, Forward, Lock, LoopProtection, Merged, Misc, Move, NewTicket, OwnerUpdate,
                    PhoneCallAgent, PhoneCallCustomer, PriorityUpdate, Remove, ResponsibleUpdate,
                    SendAgentNotification, SendAnswer, SendAutoFollowUp, SendAutoReject, SendAutoReply,
                    SendCustomerNotification, ServiceUpdate, SetPendingTime, SLAUpdate, StateUpdate,
                    Subscribe, SystemRequest, TicketDynamicFieldUpdate, TicketLinkAdd, TicketLinkDelete,
                    TimeAccounting, TypeUpdate, Unlock, Unsubscribe, WebRequestCustomer
                </para>
                <para>
                    HistoryComment definiert den frei wählbaren Inhalt des History Kommentars.
                </para>
                <para>
                    From, To, Cc, ReplyTo nehmen Mailadressen in der oben angegebenen Mailadressnotierung auf.
                    InReplyTo
                </para>
                <para>
                    InReplyTo nimmt eine oder mehrere Mailadressen auf.
                </para>
                <para>
                    NoAgentNotify wenn auf 1 gesetzt, unterbindet es eine Email benachrichtigung des Agents.
                </para>
                <para>
                    AutoResponseType kann folgende Werte annehmen:
                    auto follow up, auto reject, auto remove, auto reply, auto reply/new ticket
                </para>
                <para>
                    ForceNotificationToUserID, ExcludeNotificationToUserID,  ExcludeMuteNotificationToUserID
                    köann jeweils eine in [] Klammern gesetzte Liste von BenutzerID's aufnehmen, die entweder
                    immer benachrichtigt werden, nicht benachrichtigt werden oder nur als mailadresse angeführt
                    jedoch nicht tatsächlich beschickt werden.
                </para>
            </section>
            <section>
                <title>CustomerSet</title>
                <para>
                    Diese TransitionAction stellt einen Kunden am Auftragsticket ein. Eine Beispielkonfiguration:
                </para>
                <para>
                    <screen><![CDATA[
            $Self->{'Process::TransitionAction'} = {
                'TA1' => {
                    Name   => 'Customer Set Customer to test',
                    Module => 'Kernel::System::Process::TransitionAction::CustomerSet',
                    Config => {
                        No      => 'test',
                        User    => 'client-user-123',
                        # or in other words
                        # CustomerID     => 'client123',
                        # CustomerUserID => 'client-user-123',

                    },
                },
            };
                    ]]></screen>
                </para>
                <para>
                    Name definiert den Namen der konfigurierten TransitionAction.
                    Dieser ist frei wählbar, sollte jedoch
                    die Ausprägung der konfigurierten Aktion widerspiegeln.
                </para>
                <para>
                    No oder CustomerID stellt die Kundennummer des Kunden ein.
                </para>
                <para>
                    User oder CustomerUserID stellt den Benutzernamen des Kunden ein.
                </para>
            </section>
            <section>
                <title>DynamicFieldSet</title>
                <para>
                    Diese TransitionAction setzt einen oder mehrere DynamicFields an einem Auftragsticket. Eine Beispielkonfiguration:
                </para>
                <para>
                    <screen><![CDATA[
            $Self->{'Process::TransitionAction'} = {
                'TA1' => {
                    Name   => 'Set DynamicField Master to Master and Approved to 1',
                    Module => 'Kernel::System::ProcessManagement::TransitionAction::DynamicFieldSet',
                    Config => {
                        MasterSlave => 'Master',
                        Approved    => '1',

                    },
                },
            };
                    ]]></screen>
                </para>
                <para>
                    Name definiert den Namen der konfigurierten TransitionAction.
                    Dieser ist frei wählbar, sollte jedoch
                    die Ausprägung der konfigurierten Aktion widerspiegeln.
                </para>
                <para>
                    MasterSlave sowie Approved sind hier als Beispiele für DynamicField Namen angegeben.
                    Die Wert der Keys (Master bzw. 1) sind die Werte auf die das Dynamische Feld durch die TransitionAction gesetzt werden.
                </para>
            </section>
            <section>
                <title>OwnerSet</title>
                <para>
                    Diese TransitionAction ändert den Besitzer des Auftragstickets. Entweder Owner oder OwnerID
                    sind zwingend notwending um diese Aktion durchzuführen. Der jeweilige konfigurierte
                    Wert muss entweder einem validen Benutzerlogin oder OTRS interne ID wiederspiegeln,
                    da sonst das setzten des Benutzers nicht möglich ist.
                    Eine Beispielkonfiguration:
                </para>
                <para>
                    <screen><![CDATA[
            $Self->{'Process::TransitionAction'} = {
                'TA1' => {
                    Name   => 'Owner Set root@localhost',
                    Module => 'Kernel::System::ProcessManagement::TransitionAction::OwnerSet',
                    Config => {
                        Owner => 'root@localhost',
                        # or
                        OwnerID => 1,
                    },
                },
            };
                    ]]></screen>
                </para>
                <para>
                    Name definiert den Namen der konfigurierten TransitionAction.
                    Dieser ist frei wählbar, sollte jedoch
                    die Ausprägung der konfigurierten Aktion widerspiegeln.
                </para>
                <para>
                    Owner definiert den ausgeschriebenen Loginnamen des neuen Benutzers.
                </para>
                <para>
                    OwnerID definiert die OTRS interne ID des neuen Benutzers.
                </para>
            </section>
            <section>
                <title>QueueMove</title>
                <para>
                    Diese TransitionAction verschiebt ein Auftragsticket in eine ZielQueue. Eine Beispielkonfiguration:
                </para>
                <para>
                    <screen><![CDATA[
            $Self->{'Process::TransitionAction'} = {
                'TA1' => {
                    Name   => 'Queue Move Raw',
                    Module => 'Kernel::System::ProcessManagement::TransitionAction::QueueMove',
                    Config => {
                        TargetQueue => 'Raw',
                        # or
                        # TargetQueueID => '2',
                    },
                },
            };
                    ]]></screen>
                </para>
                <para>
                    Name definiert den Namen der konfigurierten TransitionAction.
                    Dieser ist frei wählbar, sollte jedoch
                    die Ausprägung der konfigurierten Aktion widerspiegeln.
                </para>
                <para>
                    TargetQueue gibt den Namen der Queue an, in die das Auftragsticket verschoben werden soll.
                </para>
                <para>
                    TargetQueueID gibt die Datenbank ID der Queue an, in die das Auftragsticket verschoben werden soll.
                </para>
            </section>
            <section>
                <title>StateSet</title>
                <para>
                    Diese TransitionAction ändert den Status des Auftragstickets. Es ist sowohl möglich den Status generell
                    oder aber auch den Status anhand einer Fallentscheidung zu ändern. Diese Fallentscheidung
                    wird anhand eines definierten DynamicFields getroffen. Ist der Wert des definierten DynamicFields
                    zum Zeitpunkt der Ausführung der TransitionAction nicht in der Fallentscheidung enthalten geschieht nichts.
                    Eine Beispielkonfiguration:
                </para>
                <para>
                    <screen><![CDATA[
            $Self->{'Process::TransitionAction'} = {
                'TA1' => {
                    Name   => 'Set State if it is a MasterTicket',
                    Module => 'Kernel::System::ProcessManagement::TransitionAction::StateSet',
                    Config => {
                        State  => 'open',
                        # or
                        StateID => 3,

                        #OR (DynamicField state mapping)
                        DynamicField        => 'MasterSlave', # or DynamicField_MasterSlave
                        DynamicFieldMapping => {
                            Master           => {
                                State => 'open'
                            }
                            # or
                            Master           => {
                                StateID => 3
                            }
                        },
                    },
                },
            };
                    ]]></screen>
                </para>
                <para>
                    Name definiert den Namen der konfigurierten TransitionAction.
                    Dieser ist frei wählbar, sollte jedoch
                    die Ausprägung der konfigurierten Aktion widerspiegeln.
                </para>
                <para>
                    State definiert den Status den das Auftragsticket bekommen soll. Es ist zwingend
                    notwendig, dass dieser Status im OTRS System hinterlegt und valide ist.
                </para>
                <para>
                    StateID definiert die OTRS interne ID des neuen Status. Es ist zwingend notwending,
                    dass diese ID im OTRS System hinterlegt und valide ist.
                </para>
                <para>
                    DynamicField definiert den Namen des DynamicField anhand dessen die Fallentscheidung
                    getroffen werden soll. Es ist außerdem möglich, dass ein führendes 'DynamicField_' vor
                    dem Namen des DynamicField steht. Es ist zwingend notwending, dass das definierte
                    DynamicField im OTRS System hinterlegt und valide ist.
                </para>
                <para>
                    DynamicFieldMapping definiert die Fallentscheidung anhand der der Status des
                    Auftragsticket entschieden wird. Für jeden definierten Wert ist es nötig einen State oder
                    eine StateID anzugeben. Diese verhalten sich analog zu den fest definierten State und
                    StateID Parametern, die bereits im oberen Teil beschrieben wurden. Falls keiner der
                    definierten Werte zutreffen sollte wird der Status des Auftragstickets nicht verändert.
                </para>
            </section>
        </section>
        <section>
            <title>ACL Werte-Einschränkung</title>
            <para>
                Mittels ACLs können wie auch für reguläre Tickets Werte-Einschränkungen in Auftragstickets vorgenommen werden.
            </para>
            <section>
                <title>ACL Konfiguration</title>
                <para>
                    Die ACL Konfiguration kann zum aktuellen Zeitpunkt nur in der Kernel -> Config.pm erstellt werden.
                    Eine Beispielkonfiguration:
                </para>
                <para>
                    <screen>
            $Self->{TicketAcl}->{'001-ACL-ProcessProperties'} = {
                Properties => {
                    Process => {
                        ProcessEntityID       => ['P1'],
                        ActivityEntityID   => ['A1'],
                        ActivityDialogEntityID      => ['AD1'],
                    }
                },
                Possible => {
                    ActivityDialog => ['AD1', 'AD3'],
                },
                PossibleNot => {
                    ActivityDialog => ['AD3'],
                },
            };
                    </screen>
                </para>
            </section>
            <section>
                <title>001-ACL-ProcessProperties</title>
                <para>
                    Der Name der ACL Regel. Für weitere Informationen zur Benennung von ACL Regeln konsultieren Sie bitte das OTRS Handbuch.
                </para>
            </section>
            <section>
                <title>Process</title>
                <para>
                    Die ACL Sektion die für eine Prüfung herangezogen wird. Hat ein Auftragsticket die eingestellten Werte, trifft die ACL Regel zu.
                    Hier können folgende Werte eingetragen werden:
                </para>
            </section>
            <section>
                <title>ProcessEntityID</title>
                <para>
                    Die ID des Prozesses den das Auftragsticket durchläuft.
                </para>
            </section>
            <section>
                <title>ActivityEntityID</title>
                <para>
                    Die ID des Activities in dem sich das Auftragsticket aktuell befindet.
                </para>
            </section>
            <section>
                <title>ActivityDialogEntityID</title>
                <para>
                    Die ID der Activity, die gerade zur Bearbeitung aufgerufen wurde bzw. bearbeitet wird.
                </para>
            </section>
            <section>
                <title>Possible bzw. PossibleNot Activity Dialog</title>
                <para>
                    Hier kann ein Array von Activity Dialog IDs angegeben werden. Dieses Array schränkt bei zutreffen der Properties Bedingung die Auswahl der
                    in der Zoom Maske angezeigten Activity Dialogs ein.
                </para>
                <para>
                    Possible gibt die Liste der erlaubten Activity Dialogs an.
                    Sind z. B. für das aktuelle Activity folgende Activity Dialogs konfiguriert: 'AD1', 'AD2', 'AD3' (einstellbar in der Activity Konfiguration)
                    schränkt die obige Konfiguration die Auswahlmöglichkeit auf die Activity Dialogs 'AD1' und 'AD3' ein.
                </para>
                <para>
                    PossibleNot gibt die Liste der nicht erlaubte Activity Dialogs an.
                    Sind z. B. für das aktuelle Activity folgende Activity Dialogs konfiguriert: 'AD1', 'AD2', 'AD3' (einstellbar in der Activity Konfiguration)
                    schränkt die obige Konfiguration die Auswahlmöglichkeit auf die Activity Dialogs 'AD1' und 'AD2' ein.
                </para>
                <para>
                    Wird wie oben sowohl Possible als auch PossibleNot angegeben, durchläuft die Ermittlung der möglichen Activity Dialog folgende Logik:
                    Konfigurierte ActivityDialogs: 'AD1', 'AD2', 'AD3'. Nach Prüfung auf Possible verbleiben die Möglichkeiten 'AD1' und 'AD3'.
                    Danach setzt PossibleNot ein und nimmt auch noch 'AD3' aus der Liste der möglichen ActivityDialogs.
                    Übrig bleibt als einzige erlaubte Activity Dialog 'AD1'.
                </para>
                <para>
                    Weiters werden die erlaubten Activity Dialogs als Schnittmenge aller zutreffender ACL Regeln,
                    die "Activity" unter Possible oder PossibleNot konfiguriert haben, ermittelt. Beispiel:
                </para>
                <para>
                    Konfigurierte Activity Dialogs: 'AD1', 'AD2', 'AD3', 'AD4', 'AD5', 'AD6', 'AD7'
                </para>
                <para>
                    <screen>
            $Self->{TicketAcl}->{'001-ACL-Status'} = {
                Properties => {
                    Ticket => {
                        Status       => 'new',
                    }
                },
                Possible => {
                    ActivityDialog => ['AD1', 'AD2', 'AD3', 'AD6', 'AD7'],
                },
            };
            $Self->{TicketAcl}->{'002-ACL-Queue'} = {
                Properties => {
                    Ticket => {
                        Queue        => ['Raw']
                    }
                },
                Possible => {
                    ActivityDialog => ['AD2', 'AD3', 'AD4', 'AD7'],
                },
            };
            $Self->{TicketAcl}->{'003-ACL-Priority'} = {
                Properties => {
                    Ticket => {
                        Priority        => ['3 normal']
                    }
                },
                PossibleNot => {
                    ActivityDialog => ['AD3', 'AD4'],
                },
            };
                    </screen>
                </para>
                <para>
                    Angenommen das Auftragsticket hat den Status 'new', ist in der 'Raw' Queue und hat als Priority '3 normal'
                    treffen alle drei obigen ACL Rules zu.
                </para>
                <para>
                    Die erste ACL Rule reduziert die erlaubten Activity Dialogs von 'AD1', 'AD2', 'AD3', 'AD4', 'AD5', 'AD6', 'AD7' auf
                    'AD1', 'AD2', 'AD3', 'AD6', 'AD7' und verbietet somit 'AD4' und 'AD5'.
                </para>
                <para>
                    Die zweite ACL Rule reduziert die erlaubten Activity Dialogs von den nach der ersten ACL verbleibenden:
                    'AD1', 'AD2', 'AD3', 'AD6', 'AD7' auf die Activity Dialogs die sowohl in der ersten als auch in der zweiten Regel unter Possible zu finden sind.
                    In unserem Beispiel verbleiben somit 'AD2', 'AD3', 'AD7'. Die Activity Dilalog 'AD1' fällt heraus, da sie nur in der ersten Regel definiert ist.
                    Die Activity Dialog 'AD4' wird nicht in die erlaubten Activity Dialogs aufgenommen, da sie nur in der zweiten Regel definiert ist.
                </para>
                <para>
                    Nach der Reduktion der möglichen Activity Dialogs durch Possible setzt die weitere Reduktion durch PossibleNot ein.
                    In unserem Fall versucht sie die Activity Dialog 'AD3' zu verhindern, welche nach den Possibles noch vorhanden war.
                    Das Verbot von 'AD4' wirkt sich nicht aus, da diese schon vorher herausgefallen war.
                    Somit verbleiben nach PossibleNot 'AD2' und 'AD7' als mögliche Activity Dialogs.
                </para>
            </section>
        </section>
    </section>
-->
</section>
