<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">


<!-- $Id: states.xml,v 1.3 2012-11-26 09:18:36 mg Exp $ -->
<section id="states">
<title>Ticket States</title>

<section id="states-predefined">
<title>Предопределенные состояния</title>

<para>
OTRS позволяет изменять предопределенные состояния заявок и их типы, а также
добавлять новые. Для состояния важны два атрибута: имя (state-name) и тип
(state-type).
</para>

<para>
Предустановленные состояния в OTRS: "закрыто успешно", "закрыто неудачно",
"обьеденено", "новая", "открытая", "в ожидании с автозакрытием+", "в
ожидании с автозакрытием-", "в ожидании с напоминанием", "удаленная".
</para>

<section id="state-new">
<title>Новая</title>
<para>
Заявки находятся в этом состоянии, когда они создаются на основе входящих
сообщений электронной почты.
</para>
</section>

<section id="state-open">
<title>Открытая</title>
<para>
Это состояние по умолчанию для заявок, которые присвоены очередям или
агентам.
</para>
</section>

<section id="state-pending-reminder">
<title>Ожидание с напоминанием</title>
<para>
После того как время ожидания истекло, владелец заявки будет получать
напоминание на электронную почту. Если заявка не закрыта, то напоминание о
заявке будет отправлено всем агентам в очереди. Напоминание о заявках будет
отправлено только в рабочее время и будет повторятся каждые 24-часа, пока
агент не изменит состояние заявки. Время, которое заявка проведет с таким
статусом будет добавлено к времени эскалации.
</para>
</section>

<section id="state-pending-autoclose-minus">
<title>Ожидание авто-закрытие -</title>
<para>
Если время ожидания вышло, заявки с этим статусом будут установлены в
"Закрытые неуспешно". Время, проведенное заявкой в этом статусе будет
добавлено к времени эскалации.
</para>
</section>

<section id="state-pending-autoclose-plus">
<title>Ожидание авто-закрытие+</title>
<para>
Если вышло время ожидания, заявки с этим статусом будут установлены в
"Закрыто Успешно". Время, проведенное заявкой в этом статусе будет добавлено
к времени эскалации.
</para>
</section>

<section id="state-merged">
<title>Обьедененные</title>
<para>
Это состояние для заявок, которые были объеденены с другими заявками.
</para>
</section>

<section id="state-closed-successful">
<title>Закрыта Успешно</title>
<para>
Это конечное состояние для заявок, которые были решены успешно. В
зависимости от конфигурации, у вас будет или не будет возможности заново
открыть ранее закрытые заявки.
</para>
</section>

<section id="state-closed-unsuccessful">
<title>Закрыта Неудачно</title>
<para>
Это конечное состояние для заявок которые НЕ были успешно решены. В
зависимости от конфигурации, у вас будет или не будет возможности заново
открыть ранее закрытые заявки.
</para>
</section>

</section>

<section id="states-customizing">
<title>Настраиваемы состояния</title>
<para>
Каждое состояние имеет название (state-name) и тип (state-type). Чтобы
создать новое состояние перейдите по ссылке <link
linkend="adminarea-status">Состояния</link> на Панели Администрирования и
нажмите кнопку "Добавить состояние". Можно свободно выбирать имя нового
состояния. Типы состояний не могут изменятся посредством
веб-интерфейса. Если нужно добавить новые типы или изменить существующие, -
все изменения придется делать напрямую в базе данных. Предустановленные типы
состояний не могут быть изменены, поскольку это может привести к
непредсказуемым результатам. Например, расчет эскалации и фунция
разблокирования основаны на конкретных типах состояний.
</para>

<para>
The name of an already existing state can be changed, or new states added
through this screen. If the state "new" has been changed via the web
interface, this change also has to be configured via the config file
<filename>Kernel/Config.pm</filename> or via the SysConfig interface. The
settings specified in the script below have to be modified to ensure that
OTRS works with the changed state for "new".
</para>

<para>
<programlisting>
    [...]
    # PostmasterDefaultState
    # (The default state of new tickets.) [default: new]
    $Self-&gt;{PostmasterDefaultState} = 'new';

    # CustomerDefaultState
    # (default state of new customer tickets)
    $Self-&gt;{CustomerDefaultState} = 'new';
    [...]
</programlisting>
</para>

<para>
<emphasis>Script: Modifying the Kernel/Config.pm settings.</emphasis>
</para>

<para>
If a new state type should be added, the ticket_state_type table in the OTRS
database needs to be modified with a database client program, as shown in
the script below.
</para>

<para>
<screen>
linux:~# mysql -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 23 to server version: 5.0.16-Debian_1-log

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt; use otrs;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; insert into ticket_state_type (name,comments) values ('own','Own
state type');
Query OK, 1 row affected (0.00 sec)

mysql&gt; quit
Bye
linux:~#
</screen>
</para>

<para>
<emphasis>Script: Modifying the OTRS database.</emphasis>
</para>

<para>
На данный момент можно использовать новый тип состояния, который вы только
что создали. Как только состояние будет связано с этим новым типом
состояния, то чтобы убедится что новое состояние используется и работает
коректно нужно также изменить настройки OTRS. Используя SysConfig внесите
изменения в следующие опции:
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewPhoneNew:Ticket::Frontend::AgentTicketPhone_StateDefault">
Ticket -&gt; Frontend::Agent::Ticket::ViewPhoneNew &gt;
AgentTicketPhone###StateDefault </link> - определить следующее состояние по
умолчанию для новых заявок созданных на основе телефонного звонка.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewPhoneNew:Ticket::Frontend::AgentTicketPhone_StateType">
Ticket -&gt; Frontend::Agent::Ticket::ViewPhoneNew &gt;
AgentTicketPhone###StateType </link> - для определения последующих доступных
состояний  для новых заявок, созданных на основе телефонного звонка.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewEmailNew:Ticket::Frontend::AgentTicketEmail_StateDefault">
Ticket -&gt; Frontend::Agent::Ticket::ViewEmailNew &gt;
AgentTicketEmail###StateDefault </link> - установка последующих следующих
состояний для заявок созданных на базе сообщений электронной почты.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewEmailNew:Ticket::Frontend::AgentTicketEmail_StateType">
Ticket -&gt; Frontend::Agent::Ticket::ViewEmailNew &gt;
AgentTicketEmail###StateType </link> - для определения последующих доступных
состояний для новых заявок созданных на базе сообщений электронной почты.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewPhoneOutbound:Ticket::Frontend::AgentTicketPhoneOutbound_State">
Ticket -&gt; Frontend::Agent::Ticket::ViewPhoneOutbound &gt;
AgentTicketPhoneOutbound###State </link> - для определения последующих
доступных состояний для новых заявок созданных на базе новых телефонных
статей.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewPhoneOutbound:Ticket::Frontend::AgentTicketPhoneOutbound_StateType">
Ticket -&gt; Frontend::Agent::Ticket::ViewPhoneOutbound &gt;
AgentTicketPhoneOutbound###StateType </link> - для определения последующих
доступных состояний для новых заявок созданных на базе новых телефонных
статей.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewMove:Ticket::DefaultNextMoveStateType">
Ticket:Frontend::Agent::Ticket::ViewMove:Ticket::DefaultNextMoveStateType
</link> - для определения последующих доступных состояний для перемещенных
заявок.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewBounce:Ticket::Frontend::AgentTicketBounce_StateDefault">
Ticket -&gt; Frontend::Agent::Ticket::ViewBounce &gt; StateDefault </link> -
для определения последующих доступных состояний для "подпрыгивающих"
заявок.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewBounce:Ticket::Frontend::AgentTicketBounce_StateType">
Ticket -&gt; Frontend::Agent::Ticket::ViewBounce &gt; StateType </link> -
для определения последующих доступных состояний для экранов с отказами.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewBulk:Ticket::Frontend::AgentTicketBulk_StateDefault">
Ticket -&gt; Frontend::Agent::Ticket::ViewBulk &gt; StateDefault </link> -
для определения прдеопределенных последующих состояний для груповых
действий.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewBulk:Ticket::Frontend::AgentTicketBulk_StateType">
Ticket -&gt; Frontend::Agent::Ticket::ViewBulk &gt; StateType </link> - для
определения прдеопределенных последующих состояний для экрана груповых
действий
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewClose:Ticket::Frontend::AgentTicketClose_StateDefault">
Ticket -&gt; Frontend::Agent::Ticket::ViewClose &gt; StateDefault </link> -
для определения прдеопределенных последующих состояний после закрытия заявки
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewClose:Ticket::Frontend::AgentTicketClose_StateType">
Ticket -&gt; Frontend::Agent::Ticket::ViewClose &gt; StateType </link> - для
определения прдеопределенных последующих состояний для страницы закрытия.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewCompose:Ticket::Frontend::AgentTicketCompose_StateDefault">
Ticket -&gt; Frontend::Agent::Ticket::ViewCompose &gt; StateDefault </link>
- для определения прдеопределенных последующих состояний для
Compose-страницы
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewCompose:Ticket::Frontend::AgentTicketCompose_StateType">
Ticket -&gt; Frontend::Agent::Ticket::ViewCompose &gt; StateType </link> -
для определения прдеопределенных последующих состояний для Compose-страницы.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewForward:Ticket::Frontend::AgentTicketForward_StateDefault">
Ticket -&gt; Frontend::Agent::Ticket::ViewForward &gt; StateDefault </link>
- для определения прдеопределенных последующих состояний после
перенаправления заявки.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewForward:Ticket::Frontend::AgentTicketForward_StateType">
Ticket -&gt; Frontend::Agent::Ticket::ViewForward &gt; StateType </link> -
для определения прдеопределенных последующих состояний для страници
перенаправления.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewFreeText:Ticket::Frontend::AgentTicketFreeText_StateDefault">
Ticket -&gt; Frontend::Agent::Ticket::ViewForward &gt; StateDefault </link>
- для определения прдеопределенных последующих состояний для страницы
free-text.
</para>

<para>
<link
linkend="Ticket:Frontend::Agent::Ticket::ViewFreeText:Ticket::Frontend::AgentTicketFreeText_StateType">
Ticket -&gt; Frontend::Agent::Ticket::ViewForward &gt; StateType </link> -
для определения прдеопределенных последующих состояний для free
text-страницы.
</para>


<para>
<link linkend="Ticket:Core::PostMaster:PostmasterDefaultState"> Ticket -&gt;
Core::PostMaster &gt; PostmasterDefaultState </link> -  для определения
прдеопределенных последующих состояний для заявок, созданых с сообщений
электронной почты.
</para>

<para>
<link linkend="Ticket:Core::PostMaster:PostmasterFollowUpState"> Ticket
-&gt; Core::PostMaster &gt; PostmasterFollowUpState </link> -  для
определения прдеопределенных последующих состояний для заявок после
последующих, которые должны быть сохранены.
</para>

<para>
<link linkend="Ticket:Core::PostMaster:PostmasterFollowUpStateClosed">
Ticket -&gt; Core::PostMaster &gt; PostmasterFollowUpStateClosed </link> -
для определения состояния заявок, после того как придет новый ответ на уже
закрытую заявку.
</para>

<para>
<link linkend="Ticket:Core::Ticket:Ticket::ViewableStateType"> Ticket -&gt;
Core::Ticket &gt; ViewableStateType </link> -  для определения состояний,
которые будут отображатся в различных местах системы, напримерв в Queueview.
</para>

<para>
<link linkend="Ticket:Core::Ticket:Ticket::UnlockStateType"> Ticket -&gt;
Core::Ticket &gt; UnlockStateType </link> - для определения типов состояний
для разблокированых заявок.
</para>

<para>
<link linkend="Ticket:Core::Ticket:Ticket::PendingReminderStateType"> Ticket
-&gt; Core::Ticket &gt; PendingReminderStateType </link> - для определения
типов состояний для заявок с напоминанием.
</para>

<para>
<link linkend="Ticket:Core::Ticket:Ticket::PendingAutoStateType"> Ticket
-&gt; Core::Ticket &gt; PendingAutoStateType </link> - для определения типов
состояний для ожидающих заявок.
</para>

<para>
<link linkend="Ticket:Core::Ticket:Ticket::StateAfterPending"> Ticket ->
Core::Ticket > StateAfterPending </link> - для определения состояния заявки
установленой в Таймере Авто-Ожидания, если время для настроенного состояния
истекло.
</para>

</section>
</section>