<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
  <!-- $Id: external-backends.xml,v 1.4 2005-09-15 14:04:49 cs Exp $ -->

<chapter id="external-backends">
<title>Einbinden externer Backends</title>

<sect1 id='customer-data'>
<title>Kundenbenutzer-Daten</title>

<para>
OTRS ist in der Lage, mit verschiedenen Kundendaten (insbesondere
Login, Email, Telefon) umzugehen. Diese Informationen können im
Agenten-Interface angezeigt werden und können für das Kunden-Interface
benutzt werden. Weiterhin werden die Daten für die Authentifizierung der
Kunden benötigt.
</para>

<para>
Die benutzten/angezeigten Kundendaten sind frei konfigurierbar, aber es
gibt drei benötigte Optionen, BenutzerLogin, BenutzerEmail und
BenutzerKundenID.
</para>

<para>
Wenn Sie die Kundendaten (z.B. Firma, Name, eMail, ...) in Ihrem
Agenten-Interface anzeigen möchten, benutzen Sie die folgenden
Konfigurations-Optionen.
</para>

<para>
<programlisting>
    # Ticket::Frontend::CustomerInfo*
    # (show customer user info on Compose (Phone and Email), Zoom and
    # Queue view)
    $Self->{'Ticket::Frontend::CustomerInfoCompose'} = 1;
    $Self->{'Ticket::Frontend::CustomerInfoZoom'} = 1;
    $Self->{'Ticket::Frontend::CustomerInfoQueue'} = 0;
</programlisting>
</para>
</sect1>

<sect1 id="customer-user-backend">
<title>Kundenbenutzer-Backend</title>

<para>
Es existieren zwei Kundenbenutzer-Backends, DB und LDAP. Falls Sie
bereits ein Kunden-Verzeichnis (z.B. SAP, ...) haben, ist es natürlich
möglich, dafür ein eigenes Backend zu schreiben.
</para>

<note>
<para>
Es is auch möglich mehr als einen Kunden-Daten Topf zu definieren.
Einfach eine weitere Konfig Option wie "CustomerUser" mit einer Nummer
zwischen 1 und 10 hinzufügen, z.B. "CustomerUser1".
</para>
</note>

<sect2 id='customer-backend-db'>
<title>Datenbank (Standard)</title>

<para>
Dies ist ein Beispiel für ein Datenbank-Backend.
</para>

<para>
<programlisting>
    # CustomerUser
    # (customer user database backend and settings)
    $Self->{CustomerUser} = {
        Name => 'Datenbank Quelle',
        Module => 'Kernel::System::CustomerUser::DB',
        Params => {
            # if you want to use an external database, add the
            # required settings
#            DSN => 'DBI:odbc:yourdsn',
#            DSN => 'DBI:mysql:database=customerdb;host=customerdbhost',
#            User => '',
#            Password => '',
            Table => 'customer_user',
        },
        # customer uniq id
        CustomerKey = 'login',
        # customer #
        CustomerID = 'customer_id',
        CustomerValid = 'valid_id',
        CustomerUserListFields => ['first_name', 'last_name', 'email'],
        CustomerUserSearchFields => ['login', 'last_name', 'customer_id'],
        CustomerUserSearchPrefix => '',
        CustomerUserSearchSuffix => '*',
        CustomerUserSearchListLimit => 250,
        CustomerUserPostMasterSearchFields => ['email'],
        CustomerUserNameFields => ['salutation','first_name','last_name'],
        CustomerUserEmailUniqCheck => 1,
#        # show now own tickets in customer panel, CompanyTickets
#        CustomerUserExcludePrimaryCustomerID => 0,
#        # generate auto logins
#        AutoLoginCreation => 0,
#        AutoLoginCreationPrefix => 'auto',
#        # admin can change customer preferences
#        AdminSetPreferences => 1,
#        # just a read only source
#        ReadOnly => 1,
        Map => [
            # note: Login, Email and CustomerID needed!
            # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
            [ 'UserSalutation', 'Salutation', 'salutation',  1, 0, 'var', '', 0 ],
            [ 'UserFirstname',  'Firstname',  'first_name',  1, 1, 'var', '', 0 ],
            [ 'UserLastname',   'Lastname',   'last_name',   1, 1, 'var', '', 0 ],
            [ 'UserLogin',      'Username',   'login',       1, 1, 'var', '', 0 ],
            [ 'UserPassword',   'Password',   'pw',          0, 1, 'var', '', 0 ],
            [ 'UserEmail',      'Email',      'email',       0, 1, 'var', '', 0 ],
#            [ 'UserEmail',      'Email', 'email',           1, 1,
#            'var','$Env{"CGIHandle"}?Action=AgentTicketCompose&amp;ResponseID=1&amp;TicketID=$Data{"TicketID"}&amp;ArticleID=$Data{"ArticleID"}', 0 ],
            [ 'UserCustomerID', 'CustomerID', 'customer_id', 0, 1, 'var', '', 0 ],
#            [ 'UserCustomerIDs', 'CustomerIDs', 'customer_ids', 1, 0, 'var', '', 0 ],
            [ 'UserComment',     'Comment',   'comments',    1, 0, 'var', '', 0 ],
            [ 'ValidID',         'Valid',     'valid_id',    0, 1, 'int', '', 0 ],
        ],
        # default selections
        Selections => {
            UserSalutation => {
                'Mr.' => 'Mr.',
                'Mrs.' => 'Mrs.',
            },
        },
    };
</programlisting>
</para>

<para>
Falls Sie Ihre Kundendaten anpassen möchten, ändern Sie die
Tabellenspalten oder fügen Sie weitere hinzu:
</para>

<para>
<programlisting>
ALTER TABLE customer_user ADD phone VARCHAR (250);
</programlisting>
</para>

<para>
Danach fügen Sie Ihre eigenen Spalten dem MAP Array hinzu:
</para>

<para>
<programlisting>
            # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
            [ 'UserPhone',      'Phone',      'phone',       0, 1, 'var', '', 0 ],
</programlisting>
</para>

<para>
Natürlich können Sie all diese Kundeninformationen dann auch
über das Admin-Interface pflegen.
</para>

<sect3 id='multi-customer-ids-db'>
<title>Kunden mit multiblen IDs</title>

<para>
Es ist auch möglich mehr als nur einer Kunden-Nummer einen
Kunden zuzuweisen. Dies kann z.B. dann nützlich sein, wenn ein Kunde auf
Tickets anderer Kunden zugreifen muss, z.B. die Mitarbeiter einer Firma
sollen auf die Tickets aller Mitarbeiter Zugriff haben.
</para>

<para>
Einfach eine Tabellenspalte hinzufügen in der die Kunden-Nummern
eingetragen werden (wie "CustomerID1, CustomerID2, CustomerID3"):
</para>

<para>
<programlisting>
ALTER TABLE customer_user ADD customer_ids VARCHAR (250);
</programlisting>
</para>

<para>
Nun einen weiteren Eintrag im CustomerUser MAP Aarray In der
Datei <filename>Kernel/Config.pm</filename> hinzufügen:
</para>

<para>
<programlisting>
            # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
            [ 'UserCustomerIDs', 'CustomerIDs', 'customer_ids', 1, 0, 'var', '', 0 ],
</programlisting>
</para>

<para>
Natürlich können Sie all die Multi-Kunden-Nummern dann auch
über das Admin-Interface pflegen.
</para>
</sect3>

</sect2>

<sect2 id='customer-backend-ldap'>
<title>LDAP</title>

<para>
Falls Sie ein existierendes LDAP-Verzeichnis mit Ihren Kunden-Benutzern
haben, können Sie dieses auch mit OTRS nutzen.
</para>

<para>
Dies ist ein Beispiel für ein LDAP-Backend.
</para>

<para>
<programlisting>
    # CustomerUser
    # (customer user ldap backend and settings)
    $Self->{CustomerUser} = {
        Name => 'LDAP Datenquelle',
        Module => 'Kernel::System::CustomerUser::LDAP',
        Params => {
            # ldap host
            Host => 'bay.csuhayward.edu',
            # ldap base dn
            BaseDN => 'ou=seas,o=csuh',
            # search scope (one|sub)
            SSCOPE => 'sub',
#            # The following is valid but would only be necessary if the
#            # anonymous user does NOT have permission to read from the LDAP tree
            UserDN => '',
            UserPw => '',
            # in case you want to add always one filter to each ldap query, use
            # this option. e. g. AlwaysFilter => '(mail=*)' or AlwaysFilter => '(objectclass=user)'
            AlwaysFilter => '',
            # if your frontend is e. g. iso-8859-1 and the charset of your
            # ldap server is utf-8, use this options (if not, ignore it)
#            SourceCharset => 'utf-8',
#            DestCharset => 'iso-8859-1',
            # Net::LDAP new params (if needed - for more info see perldoc Net::LDAP)
            Params => {
                port => 389,
                timeout => 120,
                async => 0,
                version => 3,
            },
        },
        # customer uniq id
        CustomerKey => 'uid',
        # customer #
        CustomerID => 'mail',
        CustomerUserListFields => ['cn', 'mail'],
        CustomerUserSearchFields => ['uid', 'cn', 'mail'],
        CustomerUserSearchPrefix => '',
        CustomerUserSearchSuffix => '*',
        CustomerUserSearchListLimit => 250,
        CustomerUserPostMasterSearchFields => ['mail'],
        CustomerUserNameFields => ['givenname', 'sn'],
        # show now own tickets in customer panel, CompanyTickets
        CustomerUserExcludePrimaryCustomerID => 0,
        # add a ldap filter for valid users (expert setting)
#       CustomerUserValidFilter => '(!(description=gesperrt))',
        # admin can't change customer preferences
        AdminSetPreferences => 0,
        Map => [
            # note: Login, Email and CustomerID needed!
            # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
            [ 'UserSalutation', 'Title',      'title',           1, 0, 'var', '', 0 ],
            [ 'UserFirstname',  'Firstname',  'givenname',       1, 1, 'var', '', 0 ],
            [ 'UserLastname',   'Lastname',   'sn',              1, 1, 'var', '', 0 ],
            [ 'UserLogin',      'Username',   'uid',             1, 1, 'var', '', 0 ],
            [ 'UserEmail',      'Email',      'mail',            1, 1, 'var', '', 0 ],
            [ 'UserCustomerID', 'CustomerID', 'mail',            0, 1, 'var', '', 0 ],
#            [ 'UserCustomerIDs', 'CustomerIDs', 'second_customer_ids', 1, 0, 'var', '', 0 ],
            [ 'UserPhone',      'Phone',      'telephonenumber', 1, 0, 'var', '', 0 ],
            [ 'UserAddress',    'Address',    'postaladdress',   1, 0, 'var', '', 0 ],
            [ 'UserComment',    'Comment',    'description',     1, 0, 'var', '', 0 ],
        ],
    };
</programlisting></para>

<para>
Falls Sie Ihre Kundendaten anpassen möchten, fügen Sie Ihre neuen
Punkte dem MAP Array hinzu (oder entfernen Sie nicht benötigte Punkte):
</para>

<programlisting>
            # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
            [ 'UserPhone',      'Phone',      'telephonenumber', 1, 0, 'var', '', 0 ],
</programlisting>

<sect3 id='multi-customer-ids-ldap'>
<title>Kunden mit multiblen IDs</title>

<para>
Es ist auch möglich mehr als nur einer Kunden-Nummer einen
Kunden zuzuweisen. Dies kann z.B. dann nützlich sein, wenn ein Kunde auf
Tickets anderer Kunden zugreifen muss, z.B. die Mitarbeiter einer Firma
sollen auf die Tickets aller Mitarbeiter Zugriff haben.
</para>

<para>
Einfach im LDAP ein Feld hinzufügen in der die Kunden-Nummern
eingetragen werden (wie "CustomerID1, CustomerID2, CustomerID3").
Anschließend einen weiteren Eintrag in der CustomerUser MAP Aarray In
<filename>Kernel/Config.pm</filename> hinzufügen:
</para>

<programlisting>
            # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
            [ 'UserCustomerIDs', 'CustomerIDs', 'second_customer_ids', 1, 0, 'var', '', 0 ],
</programlisting>

<para>
Natürlich müssen die Multi-Kunden-Nummern vom LDAP Admin gepflegt werden
und können von OTRS aus nicht verwaltet werden.
</para>
</sect3>

</sect2>

</sect1>

<sect1 id="customer-auth-backend">
<title>Kunden-Authentifizierungs-Backend</title>

<sect2 id='customer-auth-backend-db'>
<title>Datenbank (Standard)</title>

<para>
Das Standard-Kunden-Authentifizierungs-Backend ist die OTRS-Datenbank mit
Ihren Kunden-Benutzern, die über das Admin-Interface oder Kunden-Interface
angelegt werden.
</para>

<programlisting>
    # This is the auth. module againt the otrs db
        $Self->{'AuthModule'} = 'Kernel::System::Auth::DB';
</programlisting>
</sect2>

<sect2 id='customer-auth-backend-ldap'>
<title>LDAP</title>

<para>
Falls ein LDAP-Verzeichnis mit Ihren Kunden-Benutzern verfügbar
ist, können Sie das Kunden-LDAP-Authentifizierungs-Backend benutzen.
Dieses Modul ist nur lesend (d.h. es kann nicht in Ihr LDAP-Verzeichnis
schreiben (dies sollte nur dem Verzeichnis-Manager möglich sein), so
dass Sie keine Kunden über das Admin- oder Kunden-Interface anlegen oder
ändern können.
</para>

<programlisting>
    # This is an example configuration for an LDAP auth. backend.
    # (take care that Net::LDAP is installed!)
    $Self->{'AuthModule'} = 'Kernel::System::Auth::LDAP';
    $Self->{'AuthModule::LDAP::Host'} = 'ldap.example.com';
    $Self->{'AuthModule::LDAP::BaseDN'} = 'dc=example,dc=com';
    $Self->{'AuthModule::LDAP::UID'} = 'uid';

    # Check if the user is allowed to auth in a posixGroup
    # (e. g. user needs to be in a group xyz to use otrs)
#    $Self->{'AuthModule::LDAP::GroupDN'} = 'cn=otrsallow,ou=posixGroups,dc=example,dc=com';
 #   $Self->{'AuthModule::LDAP::AccessAttr'} = 'memberUid';
    # for ldap posixGroups objectclass (just uid)
    $Self->{'AuthModule::LDAP::UserAttr'} = 'UID';
    # for non ldap posixGroups objectclass (with full user dn)
#    $Self->{'AuthModule::LDAP::UserAttr'} = 'DN';

    # The following is valid but would only be necessary if the
    # anonymous user do NOT have permission to read from the LDAP tree
    $Self->{'AuthModule::LDAP::SearchUserDN'} = '';
    $Self->{'AuthModule::LDAP::SearchUserPw'} = '';

    # in case you want to add always one filter to each ldap query, use
    # this option. e. g. AlwaysFilter => '(mail=*)' or AlwaysFilter => '(objectclass=user)'
#    $Self->{'AuthModule::LDAP::AlwaysFilter'} = '';

    # in case you want to add a suffix to each login name, then
    # you can use this option. e. g. user just want to use user but
    # in your ldap directory exists user@domain.
#    $Self->{'AuthModule::LDAP::UserSuffix'} = '@domain.com';

    # Net::LDAP new params (if needed - for more info see perldoc Net::LDAP)
#    $Self->{'AuthModule::LDAP::Params'} = {
#        port => 389,
#        timeout => 120,
#        async => 0,
#        version => 3,
#    };
</programlisting>
</sect2>

<sect2 id='customer-auth-backend-httpbasic'>
<title>HTTPBasicAuth</title>

<para>
Falls Sie eine "single sign on"-Lösung für Ihre Kunden
implementieren möchten, benutzen Sie http basic authentication (für alle Ihre
Systeme) und aktivieren Sie das HTTPBasicAuth Modul (kein OTRS-Login
benötigt!).
</para>

<programlisting>
    # This is an example configuration for an apache ($ENV{REMOTE_USER})
    # auth. backend. Use it if you want to have a singe login through
    # apache http-basic-auth
    $Self->{'AuthModule'} = 'Kernel::System::Auth::HTTPBasicAuth';

    # Note:
    #
    # If you use this module, you should use as fallback the following
    # config settings if user isn't login through apache ($ENV{REMOTE_USER})
#   $Self->{LoginURL} ='http://host.example.com/not-authorised-for-otrs.html';
#   $Self->{LogoutURL} ='http://host.example.com/thanks-for-using-otrs.html';
</programlisting>
</sect2>

<sect2 id='customer-auth-backend-radius'>
<title>Radius</title>

<para>
Mit den folgenden Einstellungen kann die Authentifizierung gegen einen
Radius-Server realisiert werden:
</para>

<programlisting>
    # This is a example configuration to auth. against a radius server
    $Self->{'AuthModule'} = 'Kernel::System::Auth::Radius';
    $Self->{'AuthModule::Radius::Host'} = 'radiushost';
    $Self->{'AuthModule::Radius::Password'} = 'radiussecret';
</programlisting>
</sect2>

</sect1>

<sect1 id="customer-self-registration">
<title>Kunden-Selbstanmeldung anpassen</title>

<para>
Es ist möglich, die Kunden-Selbstanmeldung für neue Kunden über
"customer.pl" anzupassen. Somit können Sie mehr optionale oder
benötigte Felder (z.B. Adresse, Ort, Telefonnummer) hinzufügen.
</para>

<para>
In unserem Beispiel wollen wir ein benötigtes Feld für die Telefonnummer
hinzufügen.
</para>

<sect2 id='customer-self-registration-dtl'>
<title>Anpassen der Weboberfläche</title>

<para>
Damit im Webinterface das zusätzliche Feld für die Telefonnummer
angezeigt wird, muss die zuständige dtl-Datei angepasst werden. Editieren Sie
<filename>Kernel/Output/HTML/Standard/CustomerLogin.dtl</filename>
und fügen Sie in Zeile 128 das gewünschte Feld hinzu. Wir möchten ein
Eingabefeld für die Telefonnummer einbauen, also wird folgende Änderung
nötig:
</para>

<programlisting>
    &lt;tr&gt;
      &lt;td&gt;$Text{"Phonenumber"}: &lt;/td&gt;
      &lt;td&gt;&lt;input type="text" name="Phone" value="$QData{"UserPhone"}" size="20" maxlength="50"&gt;&lt;/td>
    &lt;/tr&gt;
</programlisting>
</sect2>

<sect2 id="customer-self-registration-mapping">
<title>Kunden-Mapping</title>

<para>
Zusätzlich müssen Sie einen "Phone"-Eintrag zu Ihrem
Kunden-Mapping hinzufügen. Fügen Sie "CustomerUser"
Kunden-Mapping) aus <filename>Kernel/Config/Defaults.pm</filename> zu Ihrer
Datei <filename>Kernel/Config.pm</filename> hinzu und ergänzen Sie das
Phone-Feld. Danach sollte es ungefähr so aussehen:
</para>

<programlisting>
    # CustomerUser
    # (customer user database backend and settings)
    $Self->{CustomerUser} = {
        Name => 'Database Backend',
        Module => 'Kernel::System::CustomerUser::DB',
        Params => {
            # if you want to use an external database, add the
            # required settings
#            DSN => 'DBI:odbc:yourdsn',
#            DSN => 'DBI:mysql:database=customerdb;host=customerdbhost',
#            User => '',
#            Password => '',
            Table => 'customer_user',
        },
        # customer uniq id
        CustomerKey => 'login',
        # customer #
        CustomerID => 'customer_id',
        CustomerValid => 'valid_id',
        CustomerUserListFields => ['first_name', 'last_name', 'email'],
#        CustomerUserListFields => ['login', 'first_name', 'last_name', 'customer_id', 'email'],
        CustomerUserSearchFields => ['login', 'last_name', 'customer_id'],
        CustomerUserSearchPrefix => '',
        CustomerUserSearchSuffix => '*',
        CustomerUserSearchListLimit => 250,
        CustomerUserPostMasterSearchFields => ['email'],
        CustomerUserNameFields => ['salutation', 'first_name', 'last_name'],
        CustomerUserEmailUniqCheck => 1,
#        # show now own tickets in customer panel, CompanyTickets
#        CustomerUserExcludePrimaryCustomerID => 0,
#        # generate auto logins
#        AutoLoginCreation => 0,
#        AutoLoginCreationPrefix => 'auto',
#        # admin can change customer preferences
#        AdminSetPreferences => 1,
#        # just a read only source
#        ReadOnly => 1,
        Map => [
            # note: Login, Email and CustomerID needed!
            # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
            [ 'UserSalutation', 'Salutation', 'salutation',  1, 0, 'var', '', 0 ],
            [ 'UserFirstname',  'Firstname',  'first_name',  1, 1, 'var', '', 0 ],
            [ 'UserLastname',   'Lastname',   'last_name',   1, 1, 'var', '', 0 ],
            [ 'UserLogin',      'Username',   'login',       1, 1, 'var', '', 0 ],
            [ 'UserPassword',   'Password',   'pw',          0, 1, 'var', '', 0 ],
            [ 'UserEmail',      'Email',      'email',       0, 1, 'var', '', 0 ],
#            [ 'UserEmail',      'Email', 'email',           1, 1, 'var','$Env{"CGIHandle"}?Action=AgentTicketCompose&amp;ResponseID=1&amp;TicketID=$Data{"TicketID"}&amp;ArticleID=$Data{"ArticleID"}', 0 ],
            [ 'UserCustomerID', 'CustomerID', 'customer_id', 0, 1, 'var', '', 0 ],
#            [ 'UserCustomerIDs', 'CustomerIDs', 'customer_ids', 1, 0, 'var', '', 0 ],
            [ 'UserComment',     'Comment',   'comments',    1, 0, 'var', '', 0 ],
            [ 'UserPhone',       'Phone',     'phone',       1, 0, 'var', '', 0 ],
            [ 'ValidID',         'Valid',     'valid_id',    0, 1, 'int', '', 0 ],
        ],
        # default selections
        Selections => {
            UserSalutation => {
                'Mr.' => 'Mr.',
                'Mrs.' => 'Mrs.',
            },
        },
    };
</programlisting>
</sect2>

<sect2 id="customer-self-registration-customer-table">
<title>Anpassen der Kunden-Tabelle</title>

<para>
Ausserdem müssen wir eine neue Spalte zur "customer_user" Tabelle in der
Datenbank hinzufügen:
</para>

<programlisting>
ALTER TABLE customer_user ADD phone VARCHAR (200);
</programlisting>

<para>
Die Anpassungen sind beendet. Starten Sie Ihren Webserver neu (falls
Sie mod_perl benutzen) und rufen Sie über einen Browser Ihre "customer.pl"
auf, um die neuen Einstellungen zu testen.
</para>
</sect2>

</sect1>

</chapter>
