<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="manual-installation-of-otrs">

    <title>Installation From Source (Linux, Unix)</title>

    <section role="NotInToc" id="installation-disable-selinux">
        <title>Preparation: Disable SELinux</title>
        <note>
            <para>
                If your system uses SELinux, you should disable it, otherwise OTRS will not
work correctly.
            </para>
        </note>
        <para>
            Here's how to disable SELinux for RHEL/CentOS/Fedora:
            <itemizedlist>
                <listitem>
                    <para>
                        Configure SELINUX=disabled in the /etc/selinux/config file:
                    </para>
                    <para>
                        <screen><![CDATA[
# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#       enforcing - SELinux security policy is enforced.
#       permissive - SELinux prints warnings instead of enforcing.
#       disabled - No SELinux policy is loaded.
SELINUX=disabled
# SELINUXTYPE= can take one of these two values:
#       targeted - Targeted processes are protected,
#       mls - Multi Level Security protection.
SELINUXTYPE=targeted
                        ]]></screen>
                    </para>
                </listitem>
                <listitem>
                    <para>
            Reboot your system. After reboot, confirm that the getenforce command
returns <literal>Disabled</literal>:
                    </para>
                    <para>
                    <screen><![CDATA[
root> getenforce
Disabled
                        ]]></screen>
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </section>

    <section role="NotInToc">
        <title>Step 1: Unpack and Install the Application</title>

        <para>
        Unpack the source archive (for example, using <command>tar</command>) into
the directory <filename>/opt</filename>, and rename the directory from
otrs-x.x.x to otrs (see Script below).
        </para>

        <para>
        <screen><![CDATA[
root> tar xzf /tmp/otrs-x.x.x.tar.gz
root> mv otrs-x.x.x /opt/otrs
        ]]></screen>
        </para>
    </section>

    <section role="NotInToc" id="installation-of-perl-modules">
        <title>Step 2: Install Additional Programs and Perl Modules</title>
        <para>
            Use the following script to get an overview of all installed and required
CPAN modules and other external dependencies.
        </para>

        <para>
            <screen><![CDATA[
root> perl /opt/otrs/bin/otrs.CheckEnvironment.pl
Checking for Perl Modules:
  o Archive::Tar.....................ok (v1.90)
  o Archive::Zip.....................ok (v1.37)
  o Crypt::Eksblowfish::Bcrypt.......ok (v0.009)
...
            ]]></screen>
        </para>

        <note>
            <para>
                Please note that OTRS requires a working Perl installation with all "core"
modules such as the module <literal>version</literal>. These modules are not
explicitly checked by the script.  You may need to install a
<literal>perl-core</literal> package on some systems like RHEL that do not
install the Perl core packages by default.
            </para>
        </note>

        <para>
            OTRS requires a supported stable version of Node.js to be installed. Please
refer to the <ulink
url="https://nodejs.org/en/download/package-manager/">Node.js installation
instructions</ulink>.
        </para>
    </section>

    <section role="NotInToc">
        <title>Step 3: Create the OTRS User</title>
        <para>
            Create a dedicated user for OTRS:
        </para>
        <para>
            <screen><![CDATA[
root> useradd -d /opt/otrs -c 'OTRS user' otrs
            ]]></screen>
        </para>
    </section>

    <section role="NotInToc">
        <title>Step 4: Activate the Default Config File</title>
        <para>
            There is one OTRS config file bundled in
<filename>$OTRS_HOME/Kernel/Config.pm.dist</filename>.  You must activate it
by copying it without the ".dist" filename extension.
        </para>
        <para>
            <screen><![CDATA[
root> cp /opt/otrs/Kernel/Config.pm.dist /opt/otrs/Kernel/Config.pm
    ]]></screen>
        </para>
    </section>

    <section role="NotInToc" id="web-server-configuration">
        <title>Step 5: Configure the Apache Web Server</title>

        <para>
            OTRS comes with an own built-in web server that is used behind apache as a
reverse proxy (or any other reverse proxy server). A few apache modules are
needed for correct operation: <literal>proxy_module</literal>,
<literal>proxy_http_module</literal> and
<literal>proxy_wstunnel_module</literal>.
        </para>

        <para>
            <screen><![CDATA[
# On some systems like Debian and SuSE, these modules need to be specifically enabled:

root> a2enmod proxy
root> a2enmod proxy_http
root> a2enmod proxy_wstunnel
        ]]></screen>
        </para>

        <para>
            Most <application>Apache</application> installations have a
<filename>conf.d</filename> directory included.  On Linux systems you can
usually find this directory under <filename>/etc/apache</filename> or
<filename>/etc/apache2</filename>.  Log in as root, change to the
<filename>conf.d</filename> directory and link the appropriate template in
<filename>/opt/otrs/scripts/apache2-httpd.include.conf</filename> to a file
called <filename>zzz_otrs.conf</filename> in the Apache configuration
directory (to make sure it is loaded after the other configurations).
        </para>

        <para>
            <screen><![CDATA[
# Debian/Ubuntu:
root> ln -s /opt/otrs/scripts/apache2-httpd.include.conf /etc/apache2/sites-enabled/zzz_otrs.conf
        ]]></screen>
        </para>

        <para>
            Starten Sie Ihren Webserver neu, um die neue Konfiguration zu laden. Auf den
meisten Systemen lässt sich der Webserver über den Befehl <command>systemctl
restart apache2</command> neu starten.
        </para>
    </section>

    <section role="NotInToc">
        <title>Step 6: Set File Permissions</title>
        <para>
            Please execute the following command as root user to set the file and
directory permissions for OTRS.  It will try to detect the correct user and
group settings needed for your setup.
        </para>

        <para>
        <screen><![CDATA[
root> cd /opt/otrs/
root> bin/otrs.SetPermissions.pl
        ]]></screen>
        </para>
    </section>

    <section role="NotInToc" id="database-configuration">
        <title>Step 7: Setup the Database</title>
        <para>
            The following steps need to be taken to setup the database for OTRS
properly:
        </para>
        <itemizedlist>
            <listitem><para>Create a dedicated database user and database.</para></listitem>
            <listitem><para>Create the database structure.</para></listitem>
            <listitem><para>Insert the initial data.</para></listitem>
            <listitem><para>Configure the database connection in <filename>Kernel/Config.pm</filename>.</para></listitem>
        </itemizedlist>
        <note>
            <para>Please note that OTRS requires utf8 as database storage encoding.</para>
        </note>
        <section>
            <title>MySQL</title>

            <para>
                <screen><![CDATA[
#
# Run the following commands in mysql as admin user:
#

mysql -uroot -p

    # Create database
    CREATE DATABASE otrs CHARACTER SET utf8;

    # Create database user
    # Special handling for MySQL 8, as the default caching_sha2_password can only be used over secure connections.
    CREATE USER 'otrs'@'localhost' IDENTIFIED WITH mysql_native_password BY 'choose-your-password';
    # Older mysql versions:
    CREATE USER 'otrs'@'localhost' IDENTIFIED BY 'choose-your-password';

    # Assign user privileges to the new database.
    GRANT ALL PRIVILEGES ON otrs.* TO 'otrs'@'localhost';
    FLUSH PRIVILEGES;

#
# Run the following commands on the shell:
#

# Create schema and insert data.
mysql -uroot -p otrs < /opt/otrs/scripts/database/otrs-schema.mysql.sql
mysql -uroot -p otrs < /opt/otrs/scripts/database/otrs-initial_insert.mysql.sql
mysql -uroot -p otrs < /opt/otrs/scripts/database/otrs-schema-post.mysql.sql

# Configure database settings in Kernel/Config.pm
$Self->{DatabaseHost} = '127.0.0.1';
$Self->{Database}     = 'otrs';
$Self->{DatabaseUser} = 'otrs';
$Self->{DatabasePw}   = 'choose-your-password';
$Self->{DatabaseDSN}  = "DBI:mysql:database=$Self->{Database};host=$Self->{DatabaseHost};";
                ]]></screen>
            </para>

            <note>
                <para>
                    The following configuration settings are recommended for MySQL
setups. Please add the following lines to <filename>/etc/my.cnf</filename>
under the [mysqld] section:
                </para>
                <para>
                    <screen><![CDATA[
max_allowed_packet   = 64M
query_cache_size     = 32M
innodb_log_file_size = 256M
                ]]></screen>
                </para>
            </note>
        </section>

        <section>
            <title>PostgreSQL</title>

            <para>
                <screen><![CDATA[
#
# Run these commands as "postgres" user:
#
sudo su - postgres

    # Create database
    createdb --encoding=utf8 --owner=otrs otrs

    # Create database user
    echo "create user otrs password 'choose-your-password';" | psql

#
# Run these commands on the shell as 'otrs' user.
#

    # Create schema and insert data.
    export PGPASSWORD=some-pass
    psql otrs otrs -h localhost < /opt/otrs/scripts/database/otrs-schema.postgresql.sql
    psql otrs otrs -h localhost < /opt/otrs/scripts/database/otrs-initial_insert.postgresql.sql
    psql otrs otrs -h localhost < /opt/otrs/scripts/database/otrs-schema-post.postgresql.sql

# Configure database settings in Kernel/Config.pm
$Self->{DatabaseHost} = '127.0.0.1';
$Self->{Database}     = 'otrs';
$Self->{DatabaseUser} = 'otrs';
$Self->{DatabasePw}   = 'choose-your-password';
$Self->{DatabaseDSN}  = "DBI:Pg:dbname=$Self->{Database};host=$Self->{DatabaseHost};";
                ]]></screen>
            </para>
        </section>

        <section>
            <title>Finishing the Database Setup</title>

            <para>
                To verify your database setup, run the following command (as
<literal>otrs</literal> user):
            </para>
            <para>
                <screen><![CDATA[
otrs> /opt/otrs/bin/otrs.Console.pl Maint::Database::Check
Trying to connect to database 'DBI:Pg:dbname=otrs;host=localhost' with user 'otrs'...
Connection successful.
                ]]></screen>
            </para>
            <para>
                Once the database is configured correctly, please initialize the system
configuration with the following command:
            </para>
            <para>
                <screen><![CDATA[
otrs> /opt/otrs/bin/otrs.Console.pl Maint::Config::Rebuild
Rebuilding the system configuration...
Done.
            ]]></screen>
            </para>

            <note>
                <para>
                    For security reasons, please change the default password
<literal>root</literal> of the admin user <literal>root@localhost</literal>.
                </para>
                <para>
                    <screen><![CDATA[
otrs> /opt/otrs/bin/otrs.Console.pl Admin::User::SetPassword root@localhost
Generated password 'rtB98S55kuc9'.
Successfully set password for user 'root@localhost'.
                    ]]></screen>
                </para>
            </note>
        </section>
    </section>

    <section role="NotInToc" id="installation-setup-elasticsearch-cluster">
        <title>Step 8: Setup Elasticsearch Cluster</title>
        <para>
            OTRS requires an active cluster of Elasticsearch 6.0 or higher. The easiest
way is to <ulink
url="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html">setup
Elasticsearch</ulink> on the same host as OTRS and binding it to its default
port. With that, no further configuration in OTRS is needed.
        </para>
        <para>
            Additionally, OTRS requires plugins to be installed into Elasticsearch:
        </para>
        <para>
            <screen><![CDATA[
# Install required plugins for elasticsearch.
root> /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch ingest-attachment
root> /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch analysis-icu
            ]]></screen>
        </para>
        <para>
            To verify the Elasticsearch installation, you can use the following command:
<screen><![CDATA[
otrs> /opt/otrs/bin/otrs.Console.pl Maint::DocumentSearch::Check
Trying to connect to cluster...
  Connection successful.
            ]]></screen>
        </para>
    </section>

    <section role="NotInToc">
        <title>Step 9: Start the OTRS Daemon and Web Server</title>

        <para>
            The new OTRS daemon is responsible for handling any asynchronous and
recurring tasks in OTRS. The built-in OTRS web server process handles the
web requests handed over from Apache. Both processes must be started from
the <literal>otrs</literal> user.
        </para>

        <para>
            <screen><![CDATA[
otrs> /opt/otrs/bin/otrs.Daemon.pl start
otrs> /opt/otrs/bin/otrs.WebServer.pl
            ]]></screen>
        </para>
    </section>

    <section role="NotInToc">
        <title>Step 10: First Login</title>
        <para>
            Now you are ready to login to your system at <ulink
url="http://localhost/otrs/index.pl">http://localhost/otrs/index.pl</ulink>
as user <literal>root@localhost</literal> with the password that was
generated (see above).
        </para>
    </section>

    <section role="NotInToc">
        <title>Step 11: Setup Cron Jobs</title>
        <para>
            There are two default OTRS cron files in
<filename>/opt/otrs/var/cron/*.dist</filename>, and their purpose is to make
sure that the OTRS Daemon is running.  They need to be be activated by
copying them without the ".dist" filename extension.
        </para>

        <para>
            <screen><![CDATA[
otrs> cd /opt/otrs/var/cron
otrs> for foo in *.dist; do cp $foo `basename $foo .dist`; done
            ]]></screen>
        </para>

        <para>
            To schedule these cron jobs on your system, you can use the script
<filename>Cron.sh</filename> with the <literal>otrs</literal> user.
        </para>

        <para>
            <screen><![CDATA[
otrs> /opt/otrs/bin/Cron.sh start

# Stopping the cron jobs is also possible (useful for maintenance):
otrs> /opt/otrs/bin/Cron.sh stop
            ]]></screen>
        </para>

        <para>
            Nach diesem Schritt ist das Basis-Systemsetup beendet.
        </para>
    </section>

    <section role="NotInToc">
        <title>Step 12: Setup Bash Autocompletion (optional)</title>
        <para>
            All regular OTRS commandline operations happen via the otrs Console
interface <filename>bin/otrs.Console.pl</filename>. This provides an auto
completion for the bash shell which makes finding the right command and
options much easier.
        </para>
        <para>
            You can activate the bash autocompletion by installing the package
<literal>bash-completion</literal>.  It will automatically detect and load
the file <filename>/opt/otrs/.bash_completion</filename> for the
<literal>otrs</literal> user.
        </para>
        <para>
            After restarting your shell, you can just type
<filename>bin/otrs.Console.pl</filename> followed by TAB, and it will list
all available commands. If you type a few characters of the command name,
TAB will show all matching commands. After typing a complete command, all
possible options and arguments will be shown by pressing TAB.
        </para>
    </section>

    <section role="NotInToc">
        <title>Step 13: Further Information</title>
        <para>
            We advise you to read the OTRS <link
linkend="performance-tuning">performance tuning chapter</link>.
        </para>
        <para>
            Please have a look at the list of <link
linkend="additional-resources">additional resources</link> for information
about OTRS Group, the creator of and service provider for <ulink
url="https://www.otrs.com">OTRS</ulink>, and futher resources.
        </para>
    </section>

</section>
