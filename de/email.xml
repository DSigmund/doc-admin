<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- $Id: email.xml,v 1.4 2005-09-12 12:18:52 cs Exp $ -->

<chapter id="email">
<title>Email versenden/empfangen</title>

<sect1 id="email-sending">
<title>Emails versenden</title>

<sect2 id="email-sending-sendmail">
<title>Via Sendmail (Standard)</title>

<para>
OTRS ist in der Lage, Emails via Sendmail (z.B.
<ulink url="http://www.sendmail.org/">Sendmail</ulink>,
<ulink url="http://www.postfix.org/">Postfix</ulink>,
<ulink url="http://www.qmail.org">Qmail</ulink> or
<ulink url="http://www.exim.org">Exim</ulink>)
zu versenden. Die Standard-Konfiguration sollte gleich ohne
Probleme funktionieren, es wird das sendmail-Binary Ihres Betriebssystems
verwendet.
</para>

<para>
Die Konfiguration kann über die

<link linkend="adminarea-sysconfig">
grafische Administrationsoberfläche
</link>

vorgenommen werden, oder die Datei
<filename>Kernel/Config.pm</filename> wird um die entsprechenden Parameter
erweitert:
</para>

<para>
<programlisting>
    # SendmailModule
    # (Where is sendmail located and some options.
    # See 'man sendmail' for details.)
    $Self-&gt;{'SendmailModule'} = 'Kernel::System::Email::Sendmail';
    $Self-&gt;{'SendmailModule::CMD'} = '/usr/sbin/sendmail -t -i -f ';
</programlisting>
</para>

</sect2>

<sect2 id="email-sending-smtp">
<title>Via SMTP relay/smarthost</title>

<para>
Wenn kein sendmail-Binary zur Verfügung steht, kann OTRS Emails via SMTP
versenden (<ulink url="http://www.ietf.org/rfc/rfc821.txt">Simple Mail
Transfer Protocol / RFC 821</ulink>). Hauptsächlich auf
Nicht-Unix-Plattformen (z.B. Win32) kann diese Möglichkeit genutzt werden.
</para>

<para>
Die Konfiguration kann über die

<link linkend="adminarea-sysconfig">
grafische Administrationsoberfläche
</link>

vorgenommen werden, oder die Datei
<filename>Kernel/Config.pm</filename> wird um die entsprechenden Parameter
erweitert:
</para>

<para>
<programlisting>
    # SendmailModule
    $Self-&gt;{"SendmailModule"} = "Kernel::System::Email::SMTP";
    $Self-&gt;{"SendmailModule::Host"} = "mail.example.com";
    $Self-&gt;{"SendmailModule::AuthUser"} = "";
    $Self-&gt;{"SendmailModule::AuthPassword"} = "";
</programlisting>
</para>

</sect2>

</sect1>

<sect1 id="email-receiving">
<title>Emails empfangen</title>

<sect2 id="email-receiving-pop3">
<title>Via POP3-Konten - der einfache Weg (PostMasterPOP3.pl)</title>

<para>
OTRS ist in der Lage, Emails von POP3-Konten zu empfangen.
</para>

<para>
Konfigurieren Sie Ihre POP3-Konten im Admin-Bereich von OTRS in der Sektion

<link linkend="adminarea-postmasterpop3-account">
PostMaster POP3 Account
</link>
.
</para>

<para>
<screenshot>
<screeninfo>Verwaltung von POP3 Konten</screeninfo>
<graphic srccredit="Adminarea postmasterpop3 - screenshot" scale="40" fileref="screenshots/admin-postmasterpop3.png"></graphic>
</screenshot>
</para>

<para>
Mit Hilfe des Kommandos <command>bin/PostMasterPOP3.pl</command>
werden die Emails in Ihr OTRS geholt. Um die Mails regelmäßig von Ihrem
POP3-Server in das Ticket System zu übertragen, kann
<command>bin/PostMasterPOP3.pl</command> über cron ausgeführt werden.
Einen Beispiel-Cronjob finden Si in der Datei
<filename>var/cron/postmaster_pop3.dist</filename>, dieser führt
<command>bin/PostMasterPOP3.pl</command> alle 10 Minuten aus. Das Kapitel "

<link linkend="cronjobs">
Einrichten der von OTRS benötigten cron-Jobs
</link>

"  beschreibt das Zusammenspiel zwischen OTRS und cron ausführlicher.
</para>

</sect2>

<sect2 id="email-receiving-cmd">
<title>Via Kommandozeilen-Programm und z.B. procmail (PostMaster.pl)</title>

<para>
OTRS ist in der Lage, Emails über ein Kommandozeilen-Programm
(<filename>bin/PostMaster.pl</filename>) zu empfangen. Das bedeutet, dass
Emails im OTRS angezeigt werden, wenn der MDA (mail delivery agent, z.B.
procmail) die Emails an <filename>bin/PostMaster.pl</filename>" weiterleitet.
</para>

<para>
Um <filename>bin/PostMaster.pl</filename> auf der Kommandozeile ohne MDA zu
testen, führen Sie folgendes Kommando aus:
</para>

<para>
<screen>
linux:/opt/otrs# cd bin
linux:/opt/otrs/bin# cat ../doc/test-email-1.box | ./PostMaster.pl
linux:/opt/otrs/bin#
</screen>
</para>

<para>
Wird die Email in der Queue-Ansicht angezeigt, dann sind Ihre Einstellungen
in Ordnung.
</para>

<para>
Procmail ist ein sehr bekannter Email-Filter in der Linux-Umgebung, der
höchst wahrscheinlich auf Ihrem System installiert sein wird. Falls nicht,
 erhalten Sie auf der
<ulink url="http://www.procmail.org/"><citetitle>procmail
Homepage</citetitle></ulink> weitere Informationen.
</para>

<para>
Um procmail einzurichten (benötigt einen für procmail konfigurierten MDA
(z.B. sendmail, postfix, exim oder qmail)), kann die Datei
<filename>.procmailrc.dist</filename> aus dem OTRS-Homeverzeichnis
verwendet werden. Kopieren Sie <filename>.procmailrc.dist</filename> nach
<filename>.procmailrc</filename> und nehmen Sie folgende nehmen Sie
folgende Änderungen vor:
</para>

<para>
<programlisting>
SYS_HOME=$HOME
PATH=/bin:/usr/bin:/usr/local/bin
# --
# Pipe all email into the PostMaster process.
# --
:0 :
| $SYS_HOME/bin/PostMaster.pl
</programlisting>
</para>

<para>
Alle an den lokalen OTRS Benutzer gesendeten Emails werden an
<filename>bin/PostMaster.pl</filename> weitergeleitet und dadurch im Ticket
System gespeichert.
</para>
</sect2>

<sect2 id="email-receiving-fetchmail">
<title>Emails via POP3 oder IMAP und fetchmail für PostMaster.pl empfangen</title>

<para>
Um Emails von Ihrem Mailserver via POP3 oder IMAP für den
 OTRS-Rechner/lokalen OTRS-Benutzer und procmail abzuholen, benutzen Sie
<ulink url="http://www.tuxedo.org/~esr/fetchmail/">fetchmail</ulink>.
</para>

<note>
<para>
Voraussetzung ist eine funktionierende SMTP-Konfiguration auf  dem
OTRS-Rechner.
</para>
</note>

<para>
Eine Beispielkonfiguration finden Sie in der Datei
<filename>.fetchmailrc.dist</filename> im Home-Verzeichnis von OTRS.
Kopieren Sie diese Datei nach <filename>.fetchmailrc</filename> und
erweitern Sie das File um die Daten Ihrer POP3/IMAP Accounts.
</para>

<example id='fetchmailrc'>
<title>.fetchmailrc</title>

<para>
<programlisting>
#poll (mailserver) protocol POP3 user (user) password (password) is (localuser)
poll mail.example.com protocol POP3 user joe password mama is otrs
</programlisting>
</para>

</example>

<para>
Vergessen Sie nicht, die Zugriffsrechte von
<filename>.fetchmailrc</filename> auf 710 zu setzen.
</para>

<para>
Wird das Kommando <command>"fetchmail -a</command> ausgeführt
(ggf. via cron), werden alle Emails auf das lokale OTRS-Konto
weitergeleitet und mit Hilfe von procmail an
<filename>bin/PostMasterPOP3.pl</filename> übergeben.
<filename>bin/PostMasterPOP3.pl</filename> sorge wiederum dafür, dass die
neuen Mails in das Ticket System gelangen.
</para>
</sect2>

<sect2 id="email-receiving-filter">
<title>Filterung/Verteilung über PostMaster Module (für komplexere
Verteilungsszenarien)</title>

<para>
Falls die <filename>bin/PostMaster.pl</filename> oder
<filename>bin/PostMasterPOP3.pl</filename> Methoden verwendet werden, können
X-OTRS-Header mit Hilfe der PostMaster-Filtermodulen in die eingehenden
Mails eingefügt bzw. bereits vorhandene X-OTRS-Header verändert werden. Mit
Hilfe von X-OTRS-Headern kann das Ticket System bestimmte Aktionen für
Mails ausführen, z.B. diese in eine bestimmte Queue einsortieren, sie einem
bestimmten Kunden zuordnen, die Priorität ändern, usw. Eine nähere
Beschreibung der X-OTRS-Header finden Sie im Kapitel zum

<link linkend="adminarea-postmasterpop3-account">
Einrichten von POP3-Accounts
</link>

über den Administrations-Bereich von OTRS.
</para>

<para>
Es gibt verschiedene Standard-Filtermodule.
</para>

<note>
<para>
Der Jobname (z.B.
$Self-&gt;{"PostMaster::PreFilterModule"}-&gt;{"Jobname"}) muss eindeutig
sein.
</para>
</note>

<para>
Kernel::System::PostMaster::Filter::Match ist ein Standard-Modul, um
 einige Email-Header (z.B. From, To, Subject) zu prüfen und dann den
neuen Email-Header zu setzen (z.B. X-OTRS-Ignore: yes oder
X-OTRS-Queue:  spam).
</para>

<example id='filter-module-match-example'>
<title>Beispiel Jobs für das Filtermodul Kernel::System::PostMaster::Filter::Match</title>

<para>
<programlisting>
    # (block/ignore all spam email with From: noreply@)
    $Self-&gt;{'PostMaster::PreFilterModule'}-&gt;{'1-Match'} = {
        Module =&gt; 'Kernel::System::PostMaster::Filter::Match',
        Match =&gt; {
            From =&gt; 'noreply@',
        },
        Set =&gt; {
            'X-OTRS-Ignore' =&gt; 'yes',
        },
    };
    # Job Name: 2-Match
    # (sort emails with From: sales@example.com and Subject: **ORDER**
    # into queue 'Order')
    $Self-&gt;{'PostMaster::PreFilterModule'}-&gt;{'2-Match'} = {
        Module =&gt; 'Kernel::System::PostMaster::Filter::Match',
        Match =&gt; {
            To =&gt; 'sales@example.com',
            Subject =&gt; '**ORDER**',
        },
        Set =&gt; {
            'X-OTRS-Queue' =&gt; 'Order',
        },
    };
</programlisting>
</para>

</example>

<para>
Kernel::System::PostMaster::Filter::CMD ist ein Standard-Modul, um
die Emails an ein externes Kommando zu leiten und falls das Ergebnis aus
STDOUT true ist, den neuen Email-Header zu setzen (z.B. X-OTRS-Ignore: yes
oder X-OTRS-Queue: spam).
</para>

<example id='filter-module-cmd-example'>
<title>Beispiel Job für das Filtermodul Kernel::System::PostMaster::Filter::CMD</title>

<para>
<programlisting>
    # Job Name: 5-SpamAssassin
    # (SpamAssassin example setup, ignore spam emails)
    $Self-&gt;{'PostMaster::PreFilterModule'}-&gt;{'5-SpamAssassin'} = {
        Module =&gt; 'Kernel::System::PostMaster::Filter::CMD',
        CMD =&gt; '/usr/bin/spamassassin | grep -i "X-Spam-Status: yes"',
        Set =&gt; {
            'X-OTRS-Ignore' =&gt; 'yes',
        },
    };
</programlisting>
</para>

</example>

<para>
Natürlich ist es auch möglich, eigene PostMaster-Filtermodule zu entwickeln.
</para>

</sect2>

</sect1>

</chapter>
