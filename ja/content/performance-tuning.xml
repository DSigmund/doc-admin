<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="performance-tuning">
    <title>パフォーマンス・チューニング</title>

    <abstract>
        <para>
            以下はOTRS導入のための強化テクニックのパフォーマンスのリストです。構成、コーディング、メモリー使用、その他を含みます。
        </para>
    </abstract>

    <section id="performance-tuning-otrs">
        <title>OTRS</title>
        <para>
            OTRSのパフォーマンスを改善するいくつかのオプションがあります。
        </para>

        <section id="performance-tuning-otrs-index">
            <title>TicketIndexModule</title>
            <para>
                There are two backend modules for the index for the ticket queue view:
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::IndexAccelerator::RuntimeDB</literal></term>
                    <listitem>
                        <para>
                            This is the default option, and will generate each queue view on the fly
from the ticket table. You will not have performance trouble until you have
about 60,000 open tickets in your system.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::IndexAccelerator::StaticDB</literal></term>
                    <listitem>
                        <para>
                            The most powerful module, should be used when you have above 80,000 open
tickets. It uses an extra <literal>ticket_index</literal> table, which will
be populated with keywords based on ticket data. Use
<filename>bin/otrs.Console.pl Maint::Ticket::QueueIndexRebuild</filename>
for generating an initial index after switching backends.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>
                You can change the used IndexAccelerator module via SysConfig.
            </para>
        </section>

        <section id="performance-tuning-otrs-search">
            <title>Ticket Search Index</title>
            <para>
                OTRS uses a special search index to perform full-text searches across fields
in articles from different communication channels.
            </para>
            <para>
                To create an initial index, use <filename>bin/otrs.Console.pl
Maint::Ticket::FulltextIndex --rebuild</filename>.
            </para>
            <note>
                <para>
                    Actual article indexing happens via an OTRS daemon job in the
background. While articles which were just added in the system are marked
for indexing immediately, it could happen their index is available within a
few minutes.
                </para>
            </note>
            <para>
                There are some options available for fine tuning the search index:
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::IndexArchivedTickets</literal></term>
                    <listitem>
                        <para>
                            Defines if archived tickets will be included in the search index (off by
default). This is advisable to keep the index small on large systems with
archived tickets. If this is turned off, archived tickets will not be found
by full-text searches.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::Attribute</literal></term>
                    <listitem>
                        <para>
                            The attribute <literal>WordCountMax</literal> defines the maximum number of
words which will be processed to build up the index. For example only the
first 1000 words of an article body are stored in the article search
index. The attributes <literal>WordLengthMin</literal> and
<literal>WordLengthMax</literal> are used as word length boundaries. Only
words with a length between these two values are stored in the article
search index.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::Filters</literal></term>
                    <listitem>
                        <para>
                            There are three default filters defined:
                        </para>
                        <itemizedlist mark='opencircle'>
                            <listitem>
                                <para>
                                    The first filter strips out special chars like: <literal>, &amp; &lt; &gt; ?
" ! * | ; [ ] ( ) + $ ^=</literal>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    The second filter strips out words which begin or ends with one of following
chars: <literal>' : .</literal>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    The third filter strips out words which do not contain a word-character:
<literal>a-z, A-Z, 0-9, _</literal>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Ticket::SearchIndex::StopWords</literal></term>
                    <listitem>
                        <para>
                            There are so-called stop-words defined for some languages. These stop-words
will be skipped while creating the search index.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="performance-tuning-otrs-storage">
            <title>Article Storage (Email, Phone and Internal Articles)</title>
            <para>
                There are two different backend modules for the article storage of phone,
email and internal articles (configured via
<literal>Ticket::Article::Backend::MIMEBase::ArticleStorage</literal>):
            </para>
            <variablelist>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::Article::Backend::MIMEBase::ArticleStorageDB</literal></term>
                    <listitem>
                        <para>
                            This default module will store attachments in the database.
                        </para>
                        <note>
                            <para>
                                Don't use it with large setups.
                            </para>
                        </note>
                        <para>
                            Pro: works with multiple front end servers.
                        </para>
                        <para>
                            Con: requires much storage space in the database.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>Kernel::System::Ticket::Article::Backend::MIMEBase::ArticleStorageFS</literal></term>
                    <listitem>
                        <para>
                            Use this module to store attachments on the local file system.
                        </para>
                        <note>
                            <para>
                                Recommended for large setups.
                            </para>
                        </note>
                        <para>
                            賛成意見: 速いですね!
                        </para>
                        <para>
                            Con: If you have multiple front end servers, you must make sure the file
system is shared between the servers. Place it on an NFS share or preferably
a SAN or similar solution.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <note>
                <para>
                    You can switch from one back-end to the other on the fly. You can switch the
backend in the SysConfig, and then run the command line utility
<filename>bin/otrs.Console.pl Admin::Article::StorageSwitch</filename> to
put the articles from the database onto the filesystem or the other way
around. You can use the <emphasis>--target</emphasis> option to specify the
target backend. Please note that the entire process can take considerable
time to run, depending on the number of articles you have and the available
CPU power and/or network capacity.
                </para>
            </note>
            <para>
                <screen><![CDATA[
shell> bin/otrs.Console.pl Admin::Article::StorageSwitch --target ArticleStorageFS
                ]]></screen>
            </para>
            <para>
                <emphasis>スクリプト:記憶バックエンドをデータベースからファイルシステムまで切り替えること。</emphasis>
            </para>
            <para>
                If you want to keep old attachments in the database, you can activate the
SysConfig option
<literal>Ticket::Article::Backend::MIMEBase::CheckAllStorageBackends</literal>
to make sure OTRS will still find them.
            </para>
        </section>

        <section>
            <title>チケットのアーカイブに保管</title>

            <para>
                監査に耐えうるシステムとしてOTRSを使うならば、完了したチケットを削除することはよい考えとはいえません。そのため我々はチケットをアーカイブすることができる機能を実装しました。
            </para>
            <para>
                Tickets that match certain criteria can be marked as "archived". These
tickets are not accessed if you do a regular ticket search or run a Generic
Agent job. The system itself does not have to deal with a huge amount of
tickets any longer as only the "latest" tickets are taken into consideration
when using OTRS. This can result in a huge performance gain on large
systems.
            </para>
            <para>
                アーカイブ機能を使用するには次のステップに従います:
            </para>
            <orderedlist>
                <listitem>
                    <para>
                        SysConfigのアーカイブシステムを活性化します。
                    </para>
                    <para>
                        管理者ページで、SysConfigに行って、グループ・<literal>チケット</literal>を選択してください。<literal>Core::Ticket</literal>では、デフォルトで「no」にセットされるオプション<literal>Ticket::ArchiveSystem</literal>を見つけます。この設定を「yes」に変更し変更を保存します。
                    </para>
                </listitem>
                <listitem>
                    <para>
                        GenericAgentジョブを定義する
                    </para>
                    <para>
                        On the Admin page, select GenericAgent and add a new job there.
                    </para>
                    <para>
                        <orderedlist>
                            <listitem>
                                <para>
                                    ジョブ設定
                                </para>
                                <para>
                                    アーカイブに保管するジョブの名前を与え、この仕事を予定する適切なオプションを選択してください。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    チケット・フィルタ
                                </para>
                                <para>
                                    チケット・フィルタは選択された基準と一致するチケット検索です。完了した状態（数か月前に完了したた）のチケットのみをアーカイブするのは良い考えです。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    チケット・アクション
                                </para>
                                <para>
                                    このセクションでは、「選択したチケットをアーカイブ」「チケットをアーカイブ」とラベルしたフィールドをセットしてください。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    仕事を保存する
                                </para>
                                <para>
                                    ページの終わりに、仕事を保存するオプションを見つけるでしょう。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    影響を受けたチケット
                                </para>
                                <para>
                                    システムは、一般担当者のジョブを実行する時にアーカイブされる全てのチケットを表示します。
                                </para>
                            </listitem>
                        </orderedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        チケット検索
                    </para>
                    <para>
                        チケットを検索する場合、システムはデフォルトでアーカイブに保管されないチケットを探索します。さらにアーカイブに保管されたチケットを捜したい場合は、検索基準を定義する時に単に「archive
search」を加えてください。
                    </para>
                </listitem>
            </orderedlist>
        </section>
        <section id="performance-tuning-otrs-cache">
            <title>キャッシュ</title>
            <para>
                OTRS caches a lot of temporary data in
<filename>/opt/otrs/var/tmp</filename>. Please make sure that this uses a
high performance file system/storage. If you have enough RAM, you can also
try to put this directory on a ramdisk like this:
            </para>
            <para>
                <screen><![CDATA[
shell> /opt/otrs/bin/otrs.Console.pl Maint::Session::DeleteAll
shell> /opt/otrs/bin/otrs.Console.pl Maint::Cache::Delete
shell> sudo mount -o size=16G -t tmpfs none /opt/otrs/var/tmp

# add persistent mount point in /etc/fstab
                ]]></screen>
            </para>
            <note>
                <para>
                    Please note that this will be a non-permanent storage that will be lost on
server reboot. All your sessions (if you store them in the filesystem) and
your cache data will be lost.
                </para>
            </note>
            <para>
                There is also a centralized memcached based cache backend available for
purchase from OTRS Group.
            </para>
        </section>

    </section>


    <section id="performance-tuning-database">
        <title>データベース</title>
        <para>
            DB発行は使用されているデータベースによって変わります。データベース管理者とデータベースかチェックのためのドキュメンテーションを研究してください。
        </para>

        <section id="performance-tuning-database-mysql">
            <title>MySQL</title>
            <para>
                MySQLテーブル・タイプMyISAM(デフォルトです)を使用し、テーブルの大部分を削除したならば、あるいは可変長列(VARCHAR、BLOBあるいはTEXTカラムがあるテーブル)でテーブルに多くの変更を加えていれば、「optimize（最適化）」コマンドでデータ・ファイル(テーブル)をフラグメンテーション解消しなければいけません。
            </para>
            <para>
                mysqldデーモンがCPU時間の多くを必要とする場合、テーブルの最適化を試みるべきです。-
チケット、ticket_historyおよび記事(下記のスクリプトを参照)。
            </para>
            <para>
            <screen><![CDATA[
shell> mysql -u user -p database
mysql> optimize table ticket;
mysql> optimize table ticket_history;
mysql> optimize table article;
            ]]></screen>
            </para>
            <para>
                <emphasis>スクリプト:データ・ベース・テーブルの最適化。</emphasis>
            </para>
        </section>

        <section id="performance-tuning-database-postgresql">
            <title>PostgreSQL</title>
            <para>
                PostgreSQL is best tuned by modifying the
<filename>postgresql.conf</filename> file in your PostgreSQL data
directory. For advice on how to do this, reference the following articles:
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <ulink url="http://www.revsys.com/writings/postgresql-performance.html">
<citetitle>http://www.revsys.com/writings/postgresql-performance.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <ulink url="http://varlena.com/GeneralBits/Tidbits/perf.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/perf.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <ulink url="http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                If performance is still not satisfactory, we suggest that you join the
PostgreSQL Performance mailing list ( <ulink
url="http://www.postgresql.org/community/lists/">
<citetitle>http://www.postgresql.org/community/lists/</citetitle> </ulink>
), and ask questions there. The folks on the PostgreSQL list are very
friendly and can probably help.
            </para>
        </section>

    </section>

    <section id="performance-tuning-webserver">
        <title>ウェブサーバ</title>
        <para>
            Of course you should use mod_perl 2.0 ( <ulink
url="http://perl.apache.org/">
<citetitle>http://perl.apache.org/</citetitle> </ulink> ). It's much faster
(~ *100) than pure CGI, but it needs more RAM.
        </para>

        <section id="performance-tuning-webserver-db">
            <title>事前に確立しているデータベース接続</title>
            <para>
                You can have the database connections pre-established on startup of the web
server. This saves time (see <filename>README.webserver</filename>).
            </para>
        </section>

        <section id="performance-tuning-webserver-startup">
            <title>プレインストールされたモジュール - startup.pl</title>
            <para>
                Use the startup script <filename>scripts/apache2-perl-startup.pl</filename>
for preloaded/precompiled Perl modules on your mod_perl webserver to be
faster, with a smaller memory footprint (see
<filename>README.webserver</filename>).
            </para>
        </section>
        <section id="performance-tuning-webserver-reload">
            <title>ディスク上で更新された時パール・モジュールをリロードします。</title>
            <para>
                By default Apache::Reload is used in
<filename>scripts/apache2-httpd.include.conf</filename>. Disable it and you
will get 8% more speed. But remember to restart the web server if you
install any modules via the OTRS Package Manager, or any values in your
SysConfig or in <filename>Kernel/Config.pm</filename>.
            </para>
            <important>
                <para>
                    This would also mean you can't use the OTRS Package Manager via the web
interface, you will need to use the console commands:
<filename>bin/otrs.Console.pl Admin::Package::*</filename>.
                </para>
            </important>
        </section>

        <section id="performance-tuning-webserver-strategy">
            <title>正しい戦略の選択</title>
            <para>
                If you have a larger installation, e.g. over 1,000 new tickets per day and
over 40 agents, it is a good idea to read the chapters on Performance of the
mod_perl User's Guide ( <ulink
url="http://perl.apache.org/docs/2.0/user/index.html">
<citetitle>http://perl.apache.org/docs/2.0/user/index.html</citetitle>
</ulink> ).
            </para>
        </section>

        <section id="performance-tuning-webserver-gzip">
            <title>mod_gzip/mod_deflate</title>
            <para>
                If your bandwidth is small, use <literal>mod_deflate</literal> for
Apache2. If you have an html page with 45k,
<literal>mod_gzip</literal>/<literal>mod_deflate</literal> compresses it to
about 7k. The drawback is that this increases the load on the server side.
            </para>
        </section>

    </section>

</chapter>
