<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- $Id: performance-tuning.xml,v 1.10 2010-09-07 23:00:31 en Exp $ -->

<chapter id="performance-tuning">
<title>Performance Tuning</title>

<abstract>
<para>
An exhaustive list of various techniques you might want to use to get the
most performance possible out of your OTRS system: configuration, coding,
memory use and more.
</para>
</abstract>

<section id="performance-tuning-otrs">
<title>OTRS</title>
<para>
There are several options to improve the performance of OTRS.
</para>

<section id="performance-tuning-otrs-index">
<title>TicketIndexModule</title>
<para>
There are two backend modules for the ticket index:
</para>

<para>
<itemizedlist mark='opencircle'>

<listitem>
<para>
Kernel::System::Ticket::IndexAccelerator::RuntimeDB (default), generate
each queue view on the fly from the ticket table. You will not have performance
trouble until you have about 60,000 tickets (with 6,000 open tickets) in your system.
</para>
</listitem>

<listitem>
<para>
Kernel::System::Ticket::IndexAccelerator::StaticDB, the most powerful module, it
should be used when you have above 80,000 tickets (more than 6,000 open tickets) -
use an extra ticket_index table, works like a view. Use bin/RebuildTicketIndex.pl
for an initial index build.
</para>
</listitem>

</itemizedlist>
</para>

<para>
The used backend module for the ticket index is specified in Kernel/Config.pm, as shown
in the Script 21.1 below.
</para>

<para>
<programlisting>
[...]
    $Self->{TicketIndexModule} = 'Kernel::System::Ticket::IndexAccelerator::RuntimeDB';
[...]
</programlisting>
</para>

<para>
    <emphasis>Script 21.1. Identifying the used backend module for the ticket index.</emphasis>
</para>
</section>


<section id="performance-tuning-otrs-storage">
<title>TicketStorageModule</title>
<para>
There are two different backend modules for the ticket/article storage:
</para>

<para>
<itemizedlist mark='opencircle'>

<listitem>
<para>
Kernel::System::Ticket::ArticleStorageDB (default), store attachments, etc.
in the database. Note: Don't use it for large set ups.
</para>
<para>
Pro: If your webserver user isn't the otrs user, use this module to avoid
file permission problems.
</para>
<para>
Contra: It's not really advisable to store attachments in your database. Take care
that your database is able to store large objects. E.g. MySQL (config)
"set-variable = max_allowed_packet=8M" to store 8 MB objects (default is 2M).
</para>
</listitem>

<listitem>
<para>
Kernel::System::Ticket::ArticleStorageFS, store attachments etc. on the local
file system. Note: Recommended for large set ups.
</para>
<para>
Pro: Fast!
</para>
<para>
Contra: Your web server user should be the otrs user (file system permissions!).
</para>
</listitem>

</itemizedlist>

</para>

<para>
Note: you can switch from one to the other backend on the fly. To know which backend
is in use, check in the Kernel/Config.pm file, as shown in the Script 21.2 below.
</para>

<para>
<programlisting>
[...]
    $Self->{Ticket::StorageModule} = 'Kernel::System::Ticket::ArticleStorageDB';
[...]
</programlisting>
</para>

<para>
    <emphasis>Script 21.2. Identifying the used backend module for the ticket/article storage.</emphasis>
</para>

</section>

</section>


<section id="performance-tuning-database">
<title>Database</title>
<para>
This depends on the database you are using. If you're having trouble, read the
documentation for your database or ask your database administrator.
</para>

<section id="performance-tuning-database-mysql">
<title>MySQL</title>
<para>
If you use MySQL table type MyISAM (which is the default), and have deleted a
large part of a table or if you have made many changes to a table with
variable-length rows (tables that have VARCHAR, BLOB or TEXT columns),
you need to defragment the datafile (tables) with the "optimize" command.
</para>
<para>
You should try this if mysqld needs a lot of your CPU time. Optimize tables
ticket, ticket_history and article (see Script 21.3 below).
</para>

<para>
<programlisting>
shell$ mysql -u user -p database
mysql$ optimize table ticket;
mysql$ optimize table ticket_history;
mysql$ optimize table article;
</programlisting>
</para>

<para>
    <emphasis>Script 21.3. Optimizing data base tables.</emphasis>
</para>

</section>

<section id="performance-tuning-database-postgresql">
<title>PostgreSQL</title>
<para>
PostgreSQL is best tuned by modifying the postgresql.conf file in your
PostgreSQL data directory. For advice on how to do this, see these
articles:
</para>

<para>
    <itemizedlist>
        <listitem>
            <para>
            <ulink url="http://www.revsys.com/writings/postgresql-performance.html">
            <citetitle>http://www.revsys.com/writings/postgresql-performance.html</citetitle>
            </ulink>
            </para>
        </listitem>
        <listitem>
            <para>
            <ulink url="http://varlena.com/GeneralBits/Tidbits/perf.html">
            <citetitle>http://varlena.com/GeneralBits/Tidbits/perf.html</citetitle>
            </ulink>
            </para>
        </listitem>
        <listitem>
            <para>
            <ulink url="http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html">
            <citetitle>http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html</citetitle>
            </ulink>
            </para>
        </listitem>
    </itemizedlist>
</para>

<para>
If performance is still not satisfactory, we suggest that you join the
PostgreSQL Performance mailing list
(
<ulink url="http://www.postgresql.org/community/lists/">
    http://www.postgresql.org/community/lists/
</ulink>
) and ask questions there. The folks on the PostgreSQL list are very friendly
and can probably help.
</para>
</section>

</section>


<section id="performance-tuning-webserver">
<title>Webserver</title>
<para>
Of course you should use mod_perl 2.0 (
<ulink url="http://perl.apache.org/">
<citetitle>http://perl.apache.org/</citetitle>
</ulink>).
It's much faster (~ * 100) than pure cgi. But needs more RAM. So your
httpd with mod_perl will be about 16 MB (~10MB shared).
</para>

<section id="performance-tuning-webserver-db">
<title>Pre-establish database connections</title>
<para>
You can have the database connections pre-established on startup of the web server.
This saves time (see README.webserver).
</para>
</section>

<section id="performance-tuning-webserver-startup">
<title>Preloaded modules - startup.pl</title>
<para>
Use the scripts/apache-perl-startup.pl (mod_perl 1.0) or scripts/apache2-perl-startup.pl (mod_perl 2.0) startup script for preloaded/precompiled Perl
modules on your mod_perl webserver to be faster and smaller (see README.webserver).
</para>
</section>
<section id="performance-tuning-webserver-reload">
<title>Reload Perl modules when updated on disk</title>
<para>
Per default Apache::Reload (mod_perl 2.0) is used
in scripts/apache2-httpd.include.conf. Disable it and you will get 8% more
speed. But remember to restart the web server if you change Kernel/Config.pm
or any other modules!
Important: this would also mean you can't use the OTRS-Packet-Manager via the web interface, you need to use
CMD - bin/opm.pl.
</para>
</section>

<section id="performance-tuning-webserver-strategy">
<title>Choosing the Right Strategy</title>
<para>
If you have a really large installation (over 1,000 new tickets a day and over 40
agents) it is a good idea to read "Choosing the Right Strategy"
(<ulink url="http://perl.apache.org/docs/1.0/guide/strategy.html">
<citetitle>http://perl.apache.org/docs/1.0/guide/strategy.html</citetitle>
</ulink>).
</para>
</section>

<section id="performance-tuning-webserver-gzip">
<title>mod_gzip/mod_deflate</title>
<para>
If your bandwidth is a little bit small, use mod_gzip for Apache1
(<ulink url="http://www.schroepl.net/projekte/mod_gzip/">
<citetitle>http://www.schroepl.net/projekte/mod_gzip/</citetitle>
</ulink>) or mod_deflate for Apache2 (default module in Apache2).
If you have an html page with 45k, mod_gzip/mod_deflate compresses it. The page will be
about 7k.
</para>
</section>

</section>

</chapter>
