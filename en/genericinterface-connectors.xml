<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- $Id: genericinterface-connectors.xml,v 1.1 2012-01-31 06:21:10 cr Exp $ -->


<section id="genericinterface-connectors">
    <title>Connectors</title>
    <para>
        A Connector is in essence set of actions called Operations if OTRS acts as a web
        service provider or Invokers if OTRS acts as a web service requester. But it can also
        include special Mappings or Transports
    </para>
    <para>
        One Connector can have only Operations, Only Invokers or both. A connector can even use
        parts of other connectors like the Mappings or Transports if they are not so specific
        for the Connector that implements them.
    </para>
    <para>
        Due to the modular design of the Generic Interface a Connector can be seen as a plug-in;
        this means that by adding Connectors the capabilities of the generic interface can be
        extended using: OTRS Feature add ons, OTRS Custom modules, 3rd Party modules,
        and so on.
    </para>

    <section id="genericinterface-bundled-connectors">
        <title>Bundled Connectors</title>
        <para>
            Included with this version of OTRS the following connectors are ready to be used.
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    Session
                </para>
            </listitem>
            <listitem>
                <para>
                    Ticket
                </para>
            </listitem>
        </itemizedlist>

        <section id="generic-session-connector">
            <title>Session Connector</title>
            <para>
                This connector is capable to create a valid SessionID that can be used in any
                other operation.
            </para>
            <itemizedlist>
                <para>
                    Provides:
                </para>
                <listitem>
                    <para>
                        Operations:
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                SessionCreate
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <section id="generic-session-connector-operations">
                <title>Operations</title>
                <section id="generic-session-connector-operations-sessioncreate">
                    <title>SessionCreate</title>
                    <para>
                        Creates a new new valid SessionID to be used in other operations from other
                        connectors like TicketCreate.
                    </para>
                    <note>
                        <para>
                            To use the SessionID in other operations from other connectors is
                            necessary that the operation implements authentication by SessionID.
                            all the rest of the bundled operations are capable to accept a valid
                            SessionID as an authentication method.
                        </para>
                    </note>
                </section>
            </section>
        </section>

        <section id="generic-ticket-connector">
            <title>Ticket Connector</title>
            <para>
                This connector supplies the basic functionality to interact with tickets
            </para>
            <itemizedlist>
                <para>
                    Provides:
                </para>
                <listitem>
                    <para>
                        Operations:
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                TicketCreate
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                TicketUpdate
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                TicketGet
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                TicketSearch
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <section id="generic-ticket-connector-operations">
                <title>Operations</title>
                <section id="generic-ticket-connector-operations-ticketcreate">
                    <title>TicketCreate</title>
                    <para>
                        Provides an interface to create ticket in OTRS, a ticket must contain an
                        Article and can contain several attachments, all defined Dynamic Fields
                        can be also set on TicketCreate operation.
                    </para>
                </section>
                <section id="generic-ticket-connector-operations-ticketupdate">
                    <title>TicketCreate</title>
                    <para>
                        TicketUpdate operation add the capability to modify attributes from a
                        ticket or add a new article, including attachments and all defined
                        dynamic fields for the ticket and the new article.
                    </para>
                    <note>
                        <para>
                            It is not necessary to create a new article to modify a ticket
                            attribute.
                        </para>
                    </note>
                </section>
                <section id="generic-ticket-connector-operations-ticketget">
                    <title>TicketGet</title>
                    <para>
                        This operation is used to get all the attributes of a ticket including the
                        dynamic fields, all the articles and all the attachments that belongs to
                        the ticket.
                    </para>
                </section>
                <section id="generic-ticket-connector-operations-ticketsearch">
                    <title>TicketSearch</title>
                    <para>
                        TicketSearch operation returns a list of Ticket IDs that matches a
                        predefined criteria.
                    </para>
                </section>
            </section>
        </section>
    </section>
    <section id="Sgenericinterface-bundled-connectors-examples">
        <title>Examples:</title>
        <section>
            <title>Web Service Configuration</title>
            <para>
                The following is a basic but complete web service configuration file in YAML
                format to use all the Ticket Connector operations, in order to use it in OTRS you
                need to copy the content, save it into a file called GenericTicketConnector.yml,
                and import it into OTRS in the Web Services screen in the Admin panel by clicking
                in the "Add web service" action from the overview screen and then clicking in the
                "Import web service" action in the add screen.
            </para>
            <para>
                <programlisting>
                    <![CDATA[
---
Debugger:
  DebugThreshold: debug
  TestMode: 0
Description: Ticket Connector Sample
FrameworkVersion: 3.1.x CVS
Provider:
  Operation:
    SessionCreate:
      Description: Creates a Session
      MappingInbound: {}
      MappingOutbound: {}
      Type: Session::SessionCreate
    TicketCreate:
      Description: Creates a Ticket
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketCreate
    TicketUpdate:
      Description: Updates a Ticket
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketUpdate
    TicketGet:
      Description: Retrieve Ticket data
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketGet
    TicketSearch:
      Description: Search for Tickets
      MappingInbound: {}
      MappingOutbound: {}
      Type: Ticket::TicketSearch
  Transport:
    Config:
      MaxLength: 100000000
      NameSpace: http://www.otrs.org/TicketConnector/
    Type: HTTP::SOAP
RemoteSystem: ''
Requester:
  Transport:
    Type: ''
                    ]]>
                </programlisting>
            </para>
            <note>
                <para>
                    It can be also possible to use the Mapping Simple module in order to specify
                    different values or attribute names and covert them to the required values and
                    attribute names. this settings can be done from the web interface or
                    specified in the YAML file, here it is an example:
                </para>
            </note>
            <example id='ticketcreate-operation-with-mapping'>
                <title>TicketCreate operation using Mapping Simple </title>
                <para>
                    In the following example the MappingInbound configuration has been changed
                    to convert the value "My State" to "open". Notice that this is only the
                    configuration for TicketCreate operation and not for the complete web service.
                </para>
                <programlisting>
                    <![CDATA[
    TicketCreate:
      Description: Creates a Ticket
      MappingInbound:
        Config:
          KeyMapDefault:
            MapTo: ''
            MapType: Keep
          KeyMapExact:
            State: State
          ValueMap:
            State:
              ValueMapExact:
                My State: open
          ValueMapDefault:
            MapTo: ''
            MapType: Keep
        Type: Simple
      MappingOutbound: {}
      Type: Ticket::TicketCreate
                    ]]>
                </programlisting>
            </example>
        </section>
        <section>
            <title>Perl SOAP Requester</title>
            <para>
                The following code is a Perl script that can connect to OTRS via the generic
                interface, to perform the operations provided by the Ticket Connector, it uses two
                Perl CPAN modules SOAP::Lite and Data::Dumper, be sure that your environment is
                capable to use that modules before you try to run the scipt.
            </para>
            <para>
                <programlisting>
                    <![CDATA[
#!/usr/bin/perl -w
# --
# otrs.SOAPRequest.pl - sample to send a SOAP request to OTRS Generic Interface Ticket Connector
# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/
# --
# $Id: genericinterface-connectors.xml,v 1.1 2012-01-31 06:21:10 cr Exp $
# --
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU AFFERO General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# or see http://www.gnu.org/licenses/agpl.txt.
# --

use strict;
use warnings;

# use ../ as lib location
use File::Basename;
use FindBin qw($RealBin);
use lib dirname($RealBin);

use SOAP::Lite;
use Data::Dumper;

# ---
# Variables to be defined.

# this is the URL for the web service
# the format is
# <HTTP_TYPE>:://<OTRS_FQDN>/nph-genericinterface.pl/Webservice/<WEB_SERVICE_NAME>
# or
# <HTTP_TYPE>:://<OTRS_FQDN>/nph-genericinterface.pl/WebserviceID/<WEB_SERVICE_ID>
my $URL = 'http://localhost/otrs/nph-genericinterface.pl/Webservice/GenericTicketConnector';

# this name space should match the specified name space in the SOAP transport for the web service.
my $NameSpace = 'http://www.otrs.org/TicketConnector/';

# this is operation to execute, it could be TicketCreate, TicketUpdate, TicketGet, TicketSearch
# or SessionCreate. and they must to be defined in the web service.
my $Operation = 'TicketCreate';

# this variable is used to store all the parameters to be included on a request in XML format, each
# operation has a determined set of mandatory and non mandatory parameters to work correctly, please
# check OTRS Admin Manual in order to get the complete list.
my $XMLData = '
<UserLogin>some user login</UserLogin>
<Password>some password</Password>
<Ticket>
    <Title>some title</Title>
    <CustomerUser>some customer user login</CustomerUser>
    <Queue>some queue</Queue>
    <State>some state</State>
    <Priority>some priority</Priority>
</Ticket>
<Article>
    <Subject>some subject</Subject>
    <Body>some body</Body>
    <ContentType>text/plain; charset=utf8</ContentType>
</Article>
';

# ---

# create a SOAP::Lite data structure from the provided XML data structure.
my $SOAPData = SOAP::Data
    ->type( 'xml' => $XMLData );

my $SOAPObject = SOAP::Lite
    ->uri($NameSpace)
    ->proxy($URL)
    ->$Operation($SOAPData);

# check for a fault in the soap code.
if ( $SOAPObject->fault ) {
    print $SOAPObject->faultcode, " ", $SOAPObject->faultstring, "\n";
}

# otherwise print the results.
else {

    # get the XML response part from the SOAP message.
    my $XMLResponse = $SOAPObject->context()->transport()->proxy()->http_response()->content();

    # deserialize response (convert it into a perl structure).
    my $Deserialized = eval {
        SOAP::Deserializer->deserialize($XMLResponse);
    };

    # remove all the headers and other not needed parts of the SOAP message.
    my $Body = $Deserialized->body();

    # just output relevant data and no the operation name key (like TicketCreateResponse).
    for my $ResponseKey ( keys %{$Body} ) {
        print Dumper( $Body->{$ResponseKey} );
    }
}
                    ]]>
                </programlisting>
            </para>
        </section>
    </section>
</section>
