<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- $Id: acl.xml,v 1.13 2011-11-22 16:57:42 cr Exp $ --><chapter id="acl" >
<title>Access Control Lists (ACLs)</title>

<para>
    From OTRS 2.0 on, Access Control Lists (ACLs) can be used to control access to tickets, modules, queues, etc.,
    or to influence actions on tickets (closing, moving, etc.) in certain situations.
    ACLs can be used to supplement the existing permission system of
    <link linkend="adminarea-roles">roles</link> and <link linkend="adminarea-groups">groups</link>. Using ACLs,
    rudimental workflows within the system can be mapped, based on ticket attributes.
</para>

<para>
    As yet, ACLs cannot be created using the <link linkend="adminarea-sysconfig">SysConfig interface</link>.
    They must be directly entered into the <filename>Kernel/Config.pm</filename> file.
    Some ACL examples are listed below, including a reference of all possible important ACL settings:
</para>

<para>
<example id="acl-move">
<title>ACL allowing movement into a queue of only those tickets with ticket priority 5.</title>

<programlisting>
    # ticket acl
    $Self->{TicketAcl}->{'ACL-Name-2'} = {
        # match properties
        Properties => {
            # current ticket match properties
            Ticket => {
                Queue => ['Raw'],
                Priority => ['5 very high'],
            }
        },
        # return possible options (white list)
        Possible => {
            # possible ticket options (white list)
            Ticket => {
                Queue => ['Alert'],
            },
        },
    };
</programlisting>
</example>
</para>

<para>
<example id="acl-close" >
<title>ACL disabling the closing of tickets in the raw queue, and hiding the close button.</title>

<programlisting>
    $Self->{TicketAcl}->{'ACL-Name-1'} = {
        # match properties
        Properties => {
            # current ticket match properties
            Ticket => {
                Queue => ['Raw'],
            }
        },
        # return possible options (white list)
        Possible => {
            # possible ticket options (white list)
            Ticket => {
                State => ['new', 'open', 'pending reminder'],
            },
            # possible action options
            Action => {
                AgentTicketLock => 1,
                AgentTicketZoom => 1,
                AgentTicketClose => 0,
                AgentTicketPending => 1,
                AgentTicketNote => 1,
                AgentTicketHistory => 1,
                AgentTicketPriority => 1,
                AgentTicketFreeText => 1,
                AgentTicketHistory => 1,
                AgentTicketCompose => 1,
                AgentTicketBounce => 1,
                AgentTicketTicketPrint => 1,
                AgentTicketForward => 1,
                AgentTicketTicketLink => 1,
                AgentTicketPrint => 1,
                AgentTicketPhone => 1,
                AgentTicketCustomer => 1,
                AgentTicketOwner => 1,
            },
        },
    };
</programlisting>
</example>
</para>

<para>
<example id="acl-state" >
<title>ACL removing always state closed successful.</title>

<programlisting>
    $Self->{TicketAcl}->{'ACL-Name-5'} = {
        # match properties
        Properties => {
            # current ticket match properties (match always)
        },
        # return possible options
        PossibleNot => {
            # possible ticket options
            Ticket => {
                State => ['closed successful'],
            },
        },
    };
</programlisting>
</example>
</para>

<para>
<example id="acl-new-ticket-service" >
<title>ACL only showing Hardware services for tickets that are created in queues that start with &quot;HW&quot;.</title>

<programlisting>
    $Self->{TicketAcl}->{'Only-Hardware-Services-for-HW-Queues'} = {
        # match properties
        # note we don't have "Ticket => {" because there's no ticket yet
        Properties => {
        Queue => {
            Name => ['[RegExp]HW'],
            }
        },
        # return possible options
        Possible => {
            # possible ticket options
            Ticket => {
                Service => ['[RegExp]^(Hardware)'],
            },
        },
    };
</programlisting>
</example>
</para>

<para>
In the script below there is a list of all parameters which can be used for ACLs.
</para>

<para>
<example>
<title>Reference showing all possible important ACL settings.</title>
<programlisting>
    # ticket acl
    $Self->{TicketAcl}->{'ACL-Name-Test'} = {
        # match properties
        Properties => {
            # current action match properties
            Frontend => {
                Action => ['AgentTicketPhone', 'AgentTicketEmail'],
            },
            # current queue match properties
            Queue => {
                Name     => ['Raw'],
                QueueID  => ['some id'],
                GroupID  => ['some id'],
                Email    => ['some email'],
                RealName => ['OTRS System'],
                # ...
                }
            },
            # current user match properties
            User => {
                UserLogin => ['some login'],
                # ...
                Group_rw => [
                    'hotline',
                ],
                # ...
            },
            # current customer user match properties
            CustomerUser => {
                UserLogin => ['some login'],
                # ...
            },
            # current service match properties
            Service => {
                ServiceID => ['some id'],
                Name      => ['some name'],
                ParentID  => ['some id'],
                # ...
            },
            # current type match properties
            Type => {
                ID   => ['some id'],
                Name => ['some name'],
                # ...
            },
            # current priority match properties
            Priority = {
                ID   => ['some id'],
                Name => ['some name'],
                # ...
            },
            # current SLA match properties
            SLA = {
                SLAID    => ['some id'],
                Name     => ['some name'],
                Calendar => ['some calendar'],
                # ...
            },
            # current state match properties
            State = {
                ID       => ['some id'],
                Name     => ['some name'],
                TypeName => ['some state type name'],,
                TypeID   => ['some state type id'],
                # ...
            },
            # current ticket owner match properties
            Owner => {
                UserLogin => ['some login'],
                # ...
                Group_rw => [
                    'some group',
                ],
                # ...
            },
            # current ticket responsible match properties
            Responsible => {
                UserLogin => ['some login'],
                # ...
                Group_rw => [
                    'some group',
                ],
                # ...
            },
            # current dynamic field match properties
            DynamicField => {
                # keys must be in DynamicField_&lt;field_name&gt; format
                DynamicField_Field1          => ['some value'],
                DynamicField_OtherField      => ['some value'],
                DynamicField_TicketFreeText2 => ['some value'],
                # ...
            },
            # current ticket match properties
            Ticket => {
                Queue                => ['Raw'],
                State                => ['new', 'open'],
                Priority             => ['some priority'],
                Lock                 => ['lock'],
                CustomerID           => ['some id'],
                CustomerUserID       => ['some id'],
                Owner                => ['some owner'],
                DynamicField_Field1  => ['some value'],
                DynamicField_MyField => ['some value'],
                # ...
            },
        },
        # return possible options (white list)
        Possible => {
            # possible ticket options (white list)
            Ticket => {
                Queue => ['Hotline', 'Koordination'],
                State => => ['some state'],
                Priority => ['5 very high'],
                DynamicField_Field1  => ['some value'],
                DynamicField_MyField => ['some value'],
                # ...
                NewOwner => ['some owner'],
                OldOwner => ['some owner'],
                # ...
            },
            # possible action options (white list)
            Action => {
                AgentTicketLock => 1,
                AgentTicketZoom => 1,
                AgentTicketClose => 1,
                AgentTicketPending => 0,
                AgentTicketNote => 1,
                AgentTicketHistory => 0,
                AgentTicketPriority => 1,
                AgentTicketFreeText => 0,
                AgentTicketHistory => 1,
                AgentTicketCompose => 1,
                AgentTicketBounce => 1,
                AgentTicketTicketPrint => 0,
                AgentTicketForward => 1,
                AgentTicketTicketLink => 1,
                AgentTicketPrint => 1,
                AgentTicketPhone => 1,
                AgentTicketCustomer => 1,
                AgentTicketOwner => 0,
            },
        },
        # remove options (black list)
        PossibleNot => {
            # possible ticket options (black list)
            Ticket => {
                Queue => ['Hotline', 'Koordination'],
                State => ['closed', 'removed'],
                # ...
            },
        },
    };
</programlisting>
</example>
</para>

</chapter>