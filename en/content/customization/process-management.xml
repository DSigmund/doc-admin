<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="process-management" >
<title>Process Management</title>
    <section>
        <title>Introduction</title>
        <para>
            This feature of OTRS allows you to model processes (work-flows) in the ticket system.
            The basic idea is to be able to define recurring processes, and to delegate work items
            to different people, as well as leading the progress of a process in different
            directions based on certain criteria.
        </para>
    </section>
    <section>
        <title>Example process</title>
        <para>
            Let's see an example to make it more demonstrative. We will define a book order process:
        </para>

        <section>
            <title>Recording the demand</title>
            <para>
                Before an order will be placed, the demand for literature by an employee will be
                recorded. The following book is needed in our example:
            </para>
            <para>
                <screen>
Title: Prozessmanagement f√ºr Dummies
Autor: Thilo Knuppertz
ISBN: 3527703713
                </screen>
            </para>
        </section>

        <section>
            <title>Approval by manager</title>
            <para>
                The head of the employee's department needs to decide on the order. In case of a
                denial, a reason should be recorded by the manager. In case of approval, the order
                is passed to the purchasing department.
            </para>
        </section>

        <section>
            <title>Processing by purchasing department</title>
            <para>
                Purchasing now has the task to find out where the book can be ordered with the best
                conditions. If it is out of stock, this can be recorded in the order. In case of a
                successful order purchasing will record the supplier, the price and the delivery
                date.
            </para>
        </section>

        <section>
            <title>Processing by the mail room</title>
            <para>
                The shipment will arrive at the company. The incoming goods department checks the
                shipment and records the date of receipt. Now the employee will be informed that
                their order has arrived and is ready to be collected.
            </para>
        </section>
    </section>
    <section>
        <title>Implementing the example</title>
        <para>
            If we assume that a ticket acts in this work-flow like an accompanying document that can
            receive change notes, we already have a clear picture of process tickets.
        </para>
        <para>
            From the analysis of the example process we can identify the following necessary items:
        </para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>
                        Possibilities to record data, let's call them
                        <emphasis>User Task Activity Dialogs</emphasis>,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Checks which can react to changed data automatically, let's call them
                        <emphasis>Sequence Flows</emphasis>,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Changes which can be applied to a process ticket after successful
                        moving between the activities of a process ticket, let's call them
                        <emphasis>Sequence Flow Actions</emphasis>.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            We also need an additional item which might not be as obvious:
        </para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>
                        A possibility to offer more than just one User Task Activity Dialog to be
                        available. In our example this is needed when the manager must have the
                        choice between "Approve" and "Deny". Let's call this
                        <emphasis>User Task Activity</emphasis>.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Now, with User Task Activities, User Task Activity Dialogs, Sequence Flows and
            Sequence Flow Actions we have the necessary tools to model the individual steps of our
            example. What's still missing is an area where for each work-flow the order of the steps
            can be specified. Let's call this <emphasis>Process</emphasis>.
            To be able to refer to all these entities later, we will assign to them an abbreviation
            in parentheses. This abbreviation is based on an internal identification mechanism
            called EntityIDs.
        </para>
        <para>
            The EntityIDs are conformed with one or two letters (depending on the process part or
            entity) and then a consecutive number, examples:
            <itemizedlist>
                <listitem><para>Process: 'P1', 'P2' ... 'Pn'.</para></listitem>
                <listitem><para>Activity: 'A1', 'A2' ... 'An'.</para></listitem>
                <listitem><para>User Task Activity Dialog: 'AD1', 'AD2' ... 'ADn'.</para></listitem>
                <listitem><para>Sequence Flow: 'SF1', 'SF2' ... 'SFn'.</para></listitem>
                <listitem><para>Sequence Flow Action: 'SFA1', 'SFA2' ... 'SFAn'.</para></listitem>
            </itemizedlist>
        </para>
        <para>
           Before the creation of the process and its parts, it is necessary to prepare the system, we will need to
           define some Queues, Users and Dynamic Fields as well as set some SysConfig options.
        </para>
        <para>
            Create the following Queues:
            <itemizedlist>
                <listitem><para>Management</para></listitem>
                <listitem><para>Employees</para></listitem>
                <listitem><para>Purchasing</para></listitem>
                <listitem><para>Post office</para></listitem>
            </itemizedlist>
        </para>
        <para>
            Create the following Users:
            <itemizedlist>
                <listitem><para>Manager</para></listitem>
                <listitem><para>Employee</para></listitem>
            </itemizedlist>
        </para>
        <para>
            Create the following Dynamic Fields:
            <itemizedlist>
                <listitem>
                    <para>Title</para>
                    <informaltable>
                        <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                            <tbody>
                                <row>
                                    <entry>Label</entry><entry>Title</entry>
                                </row>
                                <row>
                                    <entry>Type</entry><entry>Text</entry>
                                </row>
                                <row>
                                    <entry>Object</entry><entry>Ticket</entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
                </listitem>
                <listitem>
                    <para>Author</para>
                    <informaltable>
                        <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                            <tbody>
                                <row>
                                    <entry>Label</entry><entry>Author</entry>
                                </row>
                                <row>
                                    <entry>Type</entry><entry>Text</entry>
                                </row>
                                <row>
                                    <entry>Object</entry><entry>Ticket</entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
                </listitem>
                <listitem>
                    <para>ISBN</para>
                    <informaltable>
                        <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                            <tbody>
                                <row>
                                    <entry>Label</entry><entry>ISBN</entry>
                                </row>
                                <row>
                                    <entry>Type</entry><entry>Text</entry>
                                </row>
                                <row>
                                    <entry>Object</entry><entry>Ticket</entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
                </listitem>
                <listitem>
                    <para>Status</para>
                    <informaltable>
                        <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                            <tbody>
                                <row>
                                    <entry>Label</entry><entry>Status</entry>
                                </row>
                                <row>
                                    <entry>Type</entry><entry>Dropdown</entry>
                                </row>
                                <row>
                                    <entry>Object</entry><entry>Ticket</entry>
                                </row>
                                <row>
                                    <entry>Possible Values</entry>
                                    <entry>
                                        <itemizedlist>
                                            <listitem><para>Approval</para></listitem>
                                            <listitem><para>Approval denied</para></listitem>
                                            <listitem><para>Approved</para></listitem>
                                            <listitem><para>Order denied</para></listitem>
                                            <listitem><para>Order placed</para></listitem>
                                            <listitem><para>Shipment received</para></listitem>
                                        </itemizedlist>
                                    </entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
                    <para>
                        Note: Please use this exactly this possible values for "Key" and "Value" in
                        the Dynamic Field setup.
                    </para>
                </listitem>
                <listitem>
                    <para>Supplier</para>
                    <informaltable>
                        <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                            <tbody>
                                <row>
                                    <entry>Label</entry><entry>Supplier</entry>
                                </row>
                                <row>
                                    <entry>Type</entry><entry>Text</entry>
                                </row>
                                <row>
                                    <entry>Object</entry><entry>Ticket</entry>
                                </row>
                            </tbody>
                        </tgroup>
                     </informaltable>
                </listitem>
                <listitem>
                    <para>Price</para>
                    <informaltable>
                        <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                            <tbody>
                                <row>
                                    <entry>Label</entry><entry>Price</entry>
                                </row>
                                <row>
                                    <entry>Type</entry><entry>Text</entry>
                                </row>
                                <row>
                                    <entry>Object</entry><entry>Ticket</entry>
                                </row>
                            </tbody>
                        </tgroup>
                     </informaltable>
                </listitem>
                <listitem>
                    <para>DeliveryDate</para>
                    <informaltable>
                        <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                            <tbody>
                                <row>
                                    <entry>Label</entry><entry>Delivery date</entry>
                                </row>
                                <row>
                                    <entry>Type</entry><entry>Date</entry>
                                </row>
                                <row>
                                    <entry>Object</entry><entry>Ticket</entry>
                                </row>
                            </tbody>
                        </tgroup>
                     </informaltable>
                </listitem>
                <listitem>
                    <para>DateOfReceipt</para>
                    <informaltable>
                        <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                            <tbody>
                                <row>
                                    <entry>Label</entry><entry>Date Of Receipt</entry>
                                </row>
                                <row>
                                    <entry>Type</entry><entry>Date</entry>
                                </row>
                                <row>
                                    <entry>Object</entry><entry>Ticket</entry>
                                </row>
                            </tbody>
                        </tgroup>
                     </informaltable>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Set the the following SysConfig settings:
            <itemizedlist>
                <listitem><para>'Ticket::Responsible': Yes</para></listitem>
                <listitem>
                    <para>
                        'Ticket::Frontend::AgentTicketZoom###ProcessWidgetDynamicFieldGroups':
                    </para>
                    <informaltable>
                        <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                            <thead>
                                <row>
                                    <entry><emphasis>Key:</emphasis></entry>
                                    <entry><emphasis>Content:</emphasis></entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry>Book</entry><entry>Title, Author, ISBN</entry>
                                </row>
                                <row>
                                    <entry>General</entry><entry>Status</entry>
                                </row>
                                <row>
                                    <entry>Order</entry>
                                    <entry>Price, Supplier, DeliveryDate</entry>
                                </row>
                                <row>
                                    <entry>Shipment</entry><entry>DateOfReceipt</entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
                </listitem>
                <listitem>
                    <para>
                        'Ticket::Frontend::AgentTicketZoom###ProcessWidgetDynamicField':
                    </para>
                    <informaltable>
                        <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                            <thead>
                                <row>
                                    <entry><emphasis>Key:</emphasis></entry>
                                    <entry><emphasis>Content:</emphasis></entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry>Author</entry><entry>1</entry>
                                </row>
                                <row>
                                    <entry>DateOfReceipt</entry><entry>1</entry>
                                </row>
                                <row>
                                    <entry>DeliveryDate</entry><entry>1</entry>
                                </row>
                                <row>
                                    <entry>ISBN</entry><entry>1</entry>
                                </row>
                                <row>
                                    <entry>Price</entry><entry>1</entry>
                                </row>
                                <row>
                                    <entry>Status</entry><entry>1</entry>
                                </row>
                                <row>
                                    <entry>Supplier</entry><entry>1</entry>
                                </row>
                                <row>
                                    <entry>Title</entry><entry>1</entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
                </listitem>
            </itemizedlist>
        </para>
        <para>
             Now lets start with the real Process Management stuff. In the next step, we will define
             the individual entities that we need.
        </para>
        <section>
            <title>Process (as a container)</title>
            <para>
                To create a new process it is necessary to click on the "Process Management" link in the 'Processes
                &amp; Automation' section in the Admin panel, which will lead to the Process Management Overview screen.
                After the creation of the process, we can create all other entities (or process parts).
            </para>
            <note>
                <para>
                    Activities, User Task Activity Dialogs, Sequence Flows and Sequence Flow Actions defined in one
                    process will be available for all the processes in the system.
                </para>
            </note>
            <para>
                <figure>
                    <title>OTRS Admin screen - System Administration</title>
                    <screenshot>
                         <graphic fileref="screenshots/customization/pm-admin-sysadmin.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                    </screenshot>
                </figure>
            </para>

            <para>
                Click on the "Create New Process" action from the Actions box.
            </para>
            <para>
                <figure>
                    <title>Create New Process button</title>
                    <screenshot>
                         <graphic fileref="screenshots/customization/pm-newprocess-button.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                    </screenshot>
                </figure>
            </para>
            <para>
                Fill the process information,set Process Name and the Description, we will leave the
                process State as "inactive", until we finish all the tasks. Save the process.
            </para>
            <para>
                <figure>
                    <title>Add new process</title>
                    <screenshot>
                         <graphic fileref="screenshots/customization/pm-newprocess-info.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                    </screenshot>
                </figure>
            </para>
        </section>
        <section>
            <title>User Task Activity Dialogs</title>
                <para>
                    Click on the new process name in the Process Management Overview Screen, then in the "Available
                    Process Elements" click on "User Task Activity Dialogs" (this action will expand the user task
                    activity dialog options and will collapse all others doing an accordion like effect). Finally, click
                    on "Create New User Task Activity Dialog".
                </para>
                <para>
                    <figure>
                        <title>Create New User Task Activity Dialog button</title>
                        <screenshot>
                             <graphic fileref="screenshots/customization/pm-accordion-new-usertask-activity-dialog.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                        </screenshot>
                    </figure>
                </para>
                <para>
                    In the opened popup screen fill the "Dialog Name" as well as the "Description (short)" field. For
                    this example, we will leave all other fields as the default. To assign fields to the User Task
                    Activity Dialog, simply drag the required field from the "Available Fields" pool and drop it into
                    the "Assigned Fields" pool. The order in the "Assigned Fields" pool is the order that the fields
                    will have in the screen: in order to modify the order simply drag and drop a field within the pool
                    to rearrange it in the correct place.
                </para>
                <para>
                    <figure>
                        <title>Add new User Task Activity Dialog</title>
                        <screenshot>
                             <graphic fileref="screenshots/customization/pm-edit-usertask-activity-dialog.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                        </screenshot>
                    </figure>
                </para>
                <para>
                    As soon as the fields are dropped into the "Assigned Fields" pool another popup screen is shown with
                    some details about the field. We will leave the default options and only for Article fields we
                    should make sure that the CommunicationChannel field is set to "Internal" and that the
                    IsVisibleForCustomer is not active.
                </para>
                <para>
                    <figure>
                        <title>Edit field details (Article)</title>
                        <screenshot>
                             <graphic fileref="screenshots/customization/pm-edit-field-article.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                        </screenshot>
                    </figure>
                </para>
                <para>
                    After all fields are assigned click on the submit button in the main popup
                    screen to save the changes.
                </para>
                <para>
                    In this example we will use Article field for comments, but another option could be to create a
                    TextArea type Dynamic Field. The rest of the mentioned fields in the lines below are the Dynamic
                    Fields that we already defined before.
                </para>
                <para>
                    Please be aware that in this screen all the Dynamic Fields have the prefix "DynamicField_" as in
                    "DynamicField_Title". Do not confuse this with the field "Title" that is actually the Ticket Title.
                </para>
                <para>
                    Create the following User Task Activity Dialogs:
                </para>
                <para>
                <itemizedlist>
                    <listitem>
                        <para>"Recoding the demand" (AD1)</para>
                        <para>
                            A user task activity dialog that contains all the required fields for
                            the data to be collected for the order (Title, Author and ISBN), and a
                            Status field with the possibility to choose "Approval".
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Approval denied" (AD2)</para>
                        <para>
                            A user task activity dialog with a comment field (Article) and a Status
                            field with the option "Approval denied".
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Approved" (AD3)</para>
                        <para>
                            Here we just need the Status field with the option "Approved".
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Order denied" (AD4)</para>
                        <para>
                            A user task activity dialog which makes it possible for purchasing to
                            reject an impossible order (book out of stock). Here we also need a
                            comment field and the Status field with the option "Order denied".
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Order placed" (AD5)</para>
                        <para>
                            A user task activity dialog with the fields Supplier, Price and Delivery
                            date for purchasing and the Status field with the option "Order placed".
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Shipment received" (AD6)</para>
                        <para>
                            A user task activity dialog for the mail room with a field for the Date
                            of receipt and the Status field with the option "Shipment received".
                        </para>
                    </listitem>
                </itemizedlist>
                </para>
                <para>
                    To restrict the Status field for each user task activity dialog, we need to add some ACLs in the
                    <filename>Kernel/Config.pm</filename> or to a new Perl file located in
                    <filename>Kernel/Config/Files</filename>.
                </para>
                <para>
                    <screen>
    $Self->{TicketAcl}->{'P1-AD1-1'} = {
        Properties => {
            Process => {
                ActivityDialogEntityID => ['AD1'],
            },
        },
        Possible => {
            Ticket => {
                DynamicField_Status => ['Approval'],
            },
        },
    };

    $Self->{TicketAcl}->{'P1-AD2-1'} = {
        Properties => {
            Process => {
                ActivityDialogEntityID => ['AD2'],
            },
        },
        Possible => {
            Ticket => {
                DynamicField_Status => ['Approval denied'],
            },
        },
    };

    $Self->{TicketAcl}->{'P1-AD3-1'} = {
        Properties => {
            Process => {
                ActivityDialogEntityID => ['AD3'],
            },
        },
        Possible => {
            Ticket => {
                DynamicField_Status => ['Approved'],
            },
        },
    };

    $Self->{TicketAcl}->{'P1-AD4-1'} = {
        Properties => {
            Process => {
                ActivityDialogEntityID => ['AD4'],
            },
        },
        Possible => {
            Ticket => {
                DynamicField_Status => ['Order denied'],
            },
        },
    };

    $Self->{TicketAcl}->{'P1-AD5-1'} = {
        Properties => {
            Process => {
                ActivityDialogEntityID => ['AD5'],
            },
        },
        Possible => {
            Ticket => {
                DynamicField_Status => ['Order placed'],
            },
        },
    };

    $Self->{TicketAcl}->{'P1-AD6-1'} = {
        Properties => {
            Process => {
                ActivityDialogEntityID => ['AD6'],
            },
        },
        Possible => {
            Ticket => {
                DynamicField_Status => ['Shipment received'],
            },
        },
    };
                    </screen>
                </para>
        </section>
        <section>
            <title>Sequence Flows</title>
                <para>
                    In the "Available Process Elements" click on "Sequence Flows", then click on "Create New Sequence
                    Flow".
                </para>
                <para>
                    <figure>
                        <title>Create New Sequence Flow button</title>
                        <screenshot>
                             <graphic fileref="screenshots/customization/pm-accordion-new-sequence-flow.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                        </screenshot>
                    </figure>
                </para>
                <para>
                    In the opened popup screen fill the "Sequence Flow Name", then in the sequence flow condition
                    expressions, for this example, we will add just one condition expression and just one field. For
                    both we can leave the Type of Linking as "and" and we will use the filled match type value as
                    "String".
                </para>
                <para>
                    <figure>
                        <title>Add new Sequence Flow</title>
                        <screenshot>
                             <graphic fileref="screenshots/customization/pm-edit-sequence-flow.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                        </screenshot>
                    </figure>
                </para>
                <para>
                    After all sequence flow condition expressions are set, click on the submit
                    button to save the changes.
                </para>
                <para>
                    Create the following Sequence Flows:
                </para>
                <para>
                <itemizedlist>
                    <listitem>
                        <para>"Approval" (SF1)</para>
                        <para>
                            A sequence flow which checks if the Status field is set to "Approval".
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Approval denied" (SF2)</para>
                        <para>
                            A sequence flow which checks if the Status field is set to "Approval
                            denied".
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Approved" (SF3)</para>
                        <para>
                            A sequence flow which checks if the Status field is set to "Approved".
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Order denied" (SF4)</para>
                        <para>
                            A sequence flow which checks if the Status field is set to "Order denied".
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Order placed" (SF5)</para>
                        <para>
                            A sequence flow which checks if the Status field is set to "Order placed".
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Shipment received" (SF6)</para>
                        <para>
                            A sequence flow which checks if the Status field is set to "Shipment
                            received".
                        </para>
                    </listitem>
                </itemizedlist>
                </para>
        </section>
        <section>
            <title>Sequence Flow Actions</title>
                <para>
                    Click on "Sequence Flow Actions" in the "Available Process Elements", then click
                    on "Create New Sequence Flow Action".
                </para>
                <para>
                    <figure>
                        <title>Create New Sequence Flow Action button</title>
                        <screenshot>
                             <graphic fileref="screenshots/customization/pm-accordion-new-sequence-flow-action.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                        </screenshot>
                    </figure>
                </para>
                <para>
                    In the opened popup screen, fill the "Sequence Flow Action Name", and the "Sequence Flow Action
                    module", then add the required and optional parameter names and values.
                </para>
                <para>
                    All the Sequence Flow Action Modules are shared with the Script Task Activities and they are located
                    in <filename>Kernel/System/ProcessManagement/Modules</filename>. Following is the list of all
                    bundled Sequence Flow Action Modules included in this release:
                </para>
                <para>
                    <itemizedlist>
                        <listitem><para>DynamicFieldSet</para></listitem>
                        <listitem><para>TicketArticleCreate</para></listitem>
                        <listitem><para>TicketCreate</para></listitem>
                        <listitem><para>TicketCustomerSet</para></listitem>
                        <listitem><para>TicketLockSet</para></listitem>
                        <listitem><para>TicketOwnerSet</para></listitem>
                        <listitem><para>TicketQueueSet</para></listitem>
                        <listitem><para>TicketResponsibleSet</para></listitem>
                        <listitem><para>TicketSendEmail</para></listitem>
                        <listitem><para>TicketServiceSet</para></listitem>
                        <listitem><para>TicketSLASet</para></listitem>
                        <listitem><para>TicketStateSet</para></listitem>
                        <listitem><para>TicketTitleSet</para></listitem>
                        <listitem><para>TicketTypeSet</para></listitem>
                    </itemizedlist>
                </para>
                <para>
                    Each module has its own specific parameters. Please review the
                    <link linkend="available-sequence-flow-actions">module documentation</link> to learn all required
                    and optional parameters.
                </para>
                <note>
                    <para>
                        From OTRS 4.0.1, parameters are not longer mandatory fixed values, but
                        instead, they can inherit from the original ticket using format:
                        &lt;OTRS_Ticket_property&gt;.
                    </para>
                    <para>
                        From OTRS 4.0.6, the format &lt;OTRS_TICKET_property&gt; is now supported,
                        older format is still usable, but deprecated as it will be dropped in
                        further versions.
                    </para>
                </note>
                <para>
                    <figure>
                        <title>Add new Sequence Flow Action</title>
                        <screenshot>
                             <graphic fileref="screenshots/customization/pm-edit-sequence-flow-action.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                        </screenshot>
                    </figure>
                </para>
                <para>
                    After setting the sequence flow action name and module, click on 'Save' button, and after a reload,
                    'Configure' button next to the selected module will appear. Click on it to set all parameters.
                </para>
                <para>
                    <figure>
                        <title>Configure Sequence Flow Action</title>
                        <screenshot>
                             <graphic fileref="screenshots/customization/pm-edit-sequence-flow-action-configuration.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                        </screenshot>
                    </figure>
                </para>

                <para>
                    After all parameters and values are set click on the 'Save and Finish' button to save the
                    parameters and return to the sequence flow action screen again, then click on 'Save and Finish'
                    (again) to save all data and return to the main process screen.
                </para>
                <para>
                    Create the following Sequence Flow Actions:
                </para>
                <para>
                <itemizedlist>
                    <listitem>
                        <para>"Move the process ticket into the 'Management' queue" (SFA1)</para>
                        <para>
                            This action is supposed to be executed when the sequence flow "Approval" (SF1) is applied.
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Change ticket responsible to 'manager'" (SFA2)</para>
                        <para>
                            To be executed when the sequence flow "Approval" (SF1) is applied.
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Move process ticket into the 'Employees' queue" (SFA3)</para>
                        <para>To be executed when:</para>
                        <itemizedlist>
                            <listitem><para>
                                The sequence flow "Approval denied" (SF2) is applied
                            </para></listitem>
                            <listitem><para>
                                The sequence flow "Order denied" (SF4) is applied
                            </para></listitem>
                            <listitem><para>
                                The sequence flow "Shipment received" (SF6) is applied
                            </para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para>"Change ticket responsible to 'Employee'" (SFA4)</para>
                        <para>To be executed when:</para>
                        <itemizedlist>
                            <listitem><para>
                                The sequence flow "Approval denied" (SF2) is applied
                            </para></listitem>
                            <listitem><para>
                                The sequence flow "Order denied" (SF4) is applied
                            </para></listitem>
                            <listitem><para>
                                The sequence flow "Shipment received" (SF6) is applied
                            </para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para>"Move process ticket into the 'Purchasing' queue" (SFA5)</para>
                        <para>To be executed when the sequence flow "Approved" (SF3) is applied.</para>
                    </listitem>
                    <listitem>
                        <para>"Move process ticket into the 'Post office' queue" (SFA6)</para>
                        <para>To be executed when the sequence flow "Order placed" (SF5) is applied.</para>
                    </listitem>
                    <listitem>
                        <para>"Close ticket successfully" (SFA7)</para>
                        <para>To be executed when:</para>
                        <itemizedlist>
                            <listitem><para>
                                The sequence flow "Shipment received" (SF6) is applied
                            </para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para>"Close ticket unsuccessfully" (SFA8)</para>
                        <para>To be executed when:</para>
                        <itemizedlist>
                            <listitem><para>
                                The sequence flow "Approval denied" (SF2) is applied
                            </para></listitem>
                            <listitem><para>
                                The sequence "Order denied" (SF4) is applied
                            </para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
                </para>
                <para>
                    As you can see, there are places where the same Sequence Flow Actions should be
                    executed. Therefore it is reasonable to make it possible to link Sequence Flow
                    Actions freely with Sequence Flow to be able to reuse them.
                </para>
        </section>
        <section>
            <title>Activities</title>
            <para>
                There are three types of activities:
                <itemizedlist>
                    <listitem>
                        <para>Script Task Activities</para>
                        <para>
                            This tasks executes a script module automatically when the activity is reached, these
                            modules are shared with the Sequence Flow Actions.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Service Task Activities</para>
                        <para>
                            Triggers an invoker from a Generic Interface web service when the
                            activity is reached.
                        </para>
                    </listitem>
                    <listitem>
                        <para>User Task Activities</para>
                        <para>
                            They could be seen as a bundle which can contain one or more User Task Activity Dialogs.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                Click on "Activities" in the "Available Process Elements", then click
                on "Create New Activity".
            </para>
            <para>
                <figure>
                    <title>Create New Activity button</title>
                    <screenshot>
                         <graphic fileref="screenshots/customization/pm-accordion-new-activity.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                    </screenshot>
                </figure>
            </para>
            <para>
                In the opened popup screen fill the "Activity Name", and be sure that "User task activity" is set in the
                "Activity type" field, then drag the required User Task Activity Dialogs from the "Available User Task
                Activity Dialogs" pool, and drop them into to the "Assigned User Task Activity Dialogs" pool. This
                dialog will be presented (in the ticket zoom screen) in the same order as it is defined on this screen
                translating from top to bottom, from left to right.
            </para>
            <para>
                This order is especially important in the first Activity, since the first User Task Activity Dialog for
                this activity is the only one that is presented when the process starts.
            </para>
            <note>
                <para>
                    Script and Service task activities at the very beginning of the processes will
                    present a default dialog to trigger the process start by executing the script or
                    invoker.
                </para>
            </note>
            <para>
                Create the following User Task Activities:
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>"Recording the demand" (A1)</para>
                        <para>Contains the User Task Activity Dialog "Recording the demand" (AD1)</para>
                    </listitem>
                    <listitem>
                        <para>"Approval" (A2)</para>
                        <para>
                            Contains the User Task Activity Dialogs "Approval denied" (AD2) as well as
                            "Approved" (AD3)
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Order" (A3)</para>
                        <para>
                            Contains the User Task Activity Dialogs "Order rejected" (AD4) as well as
                            "Order placed" (AD5)
                        </para>
                    </listitem>
                    <listitem>
                        <para>"Incoming" (A4)</para>
                        <para>Contains the User Task Activity Dialog "Shipment received" (AD6)</para>
                    </listitem>
                    <listitem>
                        <para>"Process complete" (A5):
                            This is a User task Activity without possible User Task Activity Dialogs.
                            It will be set after "Approval denied", "Order denied" or
                            "Shipment received" and represents the end of the process.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                Now we can clearly see that Activities are precisely defined states of a process
                ticket. After a successful Sequence flow a process ticket moves from one Activity to
                another.
            </para>
        </section>
        <section>
            <title>Book ordering process Path</title>
            <para>
                Let us conclude our example with the last missing piece in the puzzle, the Process
                as the a flow describer. In our case this is the whole ordering work-flow. Other
                processes could be office supply ordering or completely different processes.
            </para>
            <para>
                The process has a starting point which consists of the start User Task Activity and
                the start User Task Activity Dialog. For any new book order, the start User Task
                Activity Dialog (first User Task Activity Dialog for the first User Task Activity)
                is the first screen that is displayed. If this is completed and saved, the Process
                ticket will be created and can follow the configured work-flow.
            </para>
            <para>
                The process also contains the directions for how the process ticket can move
                through the Process. Let's call this the "Path". It consists of the start Activity,
                one or more Sequence Flows (possibly with Sequence Flow Actions), and other Activities.
            </para>
            <para>
                Assuming that the User Task Activities have already assigned their User Task Activity Dialogs, drag an
                Activity from the accordion (in the left part of the screen) and drop it into the canvas area (below
                process information). Notice that an arrow from the process start (green circle) to the Activity is
                placed automatically. (This is the first User Task Activity and its first User Task Activity Dialog is
                the first screen that will be shown when the process starts).
            </para>
            <para>
                <figure>
                    <title>Drag first Activity into the canvas</title>
                    <screenshot>
                         <graphic fileref="screenshots/customization/pm-canvas-drag-activity.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                    </screenshot>
                </figure>
            </para>
            <para>
                Next, drag another Activity into the canvas too. Now we will have two Activities in the canvas. The
                first one is connected to the start point and the second has no connections. You can hover the mouse
                over each activity to reveal their own User Task Activity Dialogs (in case of other type of activities,
                relative information is shown such as the selected script or web service and invoker).
            </para>
            <para>
                <figure>
                    <title>Drag second Activity into the canvas</title>
                    <screenshot>
                         <graphic fileref="screenshots/customization/pm-canvas-drag-activity2.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                    </screenshot>
                </figure>
            </para>
            <para>
                Then let's create the "Path" (connection) between these two Activities, for this we will use the
                Sequence Flows. Click on Sequence Flows in the accordion, drag a Sequence Flow and drop it inside the
                first Activity. Notice that the Activity changes its color indicating that the Sequence Flow is
                attached. As soon as the Sequence Flow is dropped, the end point of the Sequence FLow arrow will be
                placed next to the process start point. Drag the Sequence Flow arrow end point and drop it inside the
                other Activity to create the connection between the Activities.
            </para>
            <para>
                <figure>
                    <title>Drag a Sequence Flow into the canvas</title>
                    <screenshot>
                         <graphic fileref="screenshots/customization/pm-canvas-drag-sequence-flow.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                    </screenshot>
                </figure>
            </para>
            <para>
                Now that the "Path" between the Activities is defined, we need to assign the Sequence Flow Actions to
                the Sequence Flows. Double click the Sequence Flow label (on the canvas), this will open a new popup
                window.
            </para>
            <para>
                <figure>
                    <title>Connect Activities using Sequence Flows</title>
                    <screenshot>
                         <graphic fileref="screenshots/customization/pm-canvas-drag-sequence-flow2.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                    </screenshot>
                </figure>
            </para>
            <para>
                Drag the needed Sequence Flow Actions from Available Sequence Flow Actions pool
                and drop them into the Assigned Sequence Flow Actions pool and click on submit
                button.
            </para>
            <para>
                <figure>
                    <title>Assign Sequence Flow Actions</title>
                    <screenshot>
                         <graphic fileref="screenshots/customization/pm-edit-path.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                    </screenshot>
                </figure>
            </para>
            <para>
                Then back in the main process edit screen click on save button below the canvas to
                save all other changes.
            </para>
            <para>
                Complete the "path" adding the following Activities, Sequence Flows and Sequence Flow
                Actions:
            </para>
            <para>Recording the demand until "Approval"</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Starting point: Activity: "Recording the demand" (A1)</para>
                    </listitem>
                    <listitem>
                        <para>Possible Sequence Flow: "Approval" (SF1)</para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                    If the sequence flow condition expression of this activity is
                                    fulfilled, the ticket will move to Activity: "Approval" (A2)
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Additionally, the following Sequence Flow Actions are executed:
                                </para>
                                <itemizedlist>
                                    <listitem>
                                        <para>
                                            "Move the process ticket into the 'Management' queue"
                                            (SFA1)
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>"Change ticket responsible to 'manager'" (SFA2)</para>
                                    </listitem>
                                </itemizedlist>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                The Activity: "Recording the demand" (A1) is a defined step of the process ticket,
                where there is the possibility for the Sequence Flow: "Approval" (SF1). If this
                applies, the ticket will move to the next Activity: "Approval" (A2), and the Sequence
                Flow Actions: "Move the process ticket into the 'Management' queue" (SFA1) and
                "Change ticket responsible to 'manager'" (SFA2) are executed. In the Activity:
                "Approval" (A2), the User Task Activity Dialogs: "Approval denied" (AD2) and
                "Approved" (AD3) are available.
            </para>
            <para>Approval</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Starting Point: Activity "Approval" (A2)</para>
                    </listitem>
                    <listitem>
                        <para>Possible Sequence Flows:</para>
                            <itemizedlist>
                                <listitem>
                                    <para>"Approval denied" (SF2)</para>
                                    <itemizedlist>
                                        <listitem>
                                        <para>
                                            If this matches, the process ticket will move to
                                            Activity: "Process complete" (A5).
                                        </para>
                                        </listitem>
                                        <listitem>
                                        <para>
                                            Additionally, the following Sequence Flow Actions are
                                            executed:
                                        </para>
                                        <itemizedlist>
                                        <listitem>
                                            <para>
                                                "Move process ticket into the 'Employees' queue"
                                                (SFA3)
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                "Change ticket responsible to 'Employee'" (SFA4)
                                             </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                "Close ticket unsuccessfully" (SFA8)
                                             </para>
                                        </listitem>
                                        </itemizedlist>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                                <listitem>
                                    <para>"Approved" (SF3)</para>
                                    <itemizedlist>
                                        <listitem>
                                        <para>
                                            If this matches, the process ticket will move to
                                            Activity: "Order" (A3).
                                        </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                Additionally, the following Sequence Flow Action is
                                                executed:
                                            </para>
                                            <itemizedlist>
                                            <listitem>
                                                <para>
                                                    "Move process ticket into the 'Purchasing'
                                                    queue" (SFA5)
                                                </para>
                                            </listitem>
                                            </itemizedlist>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                            </itemizedlist>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                We can see that from the current Activity, which defines a step of the process ticket, there are one or
                more possibilities for moving to other Activities using a Sequence Flow which has exactly one target
                Activity (and possibly one or more Sequence Flow Actions).
            </para>
            <para>Order</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Starting Point: Activity "Order" (A3)</para>
                    </listitem>
                    <listitem>
                        <para>Possible Sequence Flows:</para>
                            <itemizedlist>
                                <listitem>
                                    <para>"Order denied" (SF4)</para>
                                    <itemizedlist>
                                        <listitem>
                                        <para>
                                            If this matches, the process ticket will move to
                                            Activity: "Process complete" (A5).
                                        </para>
                                        </listitem>
                                        <listitem>
                                        <para>
                                            Additionally, the following Sequence Flow Actions are
                                            executed:
                                        </para>
                                        <itemizedlist>
                                        <listitem>
                                            <para>
                                                "Move process ticket into the 'Employees' queue"
                                                (SFA3)
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                "Set ticket responsible to 'Employee'" (SFA4)
                                             </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                "Close ticket unsuccessfully" (SFA8)
                                             </para>
                                        </listitem>
                                        </itemizedlist>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                                <listitem>
                                    <para>"Order placed" (SF5)</para>
                                    <itemizedlist>
                                        <listitem>
                                        <para>
                                            If this matches, the process ticket will move to
                                            Activity: "Incoming" (A4).
                                        </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                Additionally, the following Sequence Flow Action is
                                                executed:
                                            </para>
                                            <itemizedlist>
                                            <listitem>
                                                <para>
                                                    "Move process ticket into the 'Post office'
                                                    queue" (SFA6)
                                                </para>
                                            </listitem>
                                            </itemizedlist>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                            </itemizedlist>
                    </listitem>
                </itemizedlist>
            </para>
            <para>Incoming</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Starting Point: Activity "Incoming" (A4)</para>
                    </listitem>
                    <listitem>
                        <para>Possible Sequence Flows:</para>
                            <itemizedlist>
                                <listitem>
                                    <para>"Shipment received" (SF6)</para>
                                    <itemizedlist>
                                        <listitem>
                                        <para>
                                            If this matches, the process ticket will move to
                                            Activity: "Process complete" (A5).
                                        </para>
                                        </listitem>
                                        <listitem>
                                        <para>
                                            Additionally, the following Sequence Flow Actions are
                                            executed:
                                        </para>
                                        <itemizedlist>
                                        <listitem>
                                            <para>
                                                "Move process ticket into the 'Employees' queue" (SFA3)
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                "Set ticket responsible to 'Employee'" (SFA4)
                                             </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                "Close ticket successfully" (SFA7)
                                             </para>
                                        </listitem>
                                        </itemizedlist>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                            </itemizedlist>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                The complete Path for the book ordering Process will then looks like this:
            </para>
            <para>
                <figure>
                    <title>Book ordering complete process path</title>
                    <screenshot>
                         <graphic fileref="screenshots/customization/pm-edit-process.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                    </screenshot>
                </figure>
            </para>
            <para>
                After you finish the process path please click on "Save and Finish" button in the
                lower part of the canvas and then click on "Synchronize All Processes" button.
                This will gather all processes information form the Database and create a cache file
                (in Perl language). This cache file is actually the processes configuration that
                the system will use to create or use process tickets.
            </para>
            <para>
                Any change that is made of the process (in the GUI) will require to re-synchronize
                the cache file in order to get the change reflected in the system.
            </para>
            <para>
                It is also possible to import the whole process from a YAML file, but it is still
                necessary to create all Dynamic Fields, Users, Queues, etc that are needed by each
                process before the import.
            </para>
            <para>
                Notice that if the process requires the use of ACLs those are also needed to be set
                manually.
            </para>
            <para>
                The following is the complete YAML file for the book ordering process example:
            </para>
            <para>
                <screen><![CDATA[
---
Activities:
  A1:
    ActivityDialogs:
      - AD1
    ChangeTime: 2012-11-23 14:49:22
    Config:
      ActivityDialog:
        1: AD1
    CreateTime: 2012-11-23 11:49:38
    EntityID: A1
    ID: 151
    Name: Recording the demand
    Type: UserTask
  A2:
    ActivityDialogs:
      - AD2
      - AD3
    ChangeTime: 2012-12-13 00:55:12
    Config:
      ActivityDialog:
        1: AD2
        2: AD3
    CreateTime: 2012-11-23 11:50:11
    EntityID: A2
    ID: 152
    Name: Approval
    Type: UserTask
  A3:
    ActivityDialogs:
      - AD4
      - AD5
    ChangeTime: 2012-11-23 18:12:14
    Config:
      ActivityDialog:
        1: AD4
        2: AD5
    CreateTime: 2012-11-23 11:50:35
    EntityID: A3
    ID: 153
    Name: Order
    Type: UserTask
  A4:
    ActivityDialogs:
      - AD6
    ChangeTime: 2012-11-23 18:12:35
    Config:
      ActivityDialog:
        1: AD6
    CreateTime: 2012-11-23 11:51:00
    EntityID: A4
    ID: 154
    Name: Incoming
    Type: UserTask
  A5:
    ActivityDialogs: []
    ChangeTime: 2012-11-23 11:51:33
    Config: {}
    CreateTime: 2012-11-23 11:51:33
    EntityID: A5
    ID: 155
    Name: Process complete
    Type: UserTask
ActivityDialogs:
  AD1:
    ChangeTime: 2012-12-06 02:16:21
    Config:
      DescriptionLong: ''
      DescriptionShort: Recoding the demand
      FieldOrder:
        - DynamicField_Author
        - DynamicField_ISBN
        - DynamicField_Title
        - DynamicField_Status
      Fields:
        DynamicField_Author:
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
        DynamicField_ISBN:
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
        DynamicField_Status:
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
        DynamicField_Title:
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
      Interface:
        - AgentInterface
      Permission: ''
      RequiredLock: 0
      SubmitAdviceText: ''
      SubmitButtonText: ''
    CreateTime: 2012-11-23 14:34:43
    EntityID: AD1
    ID: 154
    Name: Recording the demand
  AD2:
    ChangeTime: 2012-11-23 14:57:41
    Config:
      DescriptionLong: ''
      DescriptionShort: Approval denied
      FieldOrder:
        - Article
        - DynamicField_Status
      Fields:
        Article:
          Config:
            CommunicationChannel:  'Internal'
            IsVisibleForCustomer: '0'
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
        DynamicField_Status:
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
      Interface:
        - AgentInterface
      Permission: ''
      RequiredLock: 0
      SubmitAdviceText: ''
      SubmitButtonText: Deny Request
    CreateTime: 2012-11-23 14:36:39
    EntityID: AD2
    ID: 155
    Name: Approval denied
  AD3:
    ChangeTime: 2012-12-14 03:14:23
    Config:
      DescriptionLong: ''
      DescriptionShort: Approved
      FieldOrder:
        - DynamicField_Status
      Fields:
        DynamicField_Status:
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
      Interface:
        - AgentInterface
      Permission: ''
      RequiredLock: 0
      SubmitAdviceText: ''
      SubmitButtonText: Approve Request
    CreateTime: 2012-11-23 14:37:35
    EntityID: AD3
    ID: 156
    Name: Approved
  AD4:
    ChangeTime: 2012-11-23 14:58:52
    Config:
      DescriptionLong: ''
      DescriptionShort: Order rejected
      FieldOrder:
        - Article
        - DynamicField_Status
      Fields:
        Article:
          Config:
            CommunicationChannel:  'Internal'
            IsVisibleForCustomer: '0'
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
        DynamicField_Status:
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
      Interface:
        - AgentInterface
      Permission: ''
      RequiredLock: 0
      SubmitAdviceText: ''
      SubmitButtonText: Reject Order
    CreateTime: 2012-11-23 14:38:48
    EntityID: AD4
    ID: 157
    Name: Order rejected
  AD5:
    ChangeTime: 2012-12-06 02:20:12
    Config:
      DescriptionLong: ''
      DescriptionShort: Order placed
      FieldOrder:
        - DynamicField_DeliveryDate
        - DynamicField_Price
        - DynamicField_Supplier
        - DynamicField_Status
      Fields:
        DynamicField_DeliveryDate:
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
        DynamicField_Price:
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
        DynamicField_Status:
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
        DynamicField_Supplier:
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
      Interface:
        - AgentInterface
      Permission: ''
      RequiredLock: 0
      SubmitAdviceText: ''
      SubmitButtonText: Place Order
    CreateTime: 2012-11-23 14:41:28
    EntityID: AD5
    ID: 158
    Name: Order placed
  AD6:
    ChangeTime: 2012-11-23 14:42:43
    Config:
      DescriptionLong: ''
      DescriptionShort: Shipment received
      FieldOrder:
        - DynamicField_DateOfReceipt
        - DynamicField_Status
      Fields:
        DynamicField_DateOfReceipt:
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
        DynamicField_Status:
          DefaultValue: ''
          DescriptionLong: ''
          DescriptionShort: ''
          Display: 1
      Interface:
        - AgentInterface
      Permission: ''
      RequiredLock: 0
      SubmitAdviceText: ''
      SubmitButtonText: ''
    CreateTime: 2012-11-23 14:42:43
    EntityID: AD6
    ID: 159
    Name: Shipment received
Process:
  Activities:
    - A1
    - A2
    - A3
    - A4
    - A5
  ChangeTime: 2012-12-06 02:31:59
  Config:
    Description: The process to order a book
    Path:
      A1:
        SF1:
          ActivityEntityID: A2
          SequenceFlowAction:
            - SFA2
            - SFA1
      A2:
        SF2:
          ActivityEntityID: A5
          SequenceFlowAction:
            - SFA3
            - SFA4
            - SFA8
        SF3:
          ActivityEntityID: A3
          SequenceFlowAction:
            - SFA5
      A3:
        T4:
          ActivityEntityID: A5
          SequenceFlowAction:
            - SFA3
            - SFA4
            - SFA8
        SF5:
          ActivityEntityID: A4
          SequenceFlowAction:
            - SFA6
      A4:
        SF6:
          ActivityEntityID: A5
          SequenceFlowAction:
            - SFA3
            - SFA4
            - SFA7
      A5: {}
    StartActivity: A1
    StartActivityDialog: AD1
  CreateTime: 2012-11-23 11:45:12
  EntityID: P1
  ID: 94
  Layout:
    A1:
      left: 172
      top: 63
    A2:
      left: 402
      top: 156
    A3:
      left: 649
      top: 255
    A4:
      left: 774
      top: 391
    A5:
      left: 194
      top: 410
  Name: Book ordering
  State: Active
  StateEntityID: S1
  SequenceFlowActions:
    - SFA1
    - SFA2
    - SFA3
    - SFA4
    - SFA8
    - SFA5
    - SFA3
    - SFA4
    - SFA8
    - SFA6
    - SFA3
    - SFA4
    - SFA7
  SequenceFlows:
    - SF1
    - SF2
    - SF3
    - SF4
    - SF5
    - SF6
SequenceFlowActions:
  SFA1:
    ChangeTime: 2012-11-23 16:01:37
    Config:
      Config:
        Queue: Management
      Module: TicketQueueSet
    CreateTime: 2012-11-23 15:50:59
    EntityID: SFA1
    ID: 61
    Name: Move the process ticket into the "Management" queue
  SFA2:
    ChangeTime: 2012-11-23 16:02:12
    Config:
      Config:
        Responsible: manager
      Module: TicketResponsibleSet
    CreateTime: 2012-11-23 15:58:22
    EntityID: TA2
    ID: 62
    Name: Change ticket responsible to "manager"
  SFA3:
    ChangeTime: 2012-11-24 14:27:02
    Config:
      Config:
        Queue: Employees
      Module: TicketQueueSet
    CreateTime: 2012-11-23 16:02:54
    EntityID: TA3
    ID: 63
    Name: Move the process ticket into the "Employees" queue
  SFA4:
    ChangeTime: 2012-11-23 16:04:06
    Config:
      Config:
        Responsible: Employee
      Module: TicketResponsibleSet
    CreateTime: 2012-11-23 16:04:06
    EntityID: TA4
    ID: 64
    Name: Change ticket responsible to "Employee"
  SFA5:
    ChangeTime: 2012-12-06 02:18:34
    Config:
      Config:
        Queue: Purchasing
      Module: TicketQueueSet
    CreateTime: 2012-11-23 16:04:54
    EntityID: TA5
    ID: 65
    Name: Move process ticket into the "Purchasing" queue
  SFA6:
    ChangeTime: 2012-12-06 02:18:48
    Config:
      Config:
        Queue: Post office
      Module: TicketQueueSet
    CreateTime: 2012-11-23 16:06:20
    EntityID: TA6
    ID: 66
    Name: Move process ticket into the "Post office" queue
  SFA7:
    ChangeTime: 2012-12-06 02:29:55
    Config:
      Config:
        State: closed successful
      Module: TicketStateSet
    CreateTime: 2012-12-06 02:29:27
    EntityID: TA7
    ID: 67
    Name: Close ticket successfully
  SFA8:
    ChangeTime: 2012-12-06 02:31:12
    Config:
      Config:
        State: closed unsuccessful
      Module: TicketStateSet
    CreateTime: 2012-12-06 02:31:12
    EntityID: TA8
    ID: 68
    Name: Close ticket unsuccessfully
SequenceFlows:
  SF1:
    ChangeTime: 2012-11-23 15:12:20
    Config:
      Condition:
        1:
          Fields:
            DynamicField_Status:
              Match: Approval
              Type: String
          Type: and
      ConditionLinking: and
    CreateTime: 2012-11-23 11:53:52
    EntityID: T1
    ID: 94
    Name: Approval
  SF2:
    ChangeTime: 2012-11-23 15:12:50
    Config:
      Condition:
        1:
          Fields:
            DynamicField_Status:
              Match: Approval denied
              Type: String
          Type: and
      ConditionLinking: and
    CreateTime: 2012-11-23 11:54:26
    EntityID: T2
    ID: 95
    Name: Approval denied
  SF3:
    ChangeTime: 2012-11-23 15:13:29
    Config:
      Condition:
        1:
          Fields:
            DynamicField_Status:
              Match: Approved
              Type: String
          Type: and
      ConditionLinking: and
    CreateTime: 2012-11-23 11:54:54
    EntityID: T3
    ID: 96
    Name: Approved
  SF4:
    ChangeTime: 2012-11-23 15:14:08
    Config:
      Condition:
        1:
          Fields:
            DynamicField_Status:
              Match: Order denied
              Type: String
          Type: and
      ConditionLinking: and
    CreateTime: 2012-11-23 11:55:25
    EntityID: T4
    ID: 97
    Name: Order denied
  SF5:
    ChangeTime: 2012-11-23 18:30:33
    Config:
      Condition:
        1:
          Fields:
            DynamicField_Status:
              Match: Order placed
              Type: String
          Type: and
      ConditionLinking: and
    CreateTime: 2012-11-23 11:56:15
    EntityID: T5
    ID: 98
    Name: Order placed
  SF6:
    ChangeTime: 2012-11-23 15:15:30
    Config:
      Condition:
        1:
          Fields:
            DynamicField_Status:
              Match: Shipment received
              Type: String
          Type: and
      ConditionLinking: and
    CreateTime: 2012-11-23 11:56:48
    EntityID: T6
    ID: 99
    Name: Shipment received

                ]]></screen>
            </para>
        </section>
    </section>

    <section>
        <title>Process configuration reference</title>

        <section>
            <title>Process</title>
            <para>
                A Process models the path of a workflow/process. The waypoints on this path can be
                Activities or Sequence Flows, we'll talk about these later.
            </para>
            <section>
                <title>Process configuration</title>
                <para>
                    While the Process configuration can be done directly in a perl file such as
                    <filename>Kernel/Config.pm</filename> this practice is discouraged since the
                    GUI offers the majority of the needed features and is easier to maintain.
                </para>
                <para>
                    In case that is absolutely required to create a process directly in a perl file then it is strongly
                    recommended to create new files like <filename>Kernel/Config/Files/MyProcess.pm</filename>. Notice
                    that the GUI generates the file <filename>Kernel/Config/Files/ZZZProcessManagement</filename>, so
                    please avoid using that specific filename, otherwise it will be overwritten when you sync processes.
                </para>
                <para>
                    Let's see an example process configuration (from the process cache file):
                </para>
                <para>
                    <screen>
$Self->{'Process'} = {
    'P1' => {
        Name                => 'Book order',
        CreateTime          => '16-02-2012 13:37:00',
        CreateBy            => '1',
        ChangeTime          => '17-02-2012 13:37:00',
        ChangeBy            => '1',
        State               => 'Active',
        StartActivity       => 'A1',
        StartActivityDialog => 'AD1',
        Path => {
            'A1' => {
                'T1' => {
                    ActivityEntityID => 'A2',
                },
            },
            'A2' => {
                'T2' =>  {
                    ActivityEntityID => 'A3',
                },
            },
        },
    },
    'P2' => {
        Name                => 'IT order',
        CreateTime          => '26-02-2012 13:37:00',
        CreateBy            => '1',
        ChangeTime          => '27-02-2012 13:37:00',
        ChangeBy            => '1',
        State               => 'Active',
        StartActivity       => 'A2',
        StartActivityDialog => 'AD2',
        Path => {
            'A2' => {
                'T3' => {
                    ActivityEntityID => 'A4',
                },
            },
        },
    }
};
                    </screen>
                </para>
            </section>
            <section>
                <title>Name</title>
                <para>
                    The name of the process, this can be selected by the agent when creating a new
                    process ticket.
                </para>
            </section>
            <section>
                <title>CreateTime</title>
                <para>
                    The time when the process was created.
                </para>
            </section>
            <section>
                <title>CreateBy</title>
                <para>
                    The UID of the user creating the process.
                </para>
            </section>
            <section>
                <title>ChangeTime</title>
                <para>
                    The time when the process was changed.
                </para>
            </section>
            <section>
                <title>ChangeBy</title>
                <para>
                    The UID of the user who made the last change to the process.
                </para>
            </section>
            <section>
                <title>State</title>
                <para>
                    Defines the state of a process. Possible values:
                    <itemizedlist>
                        <listitem>
                            <para>
                                'Active' are all processes which can be used in new process tickets.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'FadeAway' are processes which cannot be selected any more for new
                                tickets, but existing tickets still can use the process.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'Inactive' processes are deactivated and cannot be used for new or
                                existing tickets.
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </section>
            <section>
                <title>StartActivity</title>
                <para>
                    When creating a new process ticket, a StartActivity must be defined. As soon as
                    the ticket is created, this Activity will be set and used as the base for the
                    first sequence flow checks.
                </para>
            </section>
            <section>
                <title>StartActivityDialog</title>
                <para>
                    For new process tickets, if the initial activity is of the type 'User task activity' then a
                    StartActivityDialog must be defined. This will be shown when creating a new process ticket (after
                    the process was selected). At this point, the ticket does not exist yet, it will be created after
                    submitting the StartActivityDialog. In case of a non 'User task activity' a default activity
                    dialog will be presented to start the process.
                </para>
            </section>
            <section>
                <title>Path</title>
                <para>
                    The Path contains the structure of the Activities, and the possible Sequence Flows between them,
                    for the current process. Additionally, path also contains the Sequence Flow Actions that happen when
                    moving from one activity to another. They control the way that a process ticket can take. Example:
                </para>
                <para>
                    <screen>
'A1' => {
    'SF1' => {
        ActivityEntityID => 'A2',
    },
    'SF2' => {
        ActivityEntityID => 'A3',
    },
    'SF3' => {
        ActivityEntityID   => 'A4',
        SequenceFlowAction => ['SFA1', 'SFA2'],
    },
},
                    </screen>
                </para>
                <para>
                    If a process ticket is in Activity <literal>A1</literal>, it has three possible
                    ways to get to another Activity. In the Sequence Flows
                    <literal>SF1</literal> to <literal>SF3</literal>, sequence flow condition
                    expressions are defined, that a process ticket must fulfill to move (transit) to
                    another Activity.
                </para>
                <para>
                    If in this case all the values of the process ticket and its dynamic fields that
                    are needed for the Sequence Flow <literal>SF2</literal> are correct, the ticket
                    will be moved from Activity <literal>A1</literal> to <literal>A3</literal>.
                    After a User Task Activity Dialog is submitted, or any other change is made to
                    the ticket, it will be checked for possible Sequence Flows from the current
                    Activity. If multiple Sequence Flows are possible, the first one will be
                    used (based on numerical sorting of the Sequence Flow EntityIDs).
                </para>
                <para>
                    Additionally, it is possible to assign Sequence Flow Actions to Sequence Flows
                    in the Path configuration. These are modules which are executed after a
                    successful move from one activity to the next one. They have to be specified in
                    array form as in the example, we'll talk about the details later.
                </para>
            </section>
        </section>

        <section>
            <title>Activity</title>
            <para>
                An Activity can contain one or more Activity Dialogs, a module or a web service ID and an invoker
                depending on the activity type. Activities models a <literal>step</literal> in the process. For User
                Task Activities all their User Task Activity Dialogs of the current Activity are displayed in the ticket
                zoom and can be used until the Sequence Flow Condition Expressions of a Sequence Flow are fulfilled. For
                non User Task Activities a notification is shown to indicate that the Activity is a self executing task.
            </para>
            <section>
            <title>Activity configuration</title>
            <para>
                Let's see an example activity configuration:
            </para>
            <para>
                <screen>
$Self->{'Process::Activity'} =
{
    'A1' => {
        Name       => 'Activity 1 optional',
        CreateTime => '16-02-2012 13:37:00',
        CreateBy   => '1',
        ChangeTime => '17-02-2012 13:37:00',
        ChangeBy   => '1',
        ActivityDialog => {
            1 => 'AD1',
        },
        Config => '',
        Type   => 'UserTask',
    },
    'A2' => {
        Name       => 'Activity 2 optional',
        CreateTime => '16-02-2012 13:37:00',
        CreateBy   => '1',
        ChangeTime => '17-02-2012 13:37:00',
        ChangeBy   => '1',
        ActivityDialog => {
            1 => 'AD5',
            2 => 'AD6',
            3 => 'AD1',
        },
        Config => '',
        Type   => 'UserTask',
    },
    'A3' => {
        Name => 'Activity 3 optional',
        CreateTime => '2018-01-30 03:44:30',
        CreateBy   => '1',
        ChangeTime => '2018-01-30 03:44:30',
        ChageBy    => '1',
        ActivityDescription => 'This Activity fires an Invoker form a Web Service',
        ActivityErrorCode   => '',
        ActivityDialog      => '',
        WebServiceID => '1'
        Invoker      => 'test_operation',
        Interface    => [
            'AgentInterface',
        ],
        Config       => '',
        Type => 'ServiceTask',
    },
    'A4' => {
        Name => 'Activity 4 optional',
        CreateTime => '2018-01-30 03:44:30',
        CreateBy   => '1',
        ChangeTime => '2018-01-30 03:44:30',
        ChageBy    => '1',
        ActivityDialog => '',
        ActivityDescription => 'This Activity executes a script module',
        ActivityErrorCode   => '',
        Module => 'DynamicFieldSet',
        Config => {
          'DynamicField_NameX' => 'Hello',
        },
        Interface => [
          'AgentInterface',
          'CustomerInterface',
        ],
        Type => 'ScriptTask',
    },
};
                </screen>
            </para>
            </section>
            <section>
                <title>Name</title>
                <para>
                    The name of the activity.
                </para>
            </section>
            <section>
                <title>CreateTime</title>
                <para>
                    The time when it was created.
                </para>
            </section>
            <section>
                <title>CreateBy</title>
                <para>
                    UID of the user who created the Activity.
                </para>
            </section>
            <section>
                <title>ChangeTime</title>
                <para>
                    The last time when it was changed.
                </para>
            </section>
            <section>
                <title>ChangeBy</title>
                <para>
                    UID of the last user who changed the Activity.
                </para>
            </section>
            <section>
                <title>ActivityDialog</title>
                <para>
                    Activity Dialog contains the list of User Task Activity Dialogs which are
                    available in this Activity (only for User Task Activities). All Activity Dialogs
                    of the current Activity are displayed in the ticket zoom. Their order is set by
                    the order in the configuration, here
                    <literal>AD5</literal> is shown before <literal>AD6</literal> and <literal>AD1</literal>.
                </para>
            </section>
            <section>
                <title>ActivityDescription</title>
                <para>
                    Field used to store the purpose of an activity is only available for "Script Task" and "Service
                    Task" Activities.
                </para>
            </section>
            <section>
                <title>ActivityErrorCode</title>
                <para>
                    It's used to send a custom error code in case of a failure, and if it's not defined error code '1'
                    is used by default. This is only available for "Script Task" and "Service Task" Activities.
                </para>
            </section>
            <section>
                <title>WebServiceID</title>
                <para>
                    Holds the ID of the Web Service used by the activity. This is only available for "Service Task"
                    Activities.
                </para>
            </section>
            <section>
                <title>Invoker</title>
                <para>
                    Stores the name of an Invoker from the selected Web Service used by the activity. This is only
                    available for "Service Task" Activities.
                </para>
            </section>
            <section>
                <title>Module</title>
                <para>
                    The name of a script module used by the activity, (located in
                    <filename>Kernel/System/ProcessManagement/Modules</filename>). This is only available for "Script
                    Task" Activities.
                </para>
            </section>
            <section>
                <title>Config</title>
                <para>
                    Configuration parameters for the selected script used by the activity. This is
                    only available for "Script Task" Activities.
                </para>
            </section>
            <section>
                <title>Interface</title>
                <para>
                    List of interfaces where the activity can start a processes (if it's the first activity). If value
                    does not contain the name of the current interface, the process is not listed for selection. This is
                    only available for "Service Task" and "Script Task" Activities.
                </para>
            </section>
            <section>
                <title>Type</title>
                <para>
                    Defines the type of the activity, possible values are: 'User task activity', 'Service task activity'
                    and 'Script task activity'.
                </para>
            </section>
        </section>

        <section>
            <title>ActivityDialog</title>
            <para>
                A User Task Activity Dialog is a representation or render of a User Task Activity as a screen. User Task
                Activity Dialogs can be shared among the User Task Activities.
            </para>
            <section>
                <title>ActivityDialog configuration</title>
                <para>
                    Let's see an example config:
                </para>
                <para>
                    <screen>
$Self->{'Process::ActivityDialog'} = {
    'AD1' => {
        Name             => 'ActivityDialog 1 optional',
        DescriptionShort => 'Basic info',
        DescriptionLong  => 'Please insert the necessary basic information for IT orders',
        CreateTime       => '28-02-2012 13:37:00',
        CreateBy         => '1',
        ChangeTime       => '29-02-2012 13:37:00',
        ChangeBy         => '1',
        Fields => {
            PriorityID => {
                DescriptionShort => 'Priority ID',
                DescriptionLong  => 'Enter the priority here',
                Display          => 2,
            },
        },
        FieldOrder       => [ 'PriorityID' ],
        SubmitAdviceText => 'Note: If you submit the form...',
        SubmitButtonText => 'Send request',
    },
    'AD2' => {
        Name             => 'ActivityDialog 2 optional',
        DescriptionShort => 'Basic info',
        DescriptionLong  => 'Please insert the necessesary basic information for Book orders',
        CreateTime       => '28-02-2012 13:37:00',
        CreateBy         => '1',
        ChangeTime       => '29-02-2012 13:37:00',
        ChangeBy         => '1',
        Fields => {
            StateID => {
                DescriptionShort => 'State ID',
                DescriptionLong  => 'Enter the state here',
                Display          => 2,
                DefaultValue     => '2',
            },
            Queue => {
                DescriptionShort => 'Queue ID',
                DescriptionLong  => 'Enter the queue here',
                Display          => 2,
                DefaultValue     => 'Raw',
            },
            Title => {
                DescriptionShort => 'Title',
                DescriptionLong  => 'Enter the title here',
                Display          => 1,
                DefaultValue     => 'Default Title',
            },
            DynamicField_Anzahl => {
                DescriptionShort => 'Amount',
                DescriptionLong  => 'Enter the amount here',
                Display          => 2,
                DefaultValue     => '4',
            },
        },
        FieldOrder       => [ 'DynamicField_Anzahl', 'StateID', 'Queue', 'Title' ],
        SubmitAdviceText => 'Note: If you submit the form...',
        SubmitButtonText => 'Send request',
    },
};
                    </screen>
                </para>
            </section>
            <section>
                <title>Name</title>
                <para>
                    Name of the Activity Dialog.
                </para>
            </section>
            <section>
                <title>CreateTime</title>
                <para>
                    The time when it was created.
                </para>
            </section>
            <section>
                <title>CreateBy</title>
                <para>
                    UID of the user who created this Activity Dialog.
                </para>
            </section>
            <section>
                <title>ChangeTime</title>
                <para>
                    The last time when it was changed.
                </para>
            </section>
            <section>
                <title>ChangeBy</title>
                <para>
                    UID of the last user who changed this Activity Dialog.
                </para>
            </section>
            <section>
                <title>Fields</title>
                <para>
                    Contains all fields which can be displayed in this Activity Dialog.
                    The following fields can currently be used:
                </para>
                <para>
                    <screen>
    Title
    State
    StateID
    Priority
    PriorityID
    Lock
    LockID
    Queue
    QueueID
    Customer
    CustomerID
    CustomerNo
    CustomerUserID
    Owner
    OwnerID
    Type
    TypeID
    SLA
    SLAID
    Service
    ServiceID
    Responsible
    ResponsibleID
    PendingTime
    DynamicField_$FieldName  # for all dynamic fields
                    </screen>
                </para>
                <para>
                    Example of a single field configuration:
                </para>
                <para>
                    <screen>
StateID => {
    DescriptionShort => 'State ID',
    DescriptionLong  => 'Enter the state here',
    Display          => 2,
    DefaultValue     => '2',
},
                    </screen>
                </para>
                <para>
                    The field <literal>Article</literal> is a special case. If it is present in the
                    <literal>Fields</literal> configuration, the Activity Dialog will contain a complete Rich-text
                    editor with subject field and attachment handling. The entered text will then be added to the ticket
                    as an article. Let's see an example Article field configuration:
                </para>
                <para>
                    <screen>
Article => {
    DescriptionShort => 'Please insert your comment here.',
    DescriptionLong => '',
    Display         => 1,
    Config          => {
        CommunicationChannel => 'Internal'
        IsVisibleForCustomer => '0'
        LabelSubject => '',
        LabelBody    => '',
    },
},
                    </screen>
                </para>
                <para>
                    Let's look at the field configuration options:
                </para>
                <section>
                    <title>DescriptionShort</title>
                    <para>
                        Optional short description that is shown with the field title.
                    </para>
                </section>
                <section>
                    <title>DescriptionLong</title>
                    <para>
                        Optional longer field description that is shown then the mouse is over the
                        field, for example advice on how to fill out the field.
                    </para>
                </section>
                <section>
                    <title>Display</title>
                    <para>
                        Controls if the field is shown and/or mandatory.
                        Possible values:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <literal>0</literal>: field is invisible. This can be helpful if field values
                                    should automatically be set. The configured <literal>DefaultValue</literal> will be
                                    stored in this case.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <literal>1</literal>: field is visible, but optional.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <literal>2</literal>: field is visible and mandatory. The following fields can
                                    only be invisible or mandatory:
                                </para>
                                <para>
                                    <screen>
    QueueID
    Queue
    State
    StateID
    Lock
    LockID
    Priority
    PriorityID
    Type
    TypeID
                                    </screen>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                    <para>
                        If fields are configured as optional, and no value is submitted by the user,
                        the Default Value will be saved when the Activity Dialog is submitted by the
                        user.
                    </para>
                </section>
                <section>
                    <title>DefaultValue</title>
                    <para>
                        For fields with <literal>ID</literal> (like QueueID, OwnerID), this refers to the database ID
                        of the value. For other fields without <literal>ID</literal> (like Queue, Owner), the
                        <literal>DefaultValue</literal> must contain the value itself. Example:
                    </para>
                    <para>
                        <screen>
Queue => {
    DescriptionShort => 'Queue',
    DescriptionLong  => 'Enter the queue here',
    Display          => 2,
    DefaultValue     => 'Raw',
},
                        </screen>
                    </para>
                </section>
            </section>
            <section>
                <title>FieldOrder</title>
                <para>
                    Here the display order of the fields is configured. IMPORTANT: Invisible fields
                    also must be configured here, because only configured fields will be considered
                    when saving. Fields which are not configured will not be saved.
                </para>
            </section>
            <section>
                <title>SubmitAdviceText</title>
                <para>
                    Optional text to be shown right above the submit button for additional help or
                    advice text.
                </para>
            </section>
            <section>
                <title>SubmitButtonText</title>
                <para>
                    Optional custom text for the submit button.
                </para>
            </section>
        </section>

        <section>
            <title>SequenceFlow</title>
            <para>
                A Sequence Flow decides, based on configurable Sequence Flow Condition Expressions, which path in the
                Process is taken, i.e. to which Activity a Process ticket can be moved.
            </para>
            <section>
                <title>Sequence Flow configuration</title>
                <para>
                    Let's see an example:
                </para>
                <para>
                    <screen>
$Self->{'Process::SequenceFlow'} = {
    'SF1' => {
        Name => 'Sequence Flow 1',
        CreateTime => '14-03-2012 13:37:00', # optional
        CreateBy   => '1',                   # optional
        ChangeTime => '15-03-2012 13:37:00', # optional
        ChangeBy   => '15-03-2012 13:37:00', # optional
        Condition  => {
            Cond1  => {
                Fields => {
                    StateID => {
                        Type  => 'String',
                        Match => '1',
                    },
                },
            },
        },
    },
    'SF2' => {
        Name       => 'SequenceFlow 2 optional',
        CreateTime => 'DATE',   # optional
        CreateBy   => 'USERID', # optional
        ChangeTime => 'DATE',   # optional
        ChangeBy => 'USERID',   # optional
        Condition => {
            Cond1 => {
                Queue               => 'Raw',
                DynamicField_Farbe  => '2',
                DynamicField_Anzahl => '1',
            },
        },
    },
};
                    </screen>
                </para>
            </section>
            <section>
                <title>Name</title>
                <para>
                    Name of the sequence flow.
                </para>
            </section>
            <section>
                <title>CreateTime</title>
                <para>
                    Time when it was created.
                </para>
            </section>
            <section>
                <title>CreateBy</title>
                <para>
                    UID of the user who created this Sequence Flow.
                </para>
            </section>
            <section>
                <title>ChangeTime</title>
                <para>
                    Last time when it was changed.
                </para>
            </section>
            <section>
                <title>ChangeBy</title>
                <para>
                    UID of the last user who changed this Sequence Flow.
                </para>
            </section>
            <section>
                <title>Condition</title>
                <para>
                    Contains all sequence flow condition expressions that are necessary for this
                    Sequence Flow to take effect.
                    Example:
                </para>
                <para>
                    <screen>
Condition => {
    Type  => 'and',
    Cond1 => {
        Type   => 'and',
        Fields => {
            StateID => {
                Type  => 'String',
                Match => '1',
            },
            DynamicField_Marke => {
                Type  => 'String',
                Match => 'VW',
        },
    },
    Cond2 => {
        Type => 'and',
        Fields => {
            Queue => {
                Type  => 'String',
                Match => 'Raw',
            },
        },
    },
},
                    </screen>
                </para>
                <para>
                    Let's look at the Sequence Flow Condition Expression configuration in detail.
                </para>
                <section>
                    <title>Type (Condition Expression Linking)</title>
                    <para>
                        Specifies the way the different condition expression elements are connected
                        to each other. Possible values:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <literal>and</literal>: This is the default. All condition
                                    expressions must be met for the sequence flow to take effect.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <literal>or</literal>: At least one condition expression must
                                    match.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <literal>xor</literal>: Exactly one condition expression must
                                    match, not more.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </section>
                <section>
                    <title>Cond1</title>
                    <para>
                        This is the name of an example condition expression. It can be freely chosen.
                        Conditions are evaluated in sorted order.
                    </para>
                </section>
                <section>
                    <title>Type (Field)</title>
                    <para>
                        Specifies the way how the individual field tests of this condition expression
                        are connected to each other. Possible values:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <literal>and</literal>: This is the default. All field tests
                                    must match for this condition expression to match.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <literal>or</literal>: At least one field test must match.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <literal>xor</literal>: Exactly one field test must match, not
                                    more.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </section>
                <section>
                    <title>Fields</title>
                    <para>
                        Specifies the particular fields whose values should be tested. From our
                        example:
                    </para>
                    <para>
                        <screen>
Fields => {
    StateID => {
        Type  => 'String',
        Match => '1',
    },
                        </screen>
                    </para>
                </section>
                <section>
                    <title>StateID</title>
                    <para>
                        Example of a field name. The following ticket fields can be used:
                    </para>
                    <para>
                        <screen>
    Title
    State
    StateID
    Priority
    PriorityID
    Lock
    LockID
    Queue
    QueueID
    Customer
    CustomerID
    CustomerNo
    CustomerUserID
    Owner
    OwnerID
    Type
    TypeID
    SLA
    SLAID
    Service
    ServiceID
    Responsible
    ResponsibleID
    DynamicField_$FieldName # for all DynamicFields
                        </screen>
                    </para>
                    <para>
                        When testing a field with 'ID' (like SLAID), the database ID of the field
                        will be used for testing, for other fields (like SLA) the actual value is
                        used for testing.
                    </para>
                </section>
                <section>
                    <title>Type</title>
                    <para>
                        Determines the kind of field testing. Possible values:

                        <itemizedlist>
                            <listitem>
                                <para>
                                    <literal>String</literal>: Compares the field value with the string specified in
                                    <literal>Match</literal>. Matches if they are exactly the same.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <literal>Hash</literal>: Compares the field value (hash) with the hash specified
                                    in <literal>Match</literal>. All hash values must be the same.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <literal>Array</literal>: Compares the field value (array) with the array
                                    specified in <literal>Match</literal>. Both lists must be the same.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <literal>Regex</literal>: The field value can be tested with a regular expression.
                                    It is important to understand that <literal>Match</literal> contains
                                    <emphasis>qr{}xms</emphasis> as a base condition. Between the braces the actual
                                    regular expression will be inserted.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <literal>Module</literal>: Allows you to use a perl module for
                                    condition expression checking. If it returns 1, the check was
                                    positive. You can find an example module in
                                    <filename>Kernel/System/ProcessManagement/SequenceFlow/ConditionExpression/Validation/ValidateDemo.pm</filename>.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </section>
            </section>
        </section>

        <section>
            <title>Sequence Flow Actions</title>
            <para>
                Sequence Flow Actions are actions which can be triggered after successfully applied sequence flows (when
                a process ticket moves from one activity to another). These Sequence Flow Actions can be used to perform
                different changes on the ticket, e.g. change the Queue or the Owner of the ticket. You can also create
                your own Sequence Flow Actions to perform other complex changes.
            </para>
            <section>
                <title>Sequence Flow Action configuration</title>
                <para>
                    Let's see an example:
                </para>
                <para>
                    <screen>
$Self->{'Process::SequenceFlowAction'} = {
    'SFA1' => {
        Name   => 'Queue Move',
        Module => 'TicketQueueSet',
        Config => {
            Queue  => 'Junk',
            UserID => 123,
        },
    },
};
                    </screen>
                </para>
            </section>
            <section>
                <title>Name</title>
                <para>
                    The name of the Sequence Flow Action.
                </para>
            </section>
            <section>
                <title>Module</title>
                <para>
                    Specifies the Perl module to be used (from the list in
                    <filename>Kernel/System/ProcessManagement/</filename> Modules).
                </para>
            </section>
            <section>
                <title>Config</title>
                <para>
                    This parameter contains all settings which are required for the module. Its content depends on the
                    particular Sequence Flow Action module which is used, some modules might require even more complex
                    configurations than just simple key - value pairs. Please see the documentation of the individual
                    modules for details. In our example, only the Queue must be specified. Nevertheless we are also
                    sending UserID parameter, by using the UserID value. The sequence flow action will be executed
                    impersonating the user with the given UserID.
                </para>
                <para>
                    The use of UserID inside the <literal>Config</literal> parameter of a Sequence
                    Flow Action is accepted by all Sequence Flow Actions Modules (since OTRS 3.2.4).
                    In this example it could be particularly important if the user that triggers the
                    Sequence Flow does not have permissions to move the ticket to the queue
                    <literal>Junk</literal>, while the user with the UserID 123 might have.
                </para>
            </section>
            <section>
                <title>Reusing Sequence Flow Action modules</title>
                <para>
                    To use Sequence Flow Action modules multiple times, just specify several Sequence Flow Actions in
                    your configuration. Example:
                </para>
                <para>
                    <screen>
    $Self->{'Process::SequenceFlowAction'} = {
        'SFA1' => {
            Name   => 'Queue Move Junk',
            Module => 'TicketQueueSet',
            Config => {
                Queue => 'Junk',
            },
        },
        'SFA2' => {
            Name   => 'Queue Move Raw',
            Module => 'TicketQueueSet',
            Config => {
                Queue => 'Raw',
            },
        },
    };
                    </screen>
                </para>
                <para>
                    Here the same module is used to move a process ticket into the <literal>Raw</literal> queue, and
                    another time to move it into the <literal>Junk</literal> queue. The Sequence Flow Action which must
                    be used for a particular Sequence Flow is determined from the <literal>Path</literal> setting of the
                    Process configuration.
                </para>
            </section>
            <section id="available-sequence-flow-actions">
                <title>Available Sequence Flow Actions</title>
                <para>
                    OTRS comes with several Sequence Flow Actions that can be used in your processes.
                    Here you can find their documentation and how they need to be configured.
                </para>

                <section>
                    <title>DynamicFieldSet</title>
                    <para>
                        Sets one or more dynamic fields at a process ticket. Example:
                    </para>
                    <para>
                        <screen><![CDATA[
$Self->{'Process::SequenceFlowAction'} = {
    'TA1' => {
        Name   => 'Set DynamicField MasterSlave to Master and Approved to 1',
        Module => 'DynamicFieldSet',
        Config => {
            MasterSlave => 'Master',
            Approved    => '1',

        },
    },
};
                        ]]></screen>
                    </para>
                    <para>
                        <literal>Name</literal> specifies the name of the configured Sequence Flow Action.
                    </para>
                    <para>
                        <literal>MasterSlave</literal> and <literal>Approved</literal> are given as examples of
                        DynamicField names. The values of the fields (<literal>Master</literal> and
                        <literal>1</literal>) will be set by this Sequence Flow Action.
                    </para>
                </section>

                <section>
                    <title>TicketArticleCreate</title>
                    <para>
                        Creates an article, the %DataPayload parameters depends on the given communication channel, by
                        default <literal>Internal</literal> is used. Example:
                    </para>
                    <para>
                        <screen><![CDATA[
$Self->{'Process::SequenceFlowAction'} = {
    'TA1' => {
        Name   => 'Article Create Note',
        Module => 'TicketArticleCreate',
        Config => {

        Config                   => {
            SenderType           => 'agent',            # (required) agent|system|customer
            IsVisibleForCustomer => 1,                  # 0 or 1
            CommunicationChannel => 'Internal',         # Internal|Phone|Email|..., default: Internal

            %DataPayload,                               # some parameters depending of each communication channel
        },
    },
};
                        ]]></screen>
                    </para>
                    <para>
                        The following is the %DataPayload for MIME based Communication channels
                        (<literal>Email</literal>, <literal>Internal</literal> and <literal>Phone</literal>).
                    </para>
                    <para>
                        <screen><![CDATA[
            SenderType       => 'agent',                                                # agent|system|customer
            ContentType      => 'text/plain; charset=ISO-8859-15',                      # or optional Charset & MimeType (e.g. 'text/html; charset=UTF-8')
            Subject          => 'some short description',                               # required
            Body             => 'the message text',                                     # required
            HistoryType      => 'OwnerUpdate',                                          # EmailCustomer|Move|AddNote|PriorityUpdate|WebRequestCustomer|...
            HistoryComment   => 'Some free text!',
            From             => 'Some Agent <email@example.com>',                       # not required but useful
            To               => 'Some Customer A <customer-a@example.com>',             # not required but useful
            Cc               => 'Some Customer B <customer-b@example.com>',             # not required but useful
            ReplyTo          => 'Some Customer B <customer-b@example.com>',             # not required
            InReplyTo        => '<asdasdasd.12@example.com>',                           # not required but useful
            References       => '<asdasdasd.1@example.com> <asdasdasd.12@example.com>', # not required but useful
            NoAgentNotify    => 0,                                                      # if you don't want to send agent notifications
            AutoResponseType => 'auto reply',                                           # auto reject|auto follow up|auto reply/new ticket|auto remove

            ForceNotificationToUserID   => '1,43,56',                                    # if you want to force somebody
            ExcludeNotificationToUserID => '43,56',
                 # if you want full exclude somebody from notifications,
                 # will also be removed in To: line of article,
                 # higher prio as ForceNotificationToUserID
            ExcludeMuteNotificationToUserID => '43,56',
                 # the same as ExcludeNotificationToUserID but only the
                 # sending gets muted, agent will still shown in To:
                 # line of article
                        ]]></screen>
                    </para>

                    <para>
                        <literal>Name</literal> specifies the name of the configured Sequence Flow Action. It can be
                        freely chosen, but should reflect the purpose of the configured action.
                    </para>
                    <para>
                        <literal>SenderType</literal> defines the sender type of the article. Possible values: agent,
                        system, customer.
                    </para>

                    <para>
                        <literal>IsVisibleForCustomer</literal> defines if the article should be displayed in the
                        customer interface.
                    </para>
                    <para>
                        <literal>CommunicationChannel</literal> defines the type of the article to be created. Possible
                        values: <literal>Email</literal>, <literal>Internal</literal> and <literal>Phone</literal>. This
                        list could be extended by installing new communication channels via an OTRS Package.
                    </para>
                    <para>
                        <literal>ContentType</literal> defines the content type of the article. Possible values:
                        <literal>text/plain; charset=ISO-8859-15</literal> or any other valid charset and mime type.
                    </para>
                    <para>
                        <literal>Subject</literal> defines the article title. Mandatory.
                    </para>
                    <para>
                        <literal>Body</literal> defines the article content. Mandatory.
                    </para>
                    <para>
                        <literal>HistoryType</literal> defines the type of the history entry. Possible values: AddNote,
                        ArchiveFlagUpdate, Bounce, CustomerUpdate, EmailAgent, EmailCustomer,
                        EscalationResponseTimeNotifyBefore, EscalationResponseTimeStart, EscalationResponseTimeStop,
                        EscalationSolutionTimeNotifyBefore, EscalationSolutionTimeStart, EscalationSolutionTimeStop,
                        EscalationUpdateTimeNotifyBefore, EscalationUpdateTimeStart, EscalationUpdateTimeStop, FollowUp,
                        Forward, Lock, LoopProtection, Merged, Misc, Move, NewTicket, OwnerUpdate, PhoneCallAgent,
                        PhoneCallCustomer, PriorityUpdate, Remove, ResponsibleUpdate, SendAgentNotification, SendAnswer,
                        SendAutoFollowUp, SendAutoReject, SendAutoReply, SendCustomerNotification, ServiceUpdate,
                        SetPendingTime, SLAUpdate, StateUpdate, Subscribe, SystemRequest, TicketDynamicFieldUpdate,
                        TicketLinkAdd, TicketLinkDelete, TimeAccounting, TypeUpdate, Unlock, Unsubscribe,
                        WebRequestCustomer.
                    </para>
                    <para>
                        <literal>HistoryComment</literal> defines the content of the history entry.
                    </para>
                    <para>
                        <literal>From</literal>, <literal>To</literal>, <literal>Cc</literal> and
                        <literal>ReplyTo</literal> take email addresses in the notation specified above.
                    </para>
                    <para>
                        <literal>InReplyTo</literal> and <literal>References</literal> take email message IDs.
                    </para>
                    <para>
                        <literal>NoAgentNotify</literal> - if set to 1, the email notification for an agent will not
                        be sent.
                    </para>
                    <para>
                        <literal>AutoResponseType</literal> can take the following values:
                        auto follow up, auto reject, auto remove, auto reply, auto reply/new ticket.
                    </para>
                    <para>
                        <literal>ForceNotificationToUserID</literal>, <literal>ExcludeNotificationToUserID</literal>,
                        <literal>ExcludeMuteNotificationToUserID</literal> can take a list of UserIDs that are
                        either always notified, not notified or listed as notified but not actually
                        sent a notification email.
                    </para>
                </section>
                <section>
                    <title>TicketCreate</title>
                    <para>
                        Creates a ticket with an article, the new ticket can be linked with
                        process ticket. Example:
                    </para>
                    <para>
                        <screen><![CDATA[
$Self->{'Process::SequenceFlowAction'} = {
    'TA1' => {
        Name   => 'Ticket Create',
        Module => 'TicketCreate',
        Config => {

            # ticket required:
            Title         => 'Some Ticket Title',
            Queue         => 'Raw',              # or QueueID => 123,
            Lock          => 'unlock',
            Priority      => '3 normal',         # or PriorityID => 2,
            State         => 'new',              # or StateID => 5,
            CustomerID    => '123465',
            CustomerUser  => 'customer@example.com',
            OwnerID       => 'someuserlogin',    # or OwnerID => 123,

            # ticket optional:
            TN              => $TicketObject->TicketCreateNumber(), # optional
            Type            => 'Incident',            # or TypeID => 1, not required
            Service         => 'Service A',           # or ServiceID => 1, not required
            SLA             => 'SLA A',               # or SLAID => 1, not required
            ResponsibleID   => 123,                   # not required
            ArchiveFlag     => 'y',                   # (y|n) not required
            PendingTime     => '2011-12-23 23:05:00', # optional (for pending states)
            PendingTimeDiff => 123 ,                  # optional (for pending states)

            # article required:
            SenderType           => 'agent',           # agent|system|customer
            CommunicationChannel => 'Internal'         # Internal|Phone|Email|..., default: Internal
            IsVisibleForCustomer => '0'

            %DataPayload,                             # some parameters depending of each communication channel

            # article optional:
            TimeUnit                        => 123

            # other:
            DynamicField_NameX => $Value,
            LinkAs => $LinkType,                                        # Normal, Parent, Child, etc. (respective original ticket)
            UserID => 123,                                              # optional, to override the UserID from the logged user
        },
    },
};
                        ]]></screen>
                    </para>
                    <para>
                        <literal>Name</literal> specifies the name of the configured Sequence Flow Action. It can be
                        freely chosen, but should reflect the purpose of the configured action.
                    </para>
                    <para>
                        <literal>Title</literal> The ticket title.
                    </para>
                    <para>
                        <literal>Queue</literal> or <literal>QueueID</literal> specifies the name or id of the queue to
                        be used in the new ticket.
                    </para>
                    <para>
                        <literal>Lock</literal> or <literal>LockID</literal> sets the lock status of the ticket.
                    </para>
                    <para>
                        <literal>Priority</literal> or <literal>PriorityID</literal> specifies the name or ID of the
                        priority to be used in the new ticket.
                    </para>
                    <para>
                        <literal>State</literal> or <literal>StateID</literal> specifies the name or ID of the state to
                        be used in the new ticket.
                    </para>
                    <para>
                        <literal>CustomerID</literal>, the customer ID to be set for the new ticket.
                    </para>
                    <para>
                        <literal>CustomerUser</literal>, the login of the customer that will be assigned in the
                        ticket.
                    </para>
                    <para>
                        <literal>OwnerID</literal> or <literal>OwnerID</literal>, specifies the login or ID of the agent
                        that will be the new ticket owner.
                    </para>
                    <para>
                        <literal>TN</literal>, custom number for the new ticket.
                    </para>
                    <para>
                        <literal>Type</literal> or <literal>TypeID</literal> specifies the name or ID of the ticket type
                        to be used in the new ticket.
                    </para>
                    <para>
                        <literal>Service</literal> or <literal>ServiceID</literal> specifies the name or ID of the
                        service to be used in the new ticket.
                    </para>
                    <para>
                        <literal>SLA</literal> or <literal>SLAID</literal> specifies the name or ID of the SLA to be
                        used in the new ticket.
                    </para>
                    <para>
                        <literal>ResponsibleID</literal>, the ID of the agent that will be the new ticket responsible.
                    </para>
                    <para>
                        <literal>PendingTime</literal>, a predefined date to set the Ticket Pending Times, when the
                        ticket state belongs to a pending state type.
                    </para>
                    <para>
                        <literal>PendingTimeDiff</literal>, a dynamically date (expressed in seconds from current
                        date/time) to set the Ticket Pending Times, when the  ticket state belongs
                        to a pending state type.
                    </para>
                    <para>
                        <literal>SenderType</literal> defines the sender type of the article. Possible values: agent,
                        system, customer.
                    </para>
                    <para>
                        <literal>IsVisibleForCustomer</literal> defines if the article should be displayed in the
                        customer interface.
                    </para>
                    <para>
                        <literal>CommunicationChannel</literal> defines the type of the article to be created. Possible
                        values: <literal>Email</literal>, <literal>Internal</literal> and <literal>Phone</literal>. This
                        list could be extended by installing new communication channels via an OTRS Package.
                    </para>
                    <para>
                        Please check the additional parameters for different article channels.
                    </para>
                    <para>
                        <literal>TimeUnit</literal> the time invested in the current ticket article expressed in
                        seconds, minutes, hours, etc.
                    </para>
                    <para>
                        <literal>DynamicField_NameX</literal> where DynamicField_ is a required prefix and NameX is
                        the name of a Dynamic Field to be set in the new ticket (on ticket level,
                        not article levels).
                    </para>
                    <para>
                        <literal>LinkAs</literal> to define the new ticket relation with originator ticket, from the
                        new ticket point of view, for example Normal, Parent, Child etc.
                    </para>
                    <para>
                        OTRS smart tags like <literal>&lt;OTRS_CUSTOMER_BODY&gt;</literal> or
                        <literal>&lt;OTRS_CUSTOMER_REALNAME&gt;</literal> are now supported in the Sequence Flow Action
                        <literal>TicketCreate</literal>. Those smart tags could be used to create a new ticket and
                        insert data from the process ticket to this child ticket. The usage of the OTRS smart tags is
                        identical to the text templates in <emphasis>Ticket Notifications</emphasis>.
                    </para>
                </section>
                <section>
                    <title>TicketCustomerSet</title>
                    <para>
                        Sets the customer of a process ticket. Example:
                    </para>
                    <para>
                        <screen><![CDATA[
$Self->{'Process::SequenceFlowAction'} = {
    'TA1' => {
        Name   => 'Customer Set Customer to test',
        Module => 'TicketCustomerSet',
        Config => {
            No      => 'test',
            User    => 'client-user-123',
            # or in other words
            # CustomerID     => 'client123',
            # CustomerUserID => 'client-user-123',

        },
    },
};
                        ]]></screen>
                    </para>
                    <para>
                        <literal>Name</literal> specifies the name of the configured Sequence Flow Action.
                    </para>
                    <para>
                        <literal>No</literal> or <literal>CustomerID</literal> set the Customer ID of the customer.
                    </para>
                    <para>
                        <literal>User</literal> or <literal>CustomerUserID</literal> set the Username of the customer.
                    </para>
                </section>

                <section>
                    <title>TicketLockSet</title>
                    <para>
                        Changes the lock of a process ticket. Example:
                    </para>
                    <para>
                        <screen><![CDATA[
$Self->{'Process::SequenceFlowAction'} = {
    'TA1' => {
        Name   => 'Set Lock to lock',
        Module => 'TicketLockSet',
        Config => {
            Lock   => 'lock',
            # or
            LockID => 2,
        },
    },
};
                        ]]></screen>
                    </para>
                    <para>
                        <literal>Name</literal> specifies the name of the configured Sequence Flow Action.
                    </para>
                    <para>
                        <literal>Lock</literal> defines the new lock of the process ticket.
                    </para>
                    <para>
                        <literal>LockID</literal> defines the internal ID of the new lock.
                    </para>
                </section>

                <section>
                    <title>TicketOwnerSet</title>
                    <para>
                        Changes the owner of a process ticket. Example:
                    </para>
                    <para>
                        <screen><![CDATA[
$Self->{'Process::SequenceFlowAction'} = {
    'TA1' => {
        Name   => 'Owner Set root@localhost',
        Module => 'TicketOwnerSet',
        Config => {
            Owner => 'root@localhost',
            # or
            OwnerID => 1,
        },
    },
};
                        ]]></screen>
                    </para>
                    <para>
                        <literal>Name</literal> specifies the name of the configured Sequence Flow Action.
                    </para>
                    <para>
                        <literal>Owner</literal> specifies the login name of the new owner.
                    </para>
                    <para>
                        <literal>OwnerID</literal> specifies the internal ID of the new owner.
                    </para>
                </section>

                <section>
                    <title>TicketQueueSet</title>
                    <para>
                        Moves the ticket into a target queue. Example:
                    </para>
                    <para>
                        <screen><![CDATA[
$Self->{'Process::SequenceFlowAction'} = {
    'TA1' => {
        Name   => 'Queue Move Raw',
        Module => 'TicketQueueSet',
        Config => {
            Queue => 'Raw',
            # or
            # QueueID => '2',
        },
    },
};
                        ]]></screen>
                    </para>
                    <para>
                        <literal>Name</literal> specifies the name of the configured Sequence FlowAction.
                    </para>
                    <para>
                        <literal>Queue</literal> specifies the name of the target queue.
                    </para>
                    <para>
                        <literal>QueueID</literal> specifies the internal ID of the target queue.
                    </para>
                </section>

                <section>
                    <title>TicketResponsibleSet</title>
                    <para>
                        Changes the responsible of a process ticket. Example:
                    </para>
                    <para>
                        <screen><![CDATA[
$Self->{'Process::SequenceFlowAction'} = {
    'TA1' => {
        Name   => 'Responsible Set root@localhost',
        Module => 'TicketResponsibleSet',
        Config => {
            Responsible => 'root@localhost',
            # or
            ResponsibleID => 1,
        },
    },
};
                        ]]></screen>
                    </para>
                    <para>
                        <literal>Name</literal> specifies the name of the configured Sequence Flow Action.
                    </para>
                    <para>
                        <literal>Responsible</literal> specifies the login name of the new responsible.
                    </para>
                    <para>
                        <literal>ResponsibleID</literal> specifies the internal ID of the new responsible.
                    </para>
                </section>

                <section>
                    <title>TicketServiceSet</title>
                    <para>
                        Assigns a service to a process ticket.
                        The ticket requires to have a customer and the service must be assigned to
                        that customer.
                        Example:
                    </para>
                    <para>
                        <screen><![CDATA[
$Self->{'Process::SequenceFlowAction'} = {
    'TA1' => {
        Name   => 'Set MyService service',
        Module => 'TicketServiceSet',
        Config => {
            Service   => 'MyService',
            # or
            ServiceID => 123,
        },
    },
};
                        ]]></screen>
                    </para>
                    <para>
                        <literal>Name</literal> specifies the name of the configured Sequence Flow Action.
                    </para>
                    <para>
                        <literal>Service</literal> defines the new service of the process ticket. The full name is
                        required (e.g. GramdFatherService::FatherService::SonService ).
                    </para>
                    <para>
                        <literal>ServiceID</literal> defines the internal ID of the new service.
                    </para>
                </section>

                <section>
                    <title>TicketSLASet</title>
                    <para>
                        Assigns a service level agreement to a process ticket.
                        The ticket requires to have a service and the SLA must be assigned to
                        that service.
                        Example:
                    </para>
                    <para>
                        <screen><![CDATA[
$Self->{'Process::SequenceFlowAction'} = {
    'TA1' => {
        Name   => 'Set MySLA SLA',
        Module => 'TicketSLASet',
        Config => {
            SLA   => 'MySLA',
            # or
            SLAID => 123,
        },
    },
};
                        ]]></screen>
                    </para>
                    <para>
                        <literal>Name</literal> specifies the name of the configured Sequence Flow Action.
                    </para>
                    <para>
                        <literal>SLA</literal> defines the new service level agreement of the process ticket.
                    </para>
                    <para>
                        <literal>SLAID</literal> defines the internal ID of the new SLA.
                    </para>
                </section>

                <section>
                    <title>TicketStateSet</title>
                    <para>
                        Changes the state of a process ticket. Example:
                    </para>
                    <para>
                        <screen><![CDATA[
$Self->{'Process::Sequence Flow Action'} = {
    'TA1' => {
        Name   => 'Set State to open',
        Module => 'TicketStateSet',
        Config => {
            State   => 'open',
            # or
            StateID => 4,

            PendingTimeDiff => 123,
        },
    },
};
                        ]]></screen>
                    </para>
                    <para>
                        <literal>Name</literal> specifies the name of the configured Sequence Flow Action.
                    </para>
                    <para>
                        <literal>State</literal> defines the new state of the process ticket.
                    </para>
                    <para>
                        <literal>StateID</literal> defines the internal ID of the new state.
                    </para>
                    <para>
                        <literal>PendingTimeDiff</literal> used only for pending type states, defines the time
                        difference in seconds relative (relative to the Sequence Flow Action execution
                        time) to set ticket pending time (e.g. 3600 means that the pending time is
                        1 hr after the Sequence Flow Action is executed).
                    </para>
                </section>

                <section>
                    <title>TicketTitleSet</title>
                    <para>
                        Sets the ticket title of a process ticket. Example:
                    </para>
                    <para>
                        <screen><![CDATA[
$Self->{'Process::SequenceFlowAction'} = {
    'TA1' => {
        Name   => 'Set Ticket Title to Ticket-title',
        Module => 'TicketTitleSet',
        Config => {
            Title => 'Ticket-title',
        },
    },
};
                        ]]></screen>
                    </para>
                    <para>
                        <literal>Name</literal> specifies the name of the configured Sequence Flow Action.
                    </para>
                    <para>
                        <literal>Title</literal> specifies the new title of the ticket.
                    </para>
                </section>

                <section>
                    <title>TicketTypeSet</title>
                    <para>
                        Sets the ticket type of a process ticket. Example:
                    </para>
                    <para>
                        <screen><![CDATA[
$Self->{'Process::SequenceFlowAction'} = {
    'TA1' => {
        Name   => 'Set Ticket Type to default',
        Module => 'TicketTypeSet',
        Config => {
            Type     => 'default',
            # or
            # TypeID => '1',
        },
    },
};
                        ]]></screen>
                    </para>
                    <para>
                        <literal>Name</literal> specifies the name of the configured Sequence Flow Action.
                    </para>
                    <para>
                        <literal>Type</literal> specifies the name of the ticket type.
                    </para>
                    <para>
                        <literal>TypeID</literal> specifies the internal ID of the ticket type.
                    </para>
                </section>
            </section>
        </section>

        <section id="process-management-acl">
            <title>Access Control Lists (ACLs)</title>
            <para>
                With the help of ACLs, you can limit selectable values in process tickets.
                Please also see the <link linkend="acl-reference">ACL reference</link> for
                a description of the full ticket ACL syntax.
            </para>
            <section>
                <title>ACL configuration</title>
                <para>
                    ACLs can only be defined in <filename>Kernel/Config.pm</filename>. Example:
                </para>
                <para>
                    <screen>
$Self->{TicketAcl}->{'001-ACL-ProcessProperties'} = {
    Properties => {
        Process => {
            ProcessEntityID        => ['P1'],
            ActivityEntityID       => ['A1'],
            ActivityDialogEntityID => ['AD1'],
        }
    },
    Possible => {
        ActivityDialog => ['AD1', 'AD3'],
    },
    PossibleNot => {
        ActivityDialog => ['AD3'],
    },
};
                    </screen>
                </para>
            </section>
            <section>
                <title>001-ACL-ProcessProperties</title>
                <para>
                    Name of the ACL rule. For further information on ACL rules in general, please
                    consult <link linkend="acl">the ACL manual</link>.
                </para>
            </section>
            <section>
                <title>Process</title>
                <para>
                    This is the section that is used to check if an ACL must be applied. If it has
                    the specified values, the rule is applied. The following values can be used:
                </para>
                <section>
                    <title>ProcessEntityID</title>
                    <para>
                        The ID of a process that the process. Matches if the ticket is assigned to
                        this process.
                    </para>
                </section>
                <section>
                    <title>ActivityEntityID</title>
                    <para>
                        The ID of the Activity that the process ticket currently is assigned to.
                    </para>
                </section>
                <section>
                    <title>ActivityDialogEntityID</title>
                    <para>
                        The ID of the User Task Activity Dialog that is currently open for a process ticket.
                    </para>
                </section>
            </section>
            <section>
                <title>Possible/PossibleNot User Task Activity Dialog</title>
                <para>
                    Here you can specify a list of User Task Activity Dialog IDs. This list will limit the
                    possible User Task Activity Dialogs that are offered to the user in the ticket zoom mask.
                </para>
                <para>
                    <literal>Possible</literal> lists the User Task Activity Dialogs that are allowed. The setting above
                    will only allow <literal>AD1</literal> and <literal>AD3</literal> of the list of configured User
                    Task Activity Dialogs.
                </para>
                <para>
                    <literal>PossibleNot</literal> lists the User Task Activity Dialogs that are not allowed. In the
                    example above, the setting will remove <literal>AD3</literal> from the list of configured User Task
                    Activity Dialogs.
                </para>
                <para>
                    If both <literal>Possible</literal> and <literal>PossibleNot</literal> are specified, the list of
                    configured User Task Activity Dialogs will first be filtered by <literal>Possible</literal>, leaving
                    only <literal>AD1</literal> and <literal>AD3</literal> in our example. Then
                    <literal>PossibleNot</literal> will be applied and filter out <literal>AD3</literal>, so that only
                    <literal>AD1</literal> remains and is shown as a possible User Task Activity Dialog that the user
                    can use.
                </para>
                <para>
                    If multiple ACL rules match, the intersection of all matching rules will be
                    calculated to determine the possible User Task Activity Dialogs. Example:
                </para>
                <para>
                    Configured User Task Activity Dialogs: <literal>AD1</literal>, <literal>AD2</literal>,
                    <literal>AD3</literal>, <literal>AD4</literal>, <literal>AD5</literal>, <literal>AD6</literal>,
                    <literal>AD7</literal>.
                </para>
                <para>
                    <screen>
$Self->{TicketAcl}->{'001-ACL-Status'} = {
    Properties => {
        Ticket => {
            Status => 'new',
        }
    },
    Possible => {
        ActivityDialog => ['AD1', 'AD2', 'AD3', 'AD6', 'AD7'],
    },
};
$Self->{TicketAcl}->{'002-ACL-Queue'} = {
    Properties => {
        Ticket => {
            Queue => ['Raw']
        }
    },
    Possible => {
        ActivityDialog => ['AD2', 'AD3', 'AD4', 'AD7'],
    },
};
$Self->{TicketAcl}->{'003-ACL-Priority'} = {
    Properties => {
        Ticket => {
            Priority => ['3 normal']
        }
    },
    PossibleNot => {
        ActivityDialog => ['AD3', 'AD4'],
    },
};
                    </screen>
                </para>
                <para>
                    If a process ticket has the state <literal>new</literal>, is in the <literal>Raw</literal> queue and
                    has a priority <literal>3 normal</literal>, then all three ACL rules will match.
                </para>
                <para>
                    The first rule reduces the User Task Activity Dialogs from <literal>AD1</literal>,
                    <literal>AD2</literal>, <literal>AD3</literal>, <literal>AD4</literal>, <literal>AD5</literal>,
                    <literal>AD6</literal>, <literal>AD7</literal> to <literal>AD1</literal>, <literal>AD2</literal>,
                    <literal>AD3</literal>, <literal>AD6</literal>, <literal>AD7</literal> and forbids
                    <literal>AD4</literal> and <literal>AD5</literal>.
                </para>
                <para>
                    The second rule will now further reduce the remaining User Task Activity Dialogs.
                    In our example, <literal>AD2</literal>, <literal>AD3</literal>, <literal>AD7</literal> will remain.
                </para>
                <para>
                    Now the third rule will further reduce the list by <literal>PossibleNot</literal>.
                    <literal>AD3</literal> is removed from the list. <literal>AD4</literal> is not removed, since it was
                    not on the list in the first place. At the end, <literal>AD2</literal> and <literal>AD7</literal>
                    remain as possible User Task Activity Dialogs that the user can utilize.
                </para>
                <para>
                    It is also possible to limit the processes that can be displayed in the <literal>New
                    process ticket</literal> screen. The functionality is similar to limiting the
                    User Task Activity Dialogs with one exception: The ACLs could only be based on Users.
                </para>
                <para>See examples below:</para>
                <para>
                    <screen>
$Self->{TicketAcl}->{'200-ACL-Process'} = {
    # match properties
    Properties => {
        User => {
            UserID => [2, 3],
        },
    },
    Possible => {
       Process => ['P1', 'P2', 'P3'],
    },
    PossibleNot => {
        Process => ['P4'],
    },
};
                    </screen>
                </para>
                <para>
                    <screen>
$Self->{TicketAcl}->{'201-ACL-Process'} = {
    # match properties
    Properties => {
        User => {
            Group_rw => [ 'MyGroup' ],
        },
    },
    Possible => {
       Process => ['P1', 'P2', 'P3'],
    },
    PossibleNot => {
        Process => ['P4'],
    },
};
                    </screen>
                </para>
                <para>
                    <screen>
$Self->{TicketAcl}->{'202-ACL-Process'} = {
    # match properties
    Properties => {
        User => {
            Role => [ 'MyRole' ],
        },
    },
    Possible => {
       Process => ['P1', 'P2', 'P3'],
    },
    PossibleNot => {
        Process => ['P4'],
    },
};
                    </screen>
                </para>
            </section>
        </section>
    </section>
    <section>
        <title>Import Ready2Adopt process</title>

        <section>
            <title>Import</title>
            <para>
                On the <emphasis>AdminProcessManagement</emphasis> screen you can find an <emphasis>Ready2Adopt
                Processes</emphasis> widget, where you can find best practice Ready2Adopt processes. Currently, there is
                only an <emphasis>Application for leave</emphasis> process available, but you can find additional
                Ready2Adopt processes in the <emphasis role="bold">OTRS Business Solution‚Ñ¢</emphasis>.
            </para>
            <para>
                <figure>
                    <title>Import Ready2Adopt Processes widget</title>
                    <screenshot>
                        <graphic fileref="screenshots/customization/pm-process-widget.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
                    </screenshot>
                </figure>
            </para>
            <para>
                Select process from the drop-down menu and click on the <emphasis>Import Ready2Adopt process</emphasis>
                button. After the process is imported, don't forget to deploy changes.
            </para>
        </section>
    </section>
</section>
