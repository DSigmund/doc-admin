<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="states">
<title>Ticket States</title>

<section id="states-predefined">
<title>Predefined states</title>

<para>
OTRS allows you to change predefined ticket states and their types, or even add new ones. Two attributes are important for a state: the state name and the state type.
</para>

<para>
The default states of OTRS are: 'closed successful', 'closed unsuccessful', 'merged', 'new', 'open', 'pending auto close+', 'pending auto close-', 'pending reminder' and 'removed'.
</para>

<section id="state-new">
<title>New</title>
<para>
Tickets are usually in this state when created from incoming e-mails.
</para>
</section>

<section id="state-open">
<title>Open</title>
<para>
This is the default state for tickets assigned to queues and agents.
</para>
</section>

<section id="state-pending-reminder">
<title>Pending reminder</title>
<para>
After the pending time has expired, the ticket owner will receive a reminder email concerning the ticket. If the ticket is not locked, the reminder will be sent to all agents in the queue. Reminder tickets will only be sent out during business hours, and are repeatedly sent every 24 hours until the ticket state is changed by the agent. Time spent by the ticket in this status will still add towards the escalation time calculation.
</para>
</section>

<section id="state-pending-autoclose-minus">
<title>Pending auto close-</title>
<para>
Tickets in this status will be set to "Closed Unsuccessful" if the pending time has expired. Time spent by the ticket in this status will still add towards the escalation time calculation.
</para>
</section>

<section id="state-pending-autoclose-plus">
<title>Pending auto close+</title>
<para>
Tickets in this status will be set to "Closed Successful" if the pending time has expired. Time spent by the ticket in this status will still add towards the escalation time calculation.
</para>
</section>

<section id="state-merged">
<title>Merged</title>
<para>
This is the state for tickets that have been merged with other tickets.
</para>
</section>

<section id="state-removed">
<title>Removed</title>
<para>
This is the state for tickets that have been removed by the customer. Tickets will not really be deleted, they are just no longer shown as open. In order to enable this state in the customer interface you need to add the state type "removed" to the sysconfig setting "Ticket::Frontend::CustomerTicketZoom###StateType".
</para>
</section>

<section id="state-closed-successful">
<title>Closed Successful</title>
<para>
This is the end state for tickets that have been successfully resolved. Depending on your configuration, you may or may not be able to reopen closed tickets.
</para>
</section>

<section id="state-closed-unsuccessful">
<title>Closed Unsuccessful</title>
<para>
This is the end state for tickets that have NOT been successfully resolved. Depending on your configuration, you may or may not be able to reopen closed tickets.
</para>
</section>

</section>

<section id="states-customizing">
<title>Customizing states</title>
<para>
Every state has a name (state-name) and a type (state-type). Click on the <link linkend="adminarea-states">States</link> link on the Admin page and press the button "Add state" to create a new state. You can freely choose the name of a new state. The state types can not be changed via the web interface. The database has to be directly modified if you want to add new types or change existing names. The default state types should typically not be modified as this can yield unpredictable results. For instance, escalation calculations and the unlock feature are based on specific state types.
</para>

<para>
The name of an already existing state can be changed, or new states added through this screen. If the state "new" has been changed via the web interface, this change also has to be configured via the config file <filename>Kernel/Config.pm</filename> or via the SysConfig interface. The settings specified in the script below have to be modified to ensure that OTRS works with the changed state for "new".
</para>

<para>
<programlisting>
    [...]
    # PostmasterDefaultState
    # (The default state of new tickets.) [default: new]
    $Self-&gt;{PostmasterDefaultState} = 'new';

    # CustomerDefaultState
    # (default state of new customer tickets)
    $Self-&gt;{CustomerDefaultState} = 'new';
    [...]
</programlisting>
</para>

<para>
<emphasis>Script: Modifying the Kernel/Config.pm settings.</emphasis>
</para>

<para>
If a new state type should be added, the ticket_state_type table in the OTRS database needs to be modified with a database client program, as shown in the script below.
</para>

<para>
<screen>
linux:~# mysql -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 23 to server version: 5.0.16-Debian_1-log

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt; use otrs;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; insert into ticket_state_type (name,comments) values ('own','Own
state type');
Query OK, 1 row affected (0.00 sec)

mysql&gt; quit
Bye
linux:~#
</screen>
</para>

<para>
<emphasis>Script: Modifying the OTRS database.</emphasis>
</para>

<para>
Now it is possible to use the new state type you just created. After a state has been linked with this new state type, the OTRS configuration also has to be changed to ensure that the new state is usable. Just modify the following options via SysConfig:
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketPhone_StateDefault">
Frontend::Agent::Ticket::ViewPhoneNew &gt; AgentTicketPhone###StateDefault
</link> - to define the default next state for new phone tickets.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketPhone_StateType">
Frontend::Agent::Ticket::ViewPhoneNew &gt; AgentTicketPhone###StateType
</link> - to define the available next states for new phone tickets.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketEmail_StateDefault">
Frontend::Agent::Ticket::ViewEmailNew &gt; AgentTicketEmail###StateDefault
</link> - to define the default next state for new email tickets.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketEmail_StateType">
Frontend::Agent::Ticket::ViewEmailNew &gt; AgentTicketEmail###StateType
</link> - to define the available next states for new email tickets.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketPhoneOutbound_State">
Frontend::Agent::Ticket::ViewPhoneOutbound &gt; AgentTicketPhoneOutbound###State
</link> - to define the default next state for new phone articles.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketPhoneOutbound_StateType">
Frontend::Agent::Ticket::ViewPhoneOutbound &gt; AgentTicketPhoneOutbound###StateType
</link> - to define the available next states for new phone articles.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketMove_State">
Frontend::Agent::Ticket::ViewMove &gt; AgentTicketMove###State
</link> - to define the default next state for moving a ticket.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketMove_StateType">
Frontend::Agent::Ticket::ViewMove &gt; AgentTicketMove###StateType
</link> - to define the available next states for moving a ticket.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketBounce_StateDefault">
Frontend::Agent::Ticket::ViewBounce &gt; StateDefault
</link> - to define the default next state after bouncing a ticket.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketBounce_StateType">
Frontend::Agent::Ticket::ViewBounce &gt; StateType
</link> - to define the available next states in the bounce screen.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketBulk_StateDefault">
Frontend::Agent::Ticket::ViewBulk &gt; StateDefault
</link> - to define the default next state in a bulk action.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketBulk_StateType">
Frontend::Agent::Ticket::ViewBulk &gt; StateType
</link> - to define the available next states in the bulk action screen.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketClose_StateDefault">
Frontend::Agent::Ticket::ViewClose &gt; StateDefault
</link> - to define the default next state after closing a ticket.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketClose_StateType">
Frontend::Agent::Ticket::ViewClose &gt; StateType
</link> - to define the available next states in the close screen.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketCompose_StateDefault">
Frontend::Agent::Ticket::ViewCompose &gt; StateDefault
</link> - to define the default next state in the Compose (reply) screen.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketCompose_StateType">
Frontend::Agent::Ticket::ViewCompose &gt; StateType
</link> - to define the available next states in the Compose (reply) screen.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketForward_StateDefault">
Frontend::Agent::Ticket::ViewForward &gt; StateDefault
</link> - to define the default next state after forwarding a ticket.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketForward_StateType">
Frontend::Agent::Ticket::ViewForward &gt; StateType
</link> - to define the available next states in the Forward screen.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketFreeText_StateDefault">
Frontend::Agent::Ticket::ViewForward &gt; StateDefault
</link> - to define the default next state of a ticket in the free text screen.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::Frontend::AgentTicketFreeText_StateType">
Frontend::Agent::Ticket::ViewForward &gt; StateType
</link> - to define the available next states in the free text screen.
</para>


<para>
<link linkend="ConfigReference_Setting_PostmasterDefaultState">
Core::PostMaster &gt; PostmasterDefaultState
</link> - to define the state of tickets created from emails.
</para>

<para>
<link linkend="ConfigReference_Setting_PostmasterFollowUpState">
Core::PostMaster &gt; PostmasterFollowUpState
</link> - to define the state of tickets after a follow-up has been received.
</para>

<para>
<link linkend="ConfigReference_Setting_PostmasterFollowUpStateClosed">
Core::PostMaster &gt; PostmasterFollowUpStateClosed
</link> - to define the state of tickets after a follow-up has been received on an already closed ticket.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::ViewableStateType">
Core::Ticket &gt; ViewableStateType
</link> - to define the state types that are displayed at various places in the system, for example in the Queueview.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::UnlockStateType">
Core::Ticket &gt; UnlockStateType
</link> - to define the state types for unlocked tickets.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::PendingReminderStateType">
Core::Ticket &gt; PendingReminderStateType
</link> - to define the state type for reminder tickets.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::PendingAutoStateType">
Core::Ticket &gt; PendingAutoStateType
</link> - to define the state type for Pending Auto tickets.
</para>

<para>
<link linkend="ConfigReference_Setting_Ticket::StateAfterPending">
Core::Ticket > StateAfterPending
</link> - to define the state a ticket is set to after the Pending Auto timer of the configured state has expired.
</para>

</section>
</section>
